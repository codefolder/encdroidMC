android.support.v4.app.ActivityCompat -> android.support.v4.app.ActivityCompat:
    boolean invalidateOptionsMenu(android.app.Activity) -> invalidateOptionsMenu
android.support.v4.app.ActivityCompatHoneycomb -> android.support.v4.app.ActivityCompatHoneycomb:
    void invalidateOptionsMenu(android.app.Activity) -> invalidateOptionsMenu
    void dump(android.app.Activity,java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
android.support.v4.app.BackStackRecord -> android.support.v4.app.BackStackRecord:
    java.lang.String TAG -> TAG
    android.support.v4.app.FragmentManagerImpl mManager -> mManager
    int OP_NULL -> OP_NULL
    int OP_ADD -> OP_ADD
    int OP_REPLACE -> OP_REPLACE
    int OP_REMOVE -> OP_REMOVE
    int OP_HIDE -> OP_HIDE
    int OP_SHOW -> OP_SHOW
    int OP_DETACH -> OP_DETACH
    int OP_ATTACH -> OP_ATTACH
    android.support.v4.app.BackStackRecord$Op mHead -> mHead
    android.support.v4.app.BackStackRecord$Op mTail -> mTail
    int mNumOp -> mNumOp
    int mEnterAnim -> mEnterAnim
    int mExitAnim -> mExitAnim
    int mPopEnterAnim -> mPopEnterAnim
    int mPopExitAnim -> mPopExitAnim
    int mTransition -> mTransition
    int mTransitionStyle -> mTransitionStyle
    boolean mAddToBackStack -> mAddToBackStack
    boolean mAllowAddToBackStack -> mAllowAddToBackStack
    java.lang.String mName -> mName
    boolean mCommitted -> mCommitted
    int mIndex -> mIndex
    int mBreadCrumbTitleRes -> mBreadCrumbTitleRes
    java.lang.CharSequence mBreadCrumbTitleText -> mBreadCrumbTitleText
    int mBreadCrumbShortTitleRes -> mBreadCrumbShortTitleRes
    java.lang.CharSequence mBreadCrumbShortTitleText -> mBreadCrumbShortTitleText
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    void dump(java.lang.String,java.io.PrintWriter,boolean) -> dump
    int getId() -> getId
    int getBreadCrumbTitleRes() -> getBreadCrumbTitleRes
    int getBreadCrumbShortTitleRes() -> getBreadCrumbShortTitleRes
    java.lang.CharSequence getBreadCrumbTitle() -> getBreadCrumbTitle
    java.lang.CharSequence getBreadCrumbShortTitle() -> getBreadCrumbShortTitle
    void addOp(android.support.v4.app.BackStackRecord$Op) -> addOp
    android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String) -> add
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment) -> add
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> add
    void doAddOp(int,android.support.v4.app.Fragment,java.lang.String,int) -> doAddOp
    android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment) -> replace
    android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String) -> replace
    android.support.v4.app.FragmentTransaction remove(android.support.v4.app.Fragment) -> remove
    android.support.v4.app.FragmentTransaction hide(android.support.v4.app.Fragment) -> hide
    android.support.v4.app.FragmentTransaction show(android.support.v4.app.Fragment) -> show
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> detach
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> attach
    android.support.v4.app.FragmentTransaction setCustomAnimations(int,int) -> setCustomAnimations
    android.support.v4.app.FragmentTransaction setCustomAnimations(int,int,int,int) -> setCustomAnimations
    android.support.v4.app.FragmentTransaction setTransition(int) -> setTransition
    android.support.v4.app.FragmentTransaction setTransitionStyle(int) -> setTransitionStyle
    android.support.v4.app.FragmentTransaction addToBackStack(java.lang.String) -> addToBackStack
    boolean isAddToBackStackAllowed() -> isAddToBackStackAllowed
    android.support.v4.app.FragmentTransaction disallowAddToBackStack() -> disallowAddToBackStack
    android.support.v4.app.FragmentTransaction setBreadCrumbTitle(int) -> setBreadCrumbTitle
    android.support.v4.app.FragmentTransaction setBreadCrumbTitle(java.lang.CharSequence) -> setBreadCrumbTitle
    android.support.v4.app.FragmentTransaction setBreadCrumbShortTitle(int) -> setBreadCrumbShortTitle
    android.support.v4.app.FragmentTransaction setBreadCrumbShortTitle(java.lang.CharSequence) -> setBreadCrumbShortTitle
    void bumpBackStackNesting(int) -> bumpBackStackNesting
    int commit() -> commit
    int commitAllowingStateLoss() -> commitAllowingStateLoss
    int commitInternal(boolean) -> commitInternal
    void run() -> run
    void popFromBackStack(boolean) -> popFromBackStack
    java.lang.String getName() -> getName
    int getTransition() -> getTransition
    int getTransitionStyle() -> getTransitionStyle
    boolean isEmpty() -> isEmpty
android.support.v4.app.BackStackRecord$Op -> android.support.v4.app.BackStackRecord$Op:
    android.support.v4.app.BackStackRecord$Op next -> next
    android.support.v4.app.BackStackRecord$Op prev -> prev
    int cmd -> cmd
    android.support.v4.app.Fragment fragment -> fragment
    int enterAnim -> enterAnim
    int exitAnim -> exitAnim
    int popEnterAnim -> popEnterAnim
    int popExitAnim -> popExitAnim
    java.util.ArrayList removed -> removed
android.support.v4.app.BackStackState -> android.support.v4.app.BackStackState:
    int[] mOps -> mOps
    int mTransition -> mTransition
    int mTransitionStyle -> mTransitionStyle
    java.lang.String mName -> mName
    int mIndex -> mIndex
    int mBreadCrumbTitleRes -> mBreadCrumbTitleRes
    java.lang.CharSequence mBreadCrumbTitleText -> mBreadCrumbTitleText
    int mBreadCrumbShortTitleRes -> mBreadCrumbShortTitleRes
    java.lang.CharSequence mBreadCrumbShortTitleText -> mBreadCrumbShortTitleText
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.BackStackRecord instantiate(android.support.v4.app.FragmentManagerImpl) -> instantiate
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.BackStackState$1 -> android.support.v4.app.BackStackState$1:
    android.support.v4.app.BackStackState createFromParcel(android.os.Parcel) -> createFromParcel
    android.support.v4.app.BackStackState[] newArray(int) -> newArray
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.DialogFragment -> android.support.v4.app.DialogFragment:
    int STYLE_NORMAL -> STYLE_NORMAL
    int STYLE_NO_TITLE -> STYLE_NO_TITLE
    int STYLE_NO_FRAME -> STYLE_NO_FRAME
    int STYLE_NO_INPUT -> STYLE_NO_INPUT
    java.lang.String SAVED_DIALOG_STATE_TAG -> SAVED_DIALOG_STATE_TAG
    java.lang.String SAVED_STYLE -> SAVED_STYLE
    java.lang.String SAVED_THEME -> SAVED_THEME
    java.lang.String SAVED_CANCELABLE -> SAVED_CANCELABLE
    java.lang.String SAVED_SHOWS_DIALOG -> SAVED_SHOWS_DIALOG
    java.lang.String SAVED_BACK_STACK_ID -> SAVED_BACK_STACK_ID
    int mStyle -> mStyle
    int mTheme -> mTheme
    boolean mCancelable -> mCancelable
    boolean mShowsDialog -> mShowsDialog
    int mBackStackId -> mBackStackId
    android.app.Dialog mDialog -> mDialog
    boolean mViewDestroyed -> mViewDestroyed
    boolean mDismissed -> mDismissed
    boolean mShownByMe -> mShownByMe
    void setStyle(int,int) -> setStyle
    void show(android.support.v4.app.FragmentManager,java.lang.String) -> show
    int show(android.support.v4.app.FragmentTransaction,java.lang.String) -> show
    void dismiss() -> dismiss
    void dismissAllowingStateLoss() -> dismissAllowingStateLoss
    void dismissInternal(boolean) -> dismissInternal
    android.app.Dialog getDialog() -> getDialog
    int getTheme() -> getTheme
    void setCancelable(boolean) -> setCancelable
    boolean isCancelable() -> isCancelable
    void setShowsDialog(boolean) -> setShowsDialog
    boolean getShowsDialog() -> getShowsDialog
    void onAttach(android.app.Activity) -> onAttach
    void onDetach() -> onDetach
    void onCreate(android.os.Bundle) -> onCreate
    android.view.LayoutInflater getLayoutInflater(android.os.Bundle) -> getLayoutInflater
    android.app.Dialog onCreateDialog(android.os.Bundle) -> onCreateDialog
    void onCancel(android.content.DialogInterface) -> onCancel
    void onDismiss(android.content.DialogInterface) -> onDismiss
    void onActivityCreated(android.os.Bundle) -> onActivityCreated
    void onStart() -> onStart
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onStop() -> onStop
    void onDestroyView() -> onDestroyView
android.support.v4.app.Fragment -> android.support.v4.app.Fragment:
    java.util.HashMap sClassMap -> sClassMap
    int INITIALIZING -> INITIALIZING
    int CREATED -> CREATED
    int ACTIVITY_CREATED -> ACTIVITY_CREATED
    int STOPPED -> STOPPED
    int STARTED -> STARTED
    int RESUMED -> RESUMED
    int mState -> mState
    android.view.View mAnimatingAway -> mAnimatingAway
    int mStateAfterAnimating -> mStateAfterAnimating
    android.os.Bundle mSavedFragmentState -> mSavedFragmentState
    android.util.SparseArray mSavedViewState -> mSavedViewState
    int mIndex -> mIndex
    java.lang.String mWho -> mWho
    android.os.Bundle mArguments -> mArguments
    android.support.v4.app.Fragment mTarget -> mTarget
    int mTargetIndex -> mTargetIndex
    int mTargetRequestCode -> mTargetRequestCode
    boolean mAdded -> mAdded
    boolean mRemoving -> mRemoving
    boolean mResumed -> mResumed
    boolean mFromLayout -> mFromLayout
    boolean mInLayout -> mInLayout
    boolean mRestored -> mRestored
    int mBackStackNesting -> mBackStackNesting
    android.support.v4.app.FragmentManagerImpl mFragmentManager -> mFragmentManager
    android.support.v4.app.FragmentActivity mActivity -> mActivity
    android.support.v4.app.FragmentManagerImpl mChildFragmentManager -> mChildFragmentManager
    android.support.v4.app.Fragment mParentFragment -> mParentFragment
    int mFragmentId -> mFragmentId
    int mContainerId -> mContainerId
    java.lang.String mTag -> mTag
    boolean mHidden -> mHidden
    boolean mDetached -> mDetached
    boolean mRetainInstance -> mRetainInstance
    boolean mRetaining -> mRetaining
    boolean mHasMenu -> mHasMenu
    boolean mMenuVisible -> mMenuVisible
    boolean mCalled -> mCalled
    int mNextAnim -> mNextAnim
    android.view.ViewGroup mContainer -> mContainer
    android.view.View mView -> mView
    android.view.View mInnerView -> mInnerView
    boolean mDeferStart -> mDeferStart
    boolean mUserVisibleHint -> mUserVisibleHint
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> mLoaderManager
    boolean mLoadersStarted -> mLoadersStarted
    boolean mCheckedForLoaderManager -> mCheckedForLoaderManager
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String) -> instantiate
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle) -> instantiate
    void restoreViewState(android.os.Bundle) -> restoreViewState
    void setIndex(int,android.support.v4.app.Fragment) -> setIndex
    boolean isInBackStack() -> isInBackStack
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int getId() -> getId
    java.lang.String getTag() -> getTag
    void setArguments(android.os.Bundle) -> setArguments
    android.os.Bundle getArguments() -> getArguments
    void setInitialSavedState(android.support.v4.app.Fragment$SavedState) -> setInitialSavedState
    void setTargetFragment(android.support.v4.app.Fragment,int) -> setTargetFragment
    android.support.v4.app.Fragment getTargetFragment() -> getTargetFragment
    int getTargetRequestCode() -> getTargetRequestCode
    android.support.v4.app.FragmentActivity getActivity() -> getActivity
    android.content.res.Resources getResources() -> getResources
    java.lang.CharSequence getText(int) -> getText
    java.lang.String getString(int) -> getString
    java.lang.String getString(int,java.lang.Object[]) -> getString
    android.support.v4.app.FragmentManager getFragmentManager() -> getFragmentManager
    android.support.v4.app.FragmentManager getChildFragmentManager() -> getChildFragmentManager
    android.support.v4.app.Fragment getParentFragment() -> getParentFragment
    boolean isAdded() -> isAdded
    boolean isDetached() -> isDetached
    boolean isRemoving() -> isRemoving
    boolean isInLayout() -> isInLayout
    boolean isResumed() -> isResumed
    boolean isVisible() -> isVisible
    boolean isHidden() -> isHidden
    void onHiddenChanged(boolean) -> onHiddenChanged
    void setRetainInstance(boolean) -> setRetainInstance
    boolean getRetainInstance() -> getRetainInstance
    void setHasOptionsMenu(boolean) -> setHasOptionsMenu
    void setMenuVisibility(boolean) -> setMenuVisibility
    void setUserVisibleHint(boolean) -> setUserVisibleHint
    boolean getUserVisibleHint() -> getUserVisibleHint
    android.support.v4.app.LoaderManager getLoaderManager() -> getLoaderManager
    void startActivity(android.content.Intent) -> startActivity
    void startActivityForResult(android.content.Intent,int) -> startActivityForResult
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    android.view.LayoutInflater getLayoutInflater(android.os.Bundle) -> getLayoutInflater
    void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle) -> onInflate
    void onAttach(android.app.Activity) -> onAttach
    android.view.animation.Animation onCreateAnimation(int,boolean,int) -> onCreateAnimation
    void onCreate(android.os.Bundle) -> onCreate
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> onCreateView
    void onViewCreated(android.view.View,android.os.Bundle) -> onViewCreated
    android.view.View getView() -> getView
    void onActivityCreated(android.os.Bundle) -> onActivityCreated
    void onViewStateRestored(android.os.Bundle) -> onViewStateRestored
    void onStart() -> onStart
    void onResume() -> onResume
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onPause() -> onPause
    void onStop() -> onStop
    void onLowMemory() -> onLowMemory
    void onDestroyView() -> onDestroyView
    void onDestroy() -> onDestroy
    void initState() -> initState
    void onDetach() -> onDetach
    void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> onCreateOptionsMenu
    void onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    void onDestroyOptionsMenu() -> onDestroyOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onOptionsMenuClosed(android.view.Menu) -> onOptionsMenuClosed
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    void registerForContextMenu(android.view.View) -> registerForContextMenu
    void unregisterForContextMenu(android.view.View) -> unregisterForContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    android.support.v4.app.Fragment findFragmentByWho(java.lang.String) -> findFragmentByWho
    void instantiateChildFragmentManager() -> instantiateChildFragmentManager
    void performCreate(android.os.Bundle) -> performCreate
    android.view.View performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> performCreateView
    void performActivityCreated(android.os.Bundle) -> performActivityCreated
    void performStart() -> performStart
    void performResume() -> performResume
    void performConfigurationChanged(android.content.res.Configuration) -> performConfigurationChanged
    void performLowMemory() -> performLowMemory
    boolean performCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> performCreateOptionsMenu
    boolean performPrepareOptionsMenu(android.view.Menu) -> performPrepareOptionsMenu
    boolean performOptionsItemSelected(android.view.MenuItem) -> performOptionsItemSelected
    boolean performContextItemSelected(android.view.MenuItem) -> performContextItemSelected
    void performOptionsMenuClosed(android.view.Menu) -> performOptionsMenuClosed
    void performSaveInstanceState(android.os.Bundle) -> performSaveInstanceState
    void performPause() -> performPause
    void performStop() -> performStop
    void performReallyStop() -> performReallyStop
    void performDestroyView() -> performDestroyView
    void performDestroy() -> performDestroy
android.support.v4.app.Fragment$1 -> android.support.v4.app.Fragment$1:
    android.support.v4.app.Fragment this$0 -> this$0
    android.view.View findViewById(int) -> findViewById
android.support.v4.app.Fragment$InstantiationException -> android.support.v4.app.Fragment$InstantiationException:
android.support.v4.app.Fragment$SavedState -> android.support.v4.app.Fragment$SavedState:
    android.os.Bundle mState -> mState
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.Fragment$SavedState$1 -> android.support.v4.app.Fragment$SavedState$1:
    android.support.v4.app.Fragment$SavedState createFromParcel(android.os.Parcel) -> createFromParcel
    android.support.v4.app.Fragment$SavedState[] newArray(int) -> newArray
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentActivity -> android.support.v4.app.FragmentActivity:
    java.lang.String TAG -> TAG
    java.lang.String FRAGMENTS_TAG -> FRAGMENTS_TAG
    int HONEYCOMB -> HONEYCOMB
    int MSG_REALLY_STOPPED -> MSG_REALLY_STOPPED
    int MSG_RESUME_PENDING -> MSG_RESUME_PENDING
    android.os.Handler mHandler -> mHandler
    android.support.v4.app.FragmentManagerImpl mFragments -> mFragments
    android.support.v4.app.FragmentContainer mContainer -> mContainer
    boolean mCreated -> mCreated
    boolean mResumed -> mResumed
    boolean mStopped -> mStopped
    boolean mReallyStopped -> mReallyStopped
    boolean mRetaining -> mRetaining
    boolean mOptionsMenuInvalidated -> mOptionsMenuInvalidated
    boolean mCheckedForLoaderManager -> mCheckedForLoaderManager
    boolean mLoadersStarted -> mLoadersStarted
    java.util.HashMap mAllLoaderManagers -> mAllLoaderManagers
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> mLoaderManager
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onBackPressed() -> onBackPressed
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreatePanelMenu(int,android.view.Menu) -> onCreatePanelMenu
    android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
    void onDestroy() -> onDestroy
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onLowMemory() -> onLowMemory
    boolean onMenuItemSelected(int,android.view.MenuItem) -> onMenuItemSelected
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    void onPause() -> onPause
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onResume() -> onResume
    void onPostResume() -> onPostResume
    void onResumeFragments() -> onResumeFragments
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> onPreparePanel
    java.lang.Object onRetainNonConfigurationInstance() -> onRetainNonConfigurationInstance
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onStart() -> onStart
    void onStop() -> onStop
    java.lang.Object onRetainCustomNonConfigurationInstance() -> onRetainCustomNonConfigurationInstance
    java.lang.Object getLastCustomNonConfigurationInstance() -> getLastCustomNonConfigurationInstance
    void supportInvalidateOptionsMenu() -> supportInvalidateOptionsMenu
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    java.lang.String viewToString(android.view.View) -> viewToString
    void dumpViewHierarchy(java.lang.String,java.io.PrintWriter,android.view.View) -> dumpViewHierarchy
    void doReallyStop(boolean) -> doReallyStop
    void onReallyStop() -> onReallyStop
    void onAttachFragment(android.support.v4.app.Fragment) -> onAttachFragment
    android.support.v4.app.FragmentManager getSupportFragmentManager() -> getSupportFragmentManager
    void startActivityForResult(android.content.Intent,int) -> startActivityForResult
    void startActivityFromFragment(android.support.v4.app.Fragment,android.content.Intent,int) -> startActivityFromFragment
    void invalidateSupportFragment(java.lang.String) -> invalidateSupportFragment
    android.support.v4.app.LoaderManager getSupportLoaderManager() -> getSupportLoaderManager
    android.support.v4.app.LoaderManagerImpl getLoaderManager(java.lang.String,boolean,boolean) -> getLoaderManager
android.support.v4.app.FragmentActivity$1 -> android.support.v4.app.FragmentActivity$1:
    android.support.v4.app.FragmentActivity this$0 -> this$0
    void handleMessage(android.os.Message) -> handleMessage
android.support.v4.app.FragmentActivity$2 -> android.support.v4.app.FragmentActivity$2:
    android.support.v4.app.FragmentActivity this$0 -> this$0
    android.view.View findViewById(int) -> findViewById
android.support.v4.app.FragmentActivity$FragmentTag -> android.support.v4.app.FragmentActivity$FragmentTag:
    int[] Fragment -> Fragment
    int Fragment_id -> Fragment_id
    int Fragment_name -> Fragment_name
    int Fragment_tag -> Fragment_tag
android.support.v4.app.FragmentActivity$NonConfigurationInstances -> android.support.v4.app.FragmentActivity$NonConfigurationInstances:
    java.lang.Object activity -> activity
    java.lang.Object custom -> custom
    java.util.HashMap children -> children
    java.util.ArrayList fragments -> fragments
    java.util.HashMap loaders -> loaders
android.support.v4.app.FragmentContainer -> android.support.v4.app.FragmentContainer:
    android.view.View findViewById(int) -> findViewById
android.support.v4.app.FragmentManager -> android.support.v4.app.FragmentManager:
    int POP_BACK_STACK_INCLUSIVE -> POP_BACK_STACK_INCLUSIVE
    android.support.v4.app.FragmentTransaction beginTransaction() -> beginTransaction
    android.support.v4.app.FragmentTransaction openTransaction() -> openTransaction
    boolean executePendingTransactions() -> executePendingTransactions
    android.support.v4.app.Fragment findFragmentById(int) -> findFragmentById
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> findFragmentByTag
    void popBackStack() -> popBackStack
    boolean popBackStackImmediate() -> popBackStackImmediate
    void popBackStack(java.lang.String,int) -> popBackStack
    boolean popBackStackImmediate(java.lang.String,int) -> popBackStackImmediate
    void popBackStack(int,int) -> popBackStack
    boolean popBackStackImmediate(int,int) -> popBackStackImmediate
    int getBackStackEntryCount() -> getBackStackEntryCount
    android.support.v4.app.FragmentManager$BackStackEntry getBackStackEntryAt(int) -> getBackStackEntryAt
    void addOnBackStackChangedListener(android.support.v4.app.FragmentManager$OnBackStackChangedListener) -> addOnBackStackChangedListener
    void removeOnBackStackChangedListener(android.support.v4.app.FragmentManager$OnBackStackChangedListener) -> removeOnBackStackChangedListener
    void putFragment(android.os.Bundle,java.lang.String,android.support.v4.app.Fragment) -> putFragment
    android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String) -> getFragment
    android.support.v4.app.Fragment$SavedState saveFragmentInstanceState(android.support.v4.app.Fragment) -> saveFragmentInstanceState
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    void enableDebugLogging(boolean) -> enableDebugLogging
android.support.v4.app.FragmentManager$BackStackEntry -> android.support.v4.app.FragmentManager$BackStackEntry:
    int getId() -> getId
    java.lang.String getName() -> getName
    int getBreadCrumbTitleRes() -> getBreadCrumbTitleRes
    int getBreadCrumbShortTitleRes() -> getBreadCrumbShortTitleRes
    java.lang.CharSequence getBreadCrumbTitle() -> getBreadCrumbTitle
    java.lang.CharSequence getBreadCrumbShortTitle() -> getBreadCrumbShortTitle
android.support.v4.app.FragmentManager$OnBackStackChangedListener -> android.support.v4.app.FragmentManager$OnBackStackChangedListener:
    void onBackStackChanged() -> onBackStackChanged
android.support.v4.app.FragmentManagerImpl -> android.support.v4.app.FragmentManagerImpl:
    boolean DEBUG -> DEBUG
    java.lang.String TAG -> TAG
    boolean HONEYCOMB -> HONEYCOMB
    java.lang.String TARGET_REQUEST_CODE_STATE_TAG -> TARGET_REQUEST_CODE_STATE_TAG
    java.lang.String TARGET_STATE_TAG -> TARGET_STATE_TAG
    java.lang.String VIEW_STATE_TAG -> VIEW_STATE_TAG
    java.lang.String USER_VISIBLE_HINT_TAG -> USER_VISIBLE_HINT_TAG
    java.util.ArrayList mPendingActions -> mPendingActions
    java.lang.Runnable[] mTmpActions -> mTmpActions
    boolean mExecutingActions -> mExecutingActions
    java.util.ArrayList mActive -> mActive
    java.util.ArrayList mAdded -> mAdded
    java.util.ArrayList mAvailIndices -> mAvailIndices
    java.util.ArrayList mBackStack -> mBackStack
    java.util.ArrayList mCreatedMenus -> mCreatedMenus
    java.util.ArrayList mBackStackIndices -> mBackStackIndices
    java.util.ArrayList mAvailBackStackIndices -> mAvailBackStackIndices
    java.util.ArrayList mBackStackChangeListeners -> mBackStackChangeListeners
    int mCurState -> mCurState
    android.support.v4.app.FragmentActivity mActivity -> mActivity
    android.support.v4.app.FragmentContainer mContainer -> mContainer
    android.support.v4.app.Fragment mParent -> mParent
    boolean mNeedMenuInvalidate -> mNeedMenuInvalidate
    boolean mStateSaved -> mStateSaved
    boolean mDestroyed -> mDestroyed
    java.lang.String mNoTransactionsBecause -> mNoTransactionsBecause
    boolean mHavePendingDeferredStart -> mHavePendingDeferredStart
    android.os.Bundle mStateBundle -> mStateBundle
    android.util.SparseArray mStateArray -> mStateArray
    java.lang.Runnable mExecCommit -> mExecCommit
    android.view.animation.Interpolator DECELERATE_QUINT -> DECELERATE_QUINT
    android.view.animation.Interpolator DECELERATE_CUBIC -> DECELERATE_CUBIC
    android.view.animation.Interpolator ACCELERATE_QUINT -> ACCELERATE_QUINT
    android.view.animation.Interpolator ACCELERATE_CUBIC -> ACCELERATE_CUBIC
    int ANIM_DUR -> ANIM_DUR
    int ANIM_STYLE_OPEN_ENTER -> ANIM_STYLE_OPEN_ENTER
    int ANIM_STYLE_OPEN_EXIT -> ANIM_STYLE_OPEN_EXIT
    int ANIM_STYLE_CLOSE_ENTER -> ANIM_STYLE_CLOSE_ENTER
    int ANIM_STYLE_CLOSE_EXIT -> ANIM_STYLE_CLOSE_EXIT
    int ANIM_STYLE_FADE_ENTER -> ANIM_STYLE_FADE_ENTER
    int ANIM_STYLE_FADE_EXIT -> ANIM_STYLE_FADE_EXIT
    void throwException(java.lang.RuntimeException) -> throwException
    android.support.v4.app.FragmentTransaction beginTransaction() -> beginTransaction
    boolean executePendingTransactions() -> executePendingTransactions
    void popBackStack() -> popBackStack
    boolean popBackStackImmediate() -> popBackStackImmediate
    void popBackStack(java.lang.String,int) -> popBackStack
    boolean popBackStackImmediate(java.lang.String,int) -> popBackStackImmediate
    void popBackStack(int,int) -> popBackStack
    boolean popBackStackImmediate(int,int) -> popBackStackImmediate
    int getBackStackEntryCount() -> getBackStackEntryCount
    android.support.v4.app.FragmentManager$BackStackEntry getBackStackEntryAt(int) -> getBackStackEntryAt
    void addOnBackStackChangedListener(android.support.v4.app.FragmentManager$OnBackStackChangedListener) -> addOnBackStackChangedListener
    void removeOnBackStackChangedListener(android.support.v4.app.FragmentManager$OnBackStackChangedListener) -> removeOnBackStackChangedListener
    void putFragment(android.os.Bundle,java.lang.String,android.support.v4.app.Fragment) -> putFragment
    android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String) -> getFragment
    android.support.v4.app.Fragment$SavedState saveFragmentInstanceState(android.support.v4.app.Fragment) -> saveFragmentInstanceState
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    android.view.animation.Animation makeOpenCloseAnimation(android.content.Context,float,float,float,float) -> makeOpenCloseAnimation
    android.view.animation.Animation makeFadeAnimation(android.content.Context,float,float) -> makeFadeAnimation
    android.view.animation.Animation loadAnimation(android.support.v4.app.Fragment,int,boolean,int) -> loadAnimation
    void performPendingDeferredStart(android.support.v4.app.Fragment) -> performPendingDeferredStart
    void moveToState(android.support.v4.app.Fragment,int,int,int,boolean) -> moveToState
    void moveToState(android.support.v4.app.Fragment) -> moveToState
    void moveToState(int,boolean) -> moveToState
    void moveToState(int,int,int,boolean) -> moveToState
    void startPendingDeferredFragments() -> startPendingDeferredFragments
    void makeActive(android.support.v4.app.Fragment) -> makeActive
    void makeInactive(android.support.v4.app.Fragment) -> makeInactive
    void addFragment(android.support.v4.app.Fragment,boolean) -> addFragment
    void removeFragment(android.support.v4.app.Fragment,int,int) -> removeFragment
    void hideFragment(android.support.v4.app.Fragment,int,int) -> hideFragment
    void showFragment(android.support.v4.app.Fragment,int,int) -> showFragment
    void detachFragment(android.support.v4.app.Fragment,int,int) -> detachFragment
    void attachFragment(android.support.v4.app.Fragment,int,int) -> attachFragment
    android.support.v4.app.Fragment findFragmentById(int) -> findFragmentById
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> findFragmentByTag
    android.support.v4.app.Fragment findFragmentByWho(java.lang.String) -> findFragmentByWho
    void checkStateLoss() -> checkStateLoss
    void enqueueAction(java.lang.Runnable,boolean) -> enqueueAction
    int allocBackStackIndex(android.support.v4.app.BackStackRecord) -> allocBackStackIndex
    void setBackStackIndex(int,android.support.v4.app.BackStackRecord) -> setBackStackIndex
    void freeBackStackIndex(int) -> freeBackStackIndex
    boolean execPendingActions() -> execPendingActions
    void reportBackStackChanged() -> reportBackStackChanged
    void addBackStackState(android.support.v4.app.BackStackRecord) -> addBackStackState
    boolean popBackStackState(android.os.Handler,java.lang.String,int,int) -> popBackStackState
    java.util.ArrayList retainNonConfig() -> retainNonConfig
    void saveFragmentViewState(android.support.v4.app.Fragment) -> saveFragmentViewState
    android.os.Bundle saveFragmentBasicState(android.support.v4.app.Fragment) -> saveFragmentBasicState
    android.os.Parcelable saveAllState() -> saveAllState
    void restoreAllState(android.os.Parcelable,java.util.ArrayList) -> restoreAllState
    void attachActivity(android.support.v4.app.FragmentActivity,android.support.v4.app.FragmentContainer,android.support.v4.app.Fragment) -> attachActivity
    void noteStateNotSaved() -> noteStateNotSaved
    void dispatchCreate() -> dispatchCreate
    void dispatchActivityCreated() -> dispatchActivityCreated
    void dispatchStart() -> dispatchStart
    void dispatchResume() -> dispatchResume
    void dispatchPause() -> dispatchPause
    void dispatchStop() -> dispatchStop
    void dispatchReallyStop() -> dispatchReallyStop
    void dispatchDestroyView() -> dispatchDestroyView
    void dispatchDestroy() -> dispatchDestroy
    void dispatchConfigurationChanged(android.content.res.Configuration) -> dispatchConfigurationChanged
    void dispatchLowMemory() -> dispatchLowMemory
    boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> dispatchCreateOptionsMenu
    boolean dispatchPrepareOptionsMenu(android.view.Menu) -> dispatchPrepareOptionsMenu
    boolean dispatchOptionsItemSelected(android.view.MenuItem) -> dispatchOptionsItemSelected
    boolean dispatchContextItemSelected(android.view.MenuItem) -> dispatchContextItemSelected
    void dispatchOptionsMenuClosed(android.view.Menu) -> dispatchOptionsMenuClosed
    int reverseTransit(int) -> reverseTransit
    int transitToStyleIndex(int,boolean) -> transitToStyleIndex
android.support.v4.app.FragmentManagerImpl$1 -> android.support.v4.app.FragmentManagerImpl$1:
    android.support.v4.app.FragmentManagerImpl this$0 -> this$0
    void run() -> run
android.support.v4.app.FragmentManagerImpl$2 -> android.support.v4.app.FragmentManagerImpl$2:
    android.support.v4.app.FragmentManagerImpl this$0 -> this$0
    void run() -> run
android.support.v4.app.FragmentManagerImpl$3 -> android.support.v4.app.FragmentManagerImpl$3:
    java.lang.String val$name -> val$name
    int val$flags -> val$flags
    android.support.v4.app.FragmentManagerImpl this$0 -> this$0
    void run() -> run
android.support.v4.app.FragmentManagerImpl$4 -> android.support.v4.app.FragmentManagerImpl$4:
    int val$id -> val$id
    int val$flags -> val$flags
    android.support.v4.app.FragmentManagerImpl this$0 -> this$0
    void run() -> run
android.support.v4.app.FragmentManagerImpl$5 -> android.support.v4.app.FragmentManagerImpl$5:
    android.support.v4.app.Fragment val$fragment -> val$fragment
    android.support.v4.app.FragmentManagerImpl this$0 -> this$0
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
android.support.v4.app.FragmentManagerState -> android.support.v4.app.FragmentManagerState:
    android.support.v4.app.FragmentState[] mActive -> mActive
    int[] mAdded -> mAdded
    android.support.v4.app.BackStackState[] mBackStack -> mBackStack
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentManagerState$1 -> android.support.v4.app.FragmentManagerState$1:
    android.support.v4.app.FragmentManagerState createFromParcel(android.os.Parcel) -> createFromParcel
    android.support.v4.app.FragmentManagerState[] newArray(int) -> newArray
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentPagerAdapter -> android.support.v4.app.FragmentPagerAdapter:
    java.lang.String TAG -> TAG
    boolean DEBUG -> DEBUG
    android.support.v4.app.FragmentManager mFragmentManager -> mFragmentManager
    android.support.v4.app.FragmentTransaction mCurTransaction -> mCurTransaction
    android.support.v4.app.Fragment mCurrentPrimaryItem -> mCurrentPrimaryItem
    android.support.v4.app.Fragment getItem(int) -> getItem
    void startUpdate(android.view.ViewGroup) -> startUpdate
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> instantiateItem
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> destroyItem
    void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object) -> setPrimaryItem
    void finishUpdate(android.view.ViewGroup) -> finishUpdate
    boolean isViewFromObject(android.view.View,java.lang.Object) -> isViewFromObject
    android.os.Parcelable saveState() -> saveState
    void restoreState(android.os.Parcelable,java.lang.ClassLoader) -> restoreState
    long getItemId(int) -> getItemId
    java.lang.String makeFragmentName(int,long) -> makeFragmentName
android.support.v4.app.FragmentState -> android.support.v4.app.FragmentState:
    java.lang.String mClassName -> mClassName
    int mIndex -> mIndex
    boolean mFromLayout -> mFromLayout
    int mFragmentId -> mFragmentId
    int mContainerId -> mContainerId
    java.lang.String mTag -> mTag
    boolean mRetainInstance -> mRetainInstance
    boolean mDetached -> mDetached
    android.os.Bundle mArguments -> mArguments
    android.os.Bundle mSavedFragmentState -> mSavedFragmentState
    android.support.v4.app.Fragment mInstance -> mInstance
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.Fragment instantiate(android.support.v4.app.FragmentActivity,android.support.v4.app.Fragment) -> instantiate
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentState$1 -> android.support.v4.app.FragmentState$1:
    android.support.v4.app.FragmentState createFromParcel(android.os.Parcel) -> createFromParcel
    android.support.v4.app.FragmentState[] newArray(int) -> newArray
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentStatePagerAdapter -> android.support.v4.app.FragmentStatePagerAdapter:
    java.lang.String TAG -> TAG
    boolean DEBUG -> DEBUG
    android.support.v4.app.FragmentManager mFragmentManager -> mFragmentManager
    android.support.v4.app.FragmentTransaction mCurTransaction -> mCurTransaction
    java.util.ArrayList mSavedState -> mSavedState
    java.util.ArrayList mFragments -> mFragments
    android.support.v4.app.Fragment mCurrentPrimaryItem -> mCurrentPrimaryItem
    android.support.v4.app.Fragment getItem(int) -> getItem
    void startUpdate(android.view.ViewGroup) -> startUpdate
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> instantiateItem
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> destroyItem
    void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object) -> setPrimaryItem
    void finishUpdate(android.view.ViewGroup) -> finishUpdate
    boolean isViewFromObject(android.view.View,java.lang.Object) -> isViewFromObject
    android.os.Parcelable saveState() -> saveState
    void restoreState(android.os.Parcelable,java.lang.ClassLoader) -> restoreState
android.support.v4.app.FragmentTabHost -> android.support.v4.app.FragmentTabHost:
    java.util.ArrayList mTabs -> mTabs
    android.widget.FrameLayout mRealTabContent -> mRealTabContent
    android.content.Context mContext -> mContext
    android.support.v4.app.FragmentManager mFragmentManager -> mFragmentManager
    int mContainerId -> mContainerId
    android.widget.TabHost$OnTabChangeListener mOnTabChangeListener -> mOnTabChangeListener
    android.support.v4.app.FragmentTabHost$TabInfo mLastTab -> mLastTab
    boolean mAttached -> mAttached
    void initFragmentTabHost(android.content.Context,android.util.AttributeSet) -> initFragmentTabHost
    void setup() -> setup
    void setup(android.content.Context,android.support.v4.app.FragmentManager) -> setup
    void setup(android.content.Context,android.support.v4.app.FragmentManager,int) -> setup
    void ensureContent() -> ensureContent
    void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener) -> setOnTabChangedListener
    void addTab(android.widget.TabHost$TabSpec,java.lang.Class,android.os.Bundle) -> addTab
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void onTabChanged(java.lang.String) -> onTabChanged
    android.support.v4.app.FragmentTransaction doTabChanged(java.lang.String,android.support.v4.app.FragmentTransaction) -> doTabChanged
android.support.v4.app.FragmentTabHost$1 -> android.support.v4.app.FragmentTabHost$1:
android.support.v4.app.FragmentTabHost$DummyTabFactory -> android.support.v4.app.FragmentTabHost$DummyTabFactory:
    android.content.Context mContext -> mContext
    android.view.View createTabContent(java.lang.String) -> createTabContent
android.support.v4.app.FragmentTabHost$SavedState -> android.support.v4.app.FragmentTabHost$SavedState:
    java.lang.String curTab -> curTab
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.app.FragmentTabHost$SavedState$1 -> android.support.v4.app.FragmentTabHost$SavedState$1:
    android.support.v4.app.FragmentTabHost$SavedState createFromParcel(android.os.Parcel) -> createFromParcel
    android.support.v4.app.FragmentTabHost$SavedState[] newArray(int) -> newArray
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost$TabInfo -> android.support.v4.app.FragmentTabHost$TabInfo:
    java.lang.String tag -> tag
    java.lang.Class clss -> clss
    android.os.Bundle args -> args
    android.support.v4.app.Fragment fragment -> fragment
    android.support.v4.app.Fragment access$102(android.support.v4.app.FragmentTabHost$TabInfo,android.support.v4.app.Fragment) -> access$102
    android.support.v4.app.Fragment access$100(android.support.v4.app.FragmentTabHost$TabInfo) -> access$100
    java.lang.String access$200(android.support.v4.app.FragmentTabHost$TabInfo) -> access$200
    java.lang.Class access$300(android.support.v4.app.FragmentTabHost$TabInfo) -> access$300
    android.os.Bundle access$400(android.support.v4.app.FragmentTabHost$TabInfo) -> access$400
android.support.v4.app.FragmentTransaction -> android.support.v4.app.FragmentTransaction:
    int TRANSIT_ENTER_MASK -> TRANSIT_ENTER_MASK
    int TRANSIT_EXIT_MASK -> TRANSIT_EXIT_MASK
    int TRANSIT_UNSET -> TRANSIT_UNSET
    int TRANSIT_NONE -> TRANSIT_NONE
    int TRANSIT_FRAGMENT_OPEN -> TRANSIT_FRAGMENT_OPEN
    int TRANSIT_FRAGMENT_CLOSE -> TRANSIT_FRAGMENT_CLOSE
    int TRANSIT_FRAGMENT_FADE -> TRANSIT_FRAGMENT_FADE
    android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String) -> add
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment) -> add
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> add
    android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment) -> replace
    android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String) -> replace
    android.support.v4.app.FragmentTransaction remove(android.support.v4.app.Fragment) -> remove
    android.support.v4.app.FragmentTransaction hide(android.support.v4.app.Fragment) -> hide
    android.support.v4.app.FragmentTransaction show(android.support.v4.app.Fragment) -> show
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> detach
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> attach
    boolean isEmpty() -> isEmpty
    android.support.v4.app.FragmentTransaction setCustomAnimations(int,int) -> setCustomAnimations
    android.support.v4.app.FragmentTransaction setCustomAnimations(int,int,int,int) -> setCustomAnimations
    android.support.v4.app.FragmentTransaction setTransition(int) -> setTransition
    android.support.v4.app.FragmentTransaction setTransitionStyle(int) -> setTransitionStyle
    android.support.v4.app.FragmentTransaction addToBackStack(java.lang.String) -> addToBackStack
    boolean isAddToBackStackAllowed() -> isAddToBackStackAllowed
    android.support.v4.app.FragmentTransaction disallowAddToBackStack() -> disallowAddToBackStack
    android.support.v4.app.FragmentTransaction setBreadCrumbTitle(int) -> setBreadCrumbTitle
    android.support.v4.app.FragmentTransaction setBreadCrumbTitle(java.lang.CharSequence) -> setBreadCrumbTitle
    android.support.v4.app.FragmentTransaction setBreadCrumbShortTitle(int) -> setBreadCrumbShortTitle
    android.support.v4.app.FragmentTransaction setBreadCrumbShortTitle(java.lang.CharSequence) -> setBreadCrumbShortTitle
    int commit() -> commit
    int commitAllowingStateLoss() -> commitAllowingStateLoss
android.support.v4.app.ListFragment -> android.support.v4.app.ListFragment:
    int INTERNAL_EMPTY_ID -> INTERNAL_EMPTY_ID
    int INTERNAL_PROGRESS_CONTAINER_ID -> INTERNAL_PROGRESS_CONTAINER_ID
    int INTERNAL_LIST_CONTAINER_ID -> INTERNAL_LIST_CONTAINER_ID
    android.os.Handler mHandler -> mHandler
    java.lang.Runnable mRequestFocus -> mRequestFocus
    android.widget.AdapterView$OnItemClickListener mOnClickListener -> mOnClickListener
    android.widget.ListAdapter mAdapter -> mAdapter
    android.widget.ListView mList -> mList
    android.view.View mEmptyView -> mEmptyView
    android.widget.TextView mStandardEmptyView -> mStandardEmptyView
    android.view.View mProgressContainer -> mProgressContainer
    android.view.View mListContainer -> mListContainer
    java.lang.CharSequence mEmptyText -> mEmptyText
    boolean mListShown -> mListShown
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> onCreateView
    void onViewCreated(android.view.View,android.os.Bundle) -> onViewCreated
    void onDestroyView() -> onDestroyView
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> onListItemClick
    void setListAdapter(android.widget.ListAdapter) -> setListAdapter
    void setSelection(int) -> setSelection
    int getSelectedItemPosition() -> getSelectedItemPosition
    long getSelectedItemId() -> getSelectedItemId
    android.widget.ListView getListView() -> getListView
    void setEmptyText(java.lang.CharSequence) -> setEmptyText
    void setListShown(boolean) -> setListShown
    void setListShownNoAnimation(boolean) -> setListShownNoAnimation
    void setListShown(boolean,boolean) -> setListShown
    android.widget.ListAdapter getListAdapter() -> getListAdapter
    void ensureList() -> ensureList
android.support.v4.app.ListFragment$1 -> android.support.v4.app.ListFragment$1:
    android.support.v4.app.ListFragment this$0 -> this$0
    void run() -> run
android.support.v4.app.ListFragment$2 -> android.support.v4.app.ListFragment$2:
    android.support.v4.app.ListFragment this$0 -> this$0
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
android.support.v4.app.LoaderManager -> android.support.v4.app.LoaderManager:
    android.support.v4.content.Loader initLoader(int,android.os.Bundle,android.support.v4.app.LoaderManager$LoaderCallbacks) -> initLoader
    android.support.v4.content.Loader restartLoader(int,android.os.Bundle,android.support.v4.app.LoaderManager$LoaderCallbacks) -> restartLoader
    void destroyLoader(int) -> destroyLoader
    android.support.v4.content.Loader getLoader(int) -> getLoader
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    void enableDebugLogging(boolean) -> enableDebugLogging
    boolean hasRunningLoaders() -> hasRunningLoaders
android.support.v4.app.LoaderManager$LoaderCallbacks -> android.support.v4.app.LoaderManager$LoaderCallbacks:
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> onCreateLoader
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> onLoadFinished
    void onLoaderReset(android.support.v4.content.Loader) -> onLoaderReset
android.support.v4.app.LoaderManagerImpl -> android.support.v4.app.LoaderManagerImpl:
    java.lang.String TAG -> TAG
    boolean DEBUG -> DEBUG
    android.support.v4.util.SparseArrayCompat mLoaders -> mLoaders
    android.support.v4.util.SparseArrayCompat mInactiveLoaders -> mInactiveLoaders
    java.lang.String mWho -> mWho
    android.support.v4.app.FragmentActivity mActivity -> mActivity
    boolean mStarted -> mStarted
    boolean mRetaining -> mRetaining
    boolean mRetainingStarted -> mRetainingStarted
    boolean mCreatingLoader -> mCreatingLoader
    void updateActivity(android.support.v4.app.FragmentActivity) -> updateActivity
    android.support.v4.app.LoaderManagerImpl$LoaderInfo createLoader(int,android.os.Bundle,android.support.v4.app.LoaderManager$LoaderCallbacks) -> createLoader
    android.support.v4.app.LoaderManagerImpl$LoaderInfo createAndInstallLoader(int,android.os.Bundle,android.support.v4.app.LoaderManager$LoaderCallbacks) -> createAndInstallLoader
    void installLoader(android.support.v4.app.LoaderManagerImpl$LoaderInfo) -> installLoader
    android.support.v4.content.Loader initLoader(int,android.os.Bundle,android.support.v4.app.LoaderManager$LoaderCallbacks) -> initLoader
    android.support.v4.content.Loader restartLoader(int,android.os.Bundle,android.support.v4.app.LoaderManager$LoaderCallbacks) -> restartLoader
    void destroyLoader(int) -> destroyLoader
    android.support.v4.content.Loader getLoader(int) -> getLoader
    void doStart() -> doStart
    void doStop() -> doStop
    void doRetain() -> doRetain
    void finishRetain() -> finishRetain
    void doReportNextStart() -> doReportNextStart
    void doReportStart() -> doReportStart
    void doDestroy() -> doDestroy
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    boolean hasRunningLoaders() -> hasRunningLoaders
android.support.v4.app.LoaderManagerImpl$LoaderInfo -> android.support.v4.app.LoaderManagerImpl$LoaderInfo:
    int mId -> mId
    android.os.Bundle mArgs -> mArgs
    android.support.v4.app.LoaderManager$LoaderCallbacks mCallbacks -> mCallbacks
    android.support.v4.content.Loader mLoader -> mLoader
    boolean mHaveData -> mHaveData
    boolean mDeliveredData -> mDeliveredData
    java.lang.Object mData -> mData
    boolean mStarted -> mStarted
    boolean mRetaining -> mRetaining
    boolean mRetainingStarted -> mRetainingStarted
    boolean mReportNextStart -> mReportNextStart
    boolean mDestroyed -> mDestroyed
    boolean mListenerRegistered -> mListenerRegistered
    android.support.v4.app.LoaderManagerImpl$LoaderInfo mPendingLoader -> mPendingLoader
    android.support.v4.app.LoaderManagerImpl this$0 -> this$0
    void start() -> start
    void retain() -> retain
    void finishRetain() -> finishRetain
    void reportStart() -> reportStart
    void stop() -> stop
    void destroy() -> destroy
    void onLoadComplete(android.support.v4.content.Loader,java.lang.Object) -> onLoadComplete
    void callOnLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> callOnLoadFinished
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
android.support.v4.app.NavUtils -> android.support.v4.app.NavUtils:
    java.lang.String TAG -> TAG
    java.lang.String PARENT_ACTIVITY -> PARENT_ACTIVITY
    android.support.v4.app.NavUtils$NavUtilsImpl IMPL -> IMPL
    boolean shouldUpRecreateTask(android.app.Activity,android.content.Intent) -> shouldUpRecreateTask
    void navigateUpFromSameTask(android.app.Activity) -> navigateUpFromSameTask
    void navigateUpTo(android.app.Activity,android.content.Intent) -> navigateUpTo
    android.content.Intent getParentActivityIntent(android.app.Activity) -> getParentActivityIntent
    android.content.Intent getParentActivityIntent(android.content.Context,java.lang.Class) -> getParentActivityIntent
    android.content.Intent getParentActivityIntent(android.content.Context,android.content.ComponentName) -> getParentActivityIntent
    java.lang.String getParentActivityName(android.app.Activity) -> getParentActivityName
    java.lang.String getParentActivityName(android.content.Context,android.content.ComponentName) -> getParentActivityName
android.support.v4.app.NavUtils$NavUtilsImpl -> android.support.v4.app.NavUtils$NavUtilsImpl:
    android.content.Intent getParentActivityIntent(android.app.Activity) -> getParentActivityIntent
    boolean shouldUpRecreateTask(android.app.Activity,android.content.Intent) -> shouldUpRecreateTask
    void navigateUpTo(android.app.Activity,android.content.Intent) -> navigateUpTo
    java.lang.String getParentActivityName(android.content.Context,android.content.pm.ActivityInfo) -> getParentActivityName
android.support.v4.app.NavUtils$NavUtilsImplBase -> android.support.v4.app.NavUtils$NavUtilsImplBase:
    android.content.Intent getParentActivityIntent(android.app.Activity) -> getParentActivityIntent
    boolean shouldUpRecreateTask(android.app.Activity,android.content.Intent) -> shouldUpRecreateTask
    void navigateUpTo(android.app.Activity,android.content.Intent) -> navigateUpTo
    java.lang.String getParentActivityName(android.content.Context,android.content.pm.ActivityInfo) -> getParentActivityName
android.support.v4.app.NavUtils$NavUtilsImplJB -> android.support.v4.app.NavUtils$NavUtilsImplJB:
    android.content.Intent getParentActivityIntent(android.app.Activity) -> getParentActivityIntent
    android.content.Intent superGetParentActivityIntent(android.app.Activity) -> superGetParentActivityIntent
    boolean shouldUpRecreateTask(android.app.Activity,android.content.Intent) -> shouldUpRecreateTask
    void navigateUpTo(android.app.Activity,android.content.Intent) -> navigateUpTo
    java.lang.String getParentActivityName(android.content.Context,android.content.pm.ActivityInfo) -> getParentActivityName
android.support.v4.app.NavUtilsJB -> android.support.v4.app.NavUtilsJB:
    android.content.Intent getParentActivityIntent(android.app.Activity) -> getParentActivityIntent
    boolean shouldUpRecreateTask(android.app.Activity,android.content.Intent) -> shouldUpRecreateTask
    void navigateUpTo(android.app.Activity,android.content.Intent) -> navigateUpTo
    java.lang.String getParentActivityName(android.content.pm.ActivityInfo) -> getParentActivityName
android.support.v4.app.NoSaveStateFrameLayout -> android.support.v4.app.NoSaveStateFrameLayout:
    android.view.ViewGroup wrap(android.view.View) -> wrap
    void dispatchSaveInstanceState(android.util.SparseArray) -> dispatchSaveInstanceState
    void dispatchRestoreInstanceState(android.util.SparseArray) -> dispatchRestoreInstanceState
android.support.v4.app.NotificationCompat -> android.support.v4.app.NotificationCompat:
    int FLAG_HIGH_PRIORITY -> FLAG_HIGH_PRIORITY
    int PRIORITY_DEFAULT -> PRIORITY_DEFAULT
    int PRIORITY_LOW -> PRIORITY_LOW
    int PRIORITY_MIN -> PRIORITY_MIN
    int PRIORITY_HIGH -> PRIORITY_HIGH
    int PRIORITY_MAX -> PRIORITY_MAX
    android.support.v4.app.NotificationCompat$NotificationCompatImpl IMPL -> IMPL
    android.support.v4.app.NotificationCompat$NotificationCompatImpl access$000() -> access$000
android.support.v4.app.NotificationCompat$Action -> android.support.v4.app.NotificationCompat$Action:
    int icon -> icon
    java.lang.CharSequence title -> title
    android.app.PendingIntent actionIntent -> actionIntent
android.support.v4.app.NotificationCompat$BigPictureStyle -> android.support.v4.app.NotificationCompat$BigPictureStyle:
    android.graphics.Bitmap mPicture -> mPicture
    android.support.v4.app.NotificationCompat$BigPictureStyle setBigContentTitle(java.lang.CharSequence) -> setBigContentTitle
    android.support.v4.app.NotificationCompat$BigPictureStyle setSummaryText(java.lang.CharSequence) -> setSummaryText
    android.support.v4.app.NotificationCompat$BigPictureStyle bigPicture(android.graphics.Bitmap) -> bigPicture
android.support.v4.app.NotificationCompat$BigTextStyle -> android.support.v4.app.NotificationCompat$BigTextStyle:
    java.lang.CharSequence mBigText -> mBigText
    android.support.v4.app.NotificationCompat$BigTextStyle setBigContentTitle(java.lang.CharSequence) -> setBigContentTitle
    android.support.v4.app.NotificationCompat$BigTextStyle setSummaryText(java.lang.CharSequence) -> setSummaryText
    android.support.v4.app.NotificationCompat$BigTextStyle bigText(java.lang.CharSequence) -> bigText
android.support.v4.app.NotificationCompat$Builder -> android.support.v4.app.NotificationCompat$Builder:
    android.content.Context mContext -> mContext
    java.lang.CharSequence mContentTitle -> mContentTitle
    java.lang.CharSequence mContentText -> mContentText
    android.app.PendingIntent mContentIntent -> mContentIntent
    android.app.PendingIntent mFullScreenIntent -> mFullScreenIntent
    android.widget.RemoteViews mTickerView -> mTickerView
    android.graphics.Bitmap mLargeIcon -> mLargeIcon
    java.lang.CharSequence mContentInfo -> mContentInfo
    int mNumber -> mNumber
    int mPriority -> mPriority
    boolean mUseChronometer -> mUseChronometer
    android.support.v4.app.NotificationCompat$Style mStyle -> mStyle
    java.lang.CharSequence mSubText -> mSubText
    int mProgressMax -> mProgressMax
    int mProgress -> mProgress
    boolean mProgressIndeterminate -> mProgressIndeterminate
    java.util.ArrayList mActions -> mActions
    android.app.Notification mNotification -> mNotification
    android.support.v4.app.NotificationCompat$Builder setWhen(long) -> setWhen
    android.support.v4.app.NotificationCompat$Builder setUsesChronometer(boolean) -> setUsesChronometer
    android.support.v4.app.NotificationCompat$Builder setSmallIcon(int) -> setSmallIcon
    android.support.v4.app.NotificationCompat$Builder setSmallIcon(int,int) -> setSmallIcon
    android.support.v4.app.NotificationCompat$Builder setContentTitle(java.lang.CharSequence) -> setContentTitle
    android.support.v4.app.NotificationCompat$Builder setContentText(java.lang.CharSequence) -> setContentText
    android.support.v4.app.NotificationCompat$Builder setSubText(java.lang.CharSequence) -> setSubText
    android.support.v4.app.NotificationCompat$Builder setNumber(int) -> setNumber
    android.support.v4.app.NotificationCompat$Builder setContentInfo(java.lang.CharSequence) -> setContentInfo
    android.support.v4.app.NotificationCompat$Builder setProgress(int,int,boolean) -> setProgress
    android.support.v4.app.NotificationCompat$Builder setContent(android.widget.RemoteViews) -> setContent
    android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent) -> setContentIntent
    android.support.v4.app.NotificationCompat$Builder setDeleteIntent(android.app.PendingIntent) -> setDeleteIntent
    android.support.v4.app.NotificationCompat$Builder setFullScreenIntent(android.app.PendingIntent,boolean) -> setFullScreenIntent
    android.support.v4.app.NotificationCompat$Builder setTicker(java.lang.CharSequence) -> setTicker
    android.support.v4.app.NotificationCompat$Builder setTicker(java.lang.CharSequence,android.widget.RemoteViews) -> setTicker
    android.support.v4.app.NotificationCompat$Builder setLargeIcon(android.graphics.Bitmap) -> setLargeIcon
    android.support.v4.app.NotificationCompat$Builder setSound(android.net.Uri) -> setSound
    android.support.v4.app.NotificationCompat$Builder setSound(android.net.Uri,int) -> setSound
    android.support.v4.app.NotificationCompat$Builder setVibrate(long[]) -> setVibrate
    android.support.v4.app.NotificationCompat$Builder setLights(int,int,int) -> setLights
    android.support.v4.app.NotificationCompat$Builder setOngoing(boolean) -> setOngoing
    android.support.v4.app.NotificationCompat$Builder setOnlyAlertOnce(boolean) -> setOnlyAlertOnce
    android.support.v4.app.NotificationCompat$Builder setAutoCancel(boolean) -> setAutoCancel
    android.support.v4.app.NotificationCompat$Builder setDefaults(int) -> setDefaults
    void setFlag(int,boolean) -> setFlag
    android.support.v4.app.NotificationCompat$Builder setPriority(int) -> setPriority
    android.support.v4.app.NotificationCompat$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent) -> addAction
    android.support.v4.app.NotificationCompat$Builder setStyle(android.support.v4.app.NotificationCompat$Style) -> setStyle
    android.app.Notification getNotification() -> getNotification
    android.app.Notification build() -> build
android.support.v4.app.NotificationCompat$InboxStyle -> android.support.v4.app.NotificationCompat$InboxStyle:
    java.util.ArrayList mTexts -> mTexts
    android.support.v4.app.NotificationCompat$InboxStyle setBigContentTitle(java.lang.CharSequence) -> setBigContentTitle
    android.support.v4.app.NotificationCompat$InboxStyle setSummaryText(java.lang.CharSequence) -> setSummaryText
    android.support.v4.app.NotificationCompat$InboxStyle addLine(java.lang.CharSequence) -> addLine
android.support.v4.app.NotificationCompat$NotificationCompatImpl -> android.support.v4.app.NotificationCompat$NotificationCompatImpl:
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder) -> build
android.support.v4.app.NotificationCompat$NotificationCompatImplBase -> android.support.v4.app.NotificationCompat$NotificationCompatImplBase:
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder) -> build
android.support.v4.app.NotificationCompat$NotificationCompatImplHoneycomb -> android.support.v4.app.NotificationCompat$NotificationCompatImplHoneycomb:
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder) -> build
android.support.v4.app.NotificationCompat$NotificationCompatImplIceCreamSandwich -> android.support.v4.app.NotificationCompat$NotificationCompatImplIceCreamSandwich:
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder) -> build
android.support.v4.app.NotificationCompat$NotificationCompatImplJellybean -> android.support.v4.app.NotificationCompat$NotificationCompatImplJellybean:
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder) -> build
android.support.v4.app.NotificationCompat$Style -> android.support.v4.app.NotificationCompat$Style:
    android.support.v4.app.NotificationCompat$Builder mBuilder -> mBuilder
    java.lang.CharSequence mBigContentTitle -> mBigContentTitle
    java.lang.CharSequence mSummaryText -> mSummaryText
    boolean mSummaryTextSet -> mSummaryTextSet
    void setBuilder(android.support.v4.app.NotificationCompat$Builder) -> setBuilder
    android.app.Notification build() -> build
android.support.v4.app.NotificationCompatHoneycomb -> android.support.v4.app.NotificationCompatHoneycomb:
    android.app.Notification add(android.content.Context,android.app.Notification,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,android.widget.RemoteViews,int,android.app.PendingIntent,android.app.PendingIntent,android.graphics.Bitmap) -> add
android.support.v4.app.NotificationCompatIceCreamSandwich -> android.support.v4.app.NotificationCompatIceCreamSandwich:
    android.app.Notification add(android.content.Context,android.app.Notification,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,android.widget.RemoteViews,int,android.app.PendingIntent,android.app.PendingIntent,android.graphics.Bitmap,int,int,boolean) -> add
android.support.v4.app.NotificationCompatJellybean -> android.support.v4.app.NotificationCompatJellybean:
    android.app.Notification$Builder b -> b
    void addAction(int,java.lang.CharSequence,android.app.PendingIntent) -> addAction
    void addBigTextStyle(java.lang.CharSequence,boolean,java.lang.CharSequence,java.lang.CharSequence) -> addBigTextStyle
    void addBigPictureStyle(java.lang.CharSequence,boolean,java.lang.CharSequence,android.graphics.Bitmap) -> addBigPictureStyle
    void addInboxStyle(java.lang.CharSequence,boolean,java.lang.CharSequence,java.util.ArrayList) -> addInboxStyle
    android.app.Notification build() -> build
android.support.v4.app.ServiceCompat -> android.support.v4.app.ServiceCompat:
    int START_STICKY -> START_STICKY
android.support.v4.app.ShareCompat -> android.support.v4.app.ShareCompat:
    java.lang.String EXTRA_CALLING_PACKAGE -> EXTRA_CALLING_PACKAGE
    java.lang.String EXTRA_CALLING_ACTIVITY -> EXTRA_CALLING_ACTIVITY
    android.support.v4.app.ShareCompat$ShareCompatImpl IMPL -> IMPL
    java.lang.String getCallingPackage(android.app.Activity) -> getCallingPackage
    android.content.ComponentName getCallingActivity(android.app.Activity) -> getCallingActivity
    void configureMenuItem(android.view.MenuItem,android.support.v4.app.ShareCompat$IntentBuilder) -> configureMenuItem
    void configureMenuItem(android.view.Menu,int,android.support.v4.app.ShareCompat$IntentBuilder) -> configureMenuItem
    android.support.v4.app.ShareCompat$ShareCompatImpl access$000() -> access$000
android.support.v4.app.ShareCompat$IntentBuilder -> android.support.v4.app.ShareCompat$IntentBuilder:
    android.app.Activity mActivity -> mActivity
    android.content.Intent mIntent -> mIntent
    java.lang.CharSequence mChooserTitle -> mChooserTitle
    java.util.ArrayList mToAddresses -> mToAddresses
    java.util.ArrayList mCcAddresses -> mCcAddresses
    java.util.ArrayList mBccAddresses -> mBccAddresses
    java.util.ArrayList mStreams -> mStreams
    android.support.v4.app.ShareCompat$IntentBuilder from(android.app.Activity) -> from
    android.content.Intent getIntent() -> getIntent
    android.app.Activity getActivity() -> getActivity
    void combineArrayExtra(java.lang.String,java.util.ArrayList) -> combineArrayExtra
    void combineArrayExtra(java.lang.String,java.lang.String[]) -> combineArrayExtra
    android.content.Intent createChooserIntent() -> createChooserIntent
    void startChooser() -> startChooser
    android.support.v4.app.ShareCompat$IntentBuilder setChooserTitle(java.lang.CharSequence) -> setChooserTitle
    android.support.v4.app.ShareCompat$IntentBuilder setChooserTitle(int) -> setChooserTitle
    android.support.v4.app.ShareCompat$IntentBuilder setType(java.lang.String) -> setType
    android.support.v4.app.ShareCompat$IntentBuilder setText(java.lang.CharSequence) -> setText
    android.support.v4.app.ShareCompat$IntentBuilder setHtmlText(java.lang.String) -> setHtmlText
    android.support.v4.app.ShareCompat$IntentBuilder setStream(android.net.Uri) -> setStream
    android.support.v4.app.ShareCompat$IntentBuilder addStream(android.net.Uri) -> addStream
    android.support.v4.app.ShareCompat$IntentBuilder setEmailTo(java.lang.String[]) -> setEmailTo
    android.support.v4.app.ShareCompat$IntentBuilder addEmailTo(java.lang.String) -> addEmailTo
    android.support.v4.app.ShareCompat$IntentBuilder addEmailTo(java.lang.String[]) -> addEmailTo
    android.support.v4.app.ShareCompat$IntentBuilder setEmailCc(java.lang.String[]) -> setEmailCc
    android.support.v4.app.ShareCompat$IntentBuilder addEmailCc(java.lang.String) -> addEmailCc
    android.support.v4.app.ShareCompat$IntentBuilder addEmailCc(java.lang.String[]) -> addEmailCc
    android.support.v4.app.ShareCompat$IntentBuilder setEmailBcc(java.lang.String[]) -> setEmailBcc
    android.support.v4.app.ShareCompat$IntentBuilder addEmailBcc(java.lang.String) -> addEmailBcc
    android.support.v4.app.ShareCompat$IntentBuilder addEmailBcc(java.lang.String[]) -> addEmailBcc
    android.support.v4.app.ShareCompat$IntentBuilder setSubject(java.lang.String) -> setSubject
android.support.v4.app.ShareCompat$IntentReader -> android.support.v4.app.ShareCompat$IntentReader:
    java.lang.String TAG -> TAG
    android.app.Activity mActivity -> mActivity
    android.content.Intent mIntent -> mIntent
    java.lang.String mCallingPackage -> mCallingPackage
    android.content.ComponentName mCallingActivity -> mCallingActivity
    java.util.ArrayList mStreams -> mStreams
    android.support.v4.app.ShareCompat$IntentReader from(android.app.Activity) -> from
    boolean isShareIntent() -> isShareIntent
    boolean isSingleShare() -> isSingleShare
    boolean isMultipleShare() -> isMultipleShare
    java.lang.String getType() -> getType
    java.lang.CharSequence getText() -> getText
    java.lang.String getHtmlText() -> getHtmlText
    android.net.Uri getStream() -> getStream
    android.net.Uri getStream(int) -> getStream
    int getStreamCount() -> getStreamCount
    java.lang.String[] getEmailTo() -> getEmailTo
    java.lang.String[] getEmailCc() -> getEmailCc
    java.lang.String[] getEmailBcc() -> getEmailBcc
    java.lang.String getSubject() -> getSubject
    java.lang.String getCallingPackage() -> getCallingPackage
    android.content.ComponentName getCallingActivity() -> getCallingActivity
    android.graphics.drawable.Drawable getCallingActivityIcon() -> getCallingActivityIcon
    android.graphics.drawable.Drawable getCallingApplicationIcon() -> getCallingApplicationIcon
    java.lang.CharSequence getCallingApplicationLabel() -> getCallingApplicationLabel
android.support.v4.app.ShareCompat$ShareCompatImpl -> android.support.v4.app.ShareCompat$ShareCompatImpl:
    void configureMenuItem(android.view.MenuItem,android.support.v4.app.ShareCompat$IntentBuilder) -> configureMenuItem
    java.lang.String escapeHtml(java.lang.CharSequence) -> escapeHtml
android.support.v4.app.ShareCompat$ShareCompatImplBase -> android.support.v4.app.ShareCompat$ShareCompatImplBase:
    void configureMenuItem(android.view.MenuItem,android.support.v4.app.ShareCompat$IntentBuilder) -> configureMenuItem
    java.lang.String escapeHtml(java.lang.CharSequence) -> escapeHtml
    void withinStyle(java.lang.StringBuilder,java.lang.CharSequence,int,int) -> withinStyle
android.support.v4.app.ShareCompat$ShareCompatImplICS -> android.support.v4.app.ShareCompat$ShareCompatImplICS:
    void configureMenuItem(android.view.MenuItem,android.support.v4.app.ShareCompat$IntentBuilder) -> configureMenuItem
    boolean shouldAddChooserIntent(android.view.MenuItem) -> shouldAddChooserIntent
android.support.v4.app.ShareCompat$ShareCompatImplJB -> android.support.v4.app.ShareCompat$ShareCompatImplJB:
    java.lang.String escapeHtml(java.lang.CharSequence) -> escapeHtml
    boolean shouldAddChooserIntent(android.view.MenuItem) -> shouldAddChooserIntent
android.support.v4.app.ShareCompatICS -> android.support.v4.app.ShareCompatICS:
    java.lang.String HISTORY_FILENAME_PREFIX -> HISTORY_FILENAME_PREFIX
    void configureMenuItem(android.view.MenuItem,android.app.Activity,android.content.Intent) -> configureMenuItem
android.support.v4.app.ShareCompatJB -> android.support.v4.app.ShareCompatJB:
    java.lang.String escapeHtml(java.lang.CharSequence) -> escapeHtml
android.support.v4.app.SuperNotCalledException -> android.support.v4.app.SuperNotCalledException:
android.support.v4.app.TaskStackBuilder -> android.support.v4.app.TaskStackBuilder:
    java.lang.String TAG -> TAG
    android.support.v4.app.TaskStackBuilder$TaskStackBuilderImpl IMPL -> IMPL
    java.util.ArrayList mIntents -> mIntents
    android.content.Context mSourceContext -> mSourceContext
    android.support.v4.app.TaskStackBuilder create(android.content.Context) -> create
    android.support.v4.app.TaskStackBuilder from(android.content.Context) -> from
    android.support.v4.app.TaskStackBuilder addNextIntent(android.content.Intent) -> addNextIntent
    android.support.v4.app.TaskStackBuilder addNextIntentWithParentStack(android.content.Intent) -> addNextIntentWithParentStack
    android.support.v4.app.TaskStackBuilder addParentStack(android.app.Activity) -> addParentStack
    android.support.v4.app.TaskStackBuilder addParentStack(java.lang.Class) -> addParentStack
    android.support.v4.app.TaskStackBuilder addParentStack(android.content.ComponentName) -> addParentStack
    int getIntentCount() -> getIntentCount
    android.content.Intent getIntent(int) -> getIntent
    android.content.Intent editIntentAt(int) -> editIntentAt
    java.util.Iterator iterator() -> iterator
    void startActivities() -> startActivities
    void startActivities(android.os.Bundle) -> startActivities
    android.app.PendingIntent getPendingIntent(int,int) -> getPendingIntent
    android.app.PendingIntent getPendingIntent(int,int,android.os.Bundle) -> getPendingIntent
    android.content.Intent[] getIntents() -> getIntents
android.support.v4.app.TaskStackBuilder$TaskStackBuilderImpl -> android.support.v4.app.TaskStackBuilder$TaskStackBuilderImpl:
    android.app.PendingIntent getPendingIntent(android.content.Context,android.content.Intent[],int,int,android.os.Bundle) -> getPendingIntent
android.support.v4.app.TaskStackBuilder$TaskStackBuilderImplBase -> android.support.v4.app.TaskStackBuilder$TaskStackBuilderImplBase:
    android.app.PendingIntent getPendingIntent(android.content.Context,android.content.Intent[],int,int,android.os.Bundle) -> getPendingIntent
android.support.v4.app.TaskStackBuilder$TaskStackBuilderImplHoneycomb -> android.support.v4.app.TaskStackBuilder$TaskStackBuilderImplHoneycomb:
    android.app.PendingIntent getPendingIntent(android.content.Context,android.content.Intent[],int,int,android.os.Bundle) -> getPendingIntent
android.support.v4.app.TaskStackBuilder$TaskStackBuilderImplJellybean -> android.support.v4.app.TaskStackBuilder$TaskStackBuilderImplJellybean:
    android.app.PendingIntent getPendingIntent(android.content.Context,android.content.Intent[],int,int,android.os.Bundle) -> getPendingIntent
android.support.v4.app.TaskStackBuilderHoneycomb -> android.support.v4.app.TaskStackBuilderHoneycomb:
    android.app.PendingIntent getActivitiesPendingIntent(android.content.Context,int,android.content.Intent[],int) -> getActivitiesPendingIntent
android.support.v4.app.TaskStackBuilderJellybean -> android.support.v4.app.TaskStackBuilderJellybean:
    android.app.PendingIntent getActivitiesPendingIntent(android.content.Context,int,android.content.Intent[],int,android.os.Bundle) -> getActivitiesPendingIntent
android.support.v4.content.ContextCompat -> android.support.v4.a.a:
    boolean startActivities(android.content.Context,android.content.Intent[]) -> startActivities
    boolean startActivities(android.content.Context,android.content.Intent[],android.os.Bundle) -> startActivities
android.support.v4.content.ContextCompatHoneycomb -> android.support.v4.a.b:
    void startActivities(android.content.Context,android.content.Intent[]) -> a
android.support.v4.content.ContextCompatJellybean -> android.support.v4.a.c:
    void startActivities(android.content.Context,android.content.Intent[],android.os.Bundle) -> a
android.support.v4.content.IntentCompat -> android.support.v4.a.d:
    android.support.v4.content.IntentCompat$IntentCompatImpl IMPL -> a
    android.content.Intent makeMainActivity(android.content.ComponentName) -> a
android.support.v4.content.IntentCompat$IntentCompatImpl -> android.support.v4.a.e:
    android.content.Intent makeMainActivity(android.content.ComponentName) -> a
android.support.v4.content.IntentCompat$IntentCompatImplBase -> android.support.v4.a.f:
    android.content.Intent makeMainActivity(android.content.ComponentName) -> a
android.support.v4.content.IntentCompat$IntentCompatImplHC -> android.support.v4.a.g:
    android.content.Intent makeMainActivity(android.content.ComponentName) -> a
android.support.v4.content.IntentCompat$IntentCompatImplIcsMr1 -> android.support.v4.a.h:
android.support.v4.content.IntentCompatHoneycomb -> android.support.v4.a.i:
    android.content.Intent makeMainActivity(android.content.ComponentName) -> a
android.support.v4.content.Loader -> android.support.v4.a.j:
    int mId -> a
    android.support.v4.content.Loader$OnLoadCompleteListener mListener -> b
    boolean mStarted -> c
    boolean mAbandoned -> d
    boolean mReset -> e
    boolean mContentChanged -> f
    void registerListener(int,android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void unregisterListener(android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void startLoading() -> a
    void onStartLoading() -> b
    void stopLoading() -> c
    void onStopLoading() -> d
    void abandon() -> e
    void onAbandon() -> f
    void reset() -> g
    void onReset() -> h
    java.lang.String dataToString(java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.content.Loader$OnLoadCompleteListener -> android.support.v4.a.k:
android.support.v4.os.ParcelableCompat -> android.support.v4.b.a:
    android.os.Parcelable$Creator newCreator(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.os.ParcelableCompat$CompatCreator -> android.support.v4.b.b:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorCallbacks -> android.support.v4.b.c:
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
    java.lang.Object[] newArray(int) -> a
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2 -> android.support.v4.b.d:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2Stub -> android.support.v4.b.e:
    android.os.Parcelable$Creator instantiate(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.util.DebugUtils -> android.support.v4.c.a:
    void buildShortClassTag(java.lang.Object,java.lang.StringBuilder) -> a
android.support.v4.util.LogWriter -> android.support.v4.c.b:
    java.lang.String mTag -> a
    java.lang.StringBuilder mBuilder -> b
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> a
android.support.v4.util.SparseArrayCompat -> android.support.v4.c.c:
    java.lang.Object DELETED -> a
    boolean mGarbage -> b
    int[] mKeys -> c
    java.lang.Object[] mValues -> d
    int mSize -> e
    java.lang.Object get(int) -> a
    java.lang.Object get(int,java.lang.Object) -> a
    void delete(int) -> b
    void remove(int) -> c
    void removeAt(int) -> d
    void gc() -> c
    void put(int,java.lang.Object) -> b
    int size() -> a
    int keyAt(int) -> e
    java.lang.Object valueAt(int) -> f
    int indexOfKey(int) -> g
    void clear() -> b
    int binarySearch(int[],int,int,int) -> a
    int idealByteArraySize(int) -> h
    int idealIntArraySize(int) -> i
android.support.v4.view.AccessibilityDelegateCompat -> android.support.v4.view.a:
    android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateImpl IMPL -> b
    java.lang.Object DEFAULT_DELEGATE -> c
    java.lang.Object mBridge -> a
    java.lang.Object getBridge() -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View) -> a
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl -> android.support.v4.view.b:
    java.lang.Object newAccessiblityDelegateDefaultImpl() -> a
    java.lang.Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat) -> a
    boolean dispatchPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(java.lang.Object,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    void onPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(java.lang.Object,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(java.lang.Object,android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> d
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl$1 -> android.support.v4.view.b$1:
    android.support.v4.view.AccessibilityDelegateCompat val$compat -> a
    android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl this$0 -> b
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateImpl -> android.support.v4.view.c:
    java.lang.Object newAccessiblityDelegateDefaultImpl() -> a
    java.lang.Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat) -> a
    boolean dispatchPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(java.lang.Object,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    void onPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(java.lang.Object,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(java.lang.Object,android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(java.lang.Object,android.view.View) -> a
    boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl -> android.support.v4.view.d:
    java.lang.Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat) -> a
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(java.lang.Object,android.view.View) -> a
    boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl$1 -> android.support.v4.view.d$1:
    android.support.v4.view.AccessibilityDelegateCompat val$compat -> a
    android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl this$0 -> b
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    java.lang.Object getAccessibilityNodeProvider(android.view.View) -> a
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateStubImpl -> android.support.v4.view.e:
    java.lang.Object newAccessiblityDelegateDefaultImpl() -> a
    java.lang.Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat) -> a
    boolean dispatchPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(java.lang.Object,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    void onPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(java.lang.Object,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(java.lang.Object,android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(java.lang.Object,android.view.View) -> a
    boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompatIcs -> android.support.v4.view.f:
    java.lang.Object newAccessibilityDelegateDefaultImpl() -> a
    java.lang.Object newAccessibilityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompatIcs$AccessibilityDelegateBridge) -> a
    boolean dispatchPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(java.lang.Object,android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(java.lang.Object,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(java.lang.Object,android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> d
android.support.v4.view.AccessibilityDelegateCompatIcs$1 -> android.support.v4.view.f$1:
    android.support.v4.view.AccessibilityDelegateCompatIcs$AccessibilityDelegateBridge val$bridge -> a
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo) -> onInitializeAccessibilityNodeInfo
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onPopulateAccessibilityEvent
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
    void sendAccessibilityEvent(android.view.View,int) -> sendAccessibilityEvent
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> sendAccessibilityEventUnchecked
android.support.v4.view.AccessibilityDelegateCompatIcs$AccessibilityDelegateBridge -> android.support.v4.view.g:
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
android.support.v4.view.AccessibilityDelegateCompatJellyBean -> android.support.v4.view.h:
    java.lang.Object newAccessibilityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompatJellyBean$AccessibilityDelegateBridgeJellyBean) -> a
    java.lang.Object getAccessibilityNodeProvider(java.lang.Object,android.view.View) -> a
    boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompatJellyBean$1 -> android.support.v4.view.h$1:
    android.support.v4.view.AccessibilityDelegateCompatJellyBean$AccessibilityDelegateBridgeJellyBean val$bridge -> a
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo) -> onInitializeAccessibilityNodeInfo
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onPopulateAccessibilityEvent
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
    void sendAccessibilityEvent(android.view.View,int) -> sendAccessibilityEvent
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> sendAccessibilityEventUnchecked
    android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider(android.view.View) -> getAccessibilityNodeProvider
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> performAccessibilityAction
android.support.v4.view.AccessibilityDelegateCompatJellyBean$AccessibilityDelegateBridgeJellyBean -> android.support.v4.view.i:
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    java.lang.Object getAccessibilityNodeProvider(android.view.View) -> a
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.KeyEventCompat -> android.support.v4.view.j:
    android.support.v4.view.KeyEventCompat$KeyEventVersionImpl IMPL -> a
    boolean hasModifiers(android.view.KeyEvent,int) -> a
    boolean hasNoModifiers(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$BaseKeyEventVersionImpl -> android.support.v4.view.k:
    int metaStateFilterDirectionalModifiers(int,int,int,int,int) -> a
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompat$HoneycombKeyEventVersionImpl -> android.support.v4.view.l:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompat$KeyEventVersionImpl -> android.support.v4.view.m:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompatHoneycomb -> android.support.v4.view.n:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> a
android.support.v4.view.MotionEventCompat -> android.support.v4.view.o:
    android.support.v4.view.MotionEventCompat$MotionEventVersionImpl IMPL -> a
    int getActionIndex(android.view.MotionEvent) -> a
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl -> android.support.v4.view.p:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl -> android.support.v4.view.q:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat$MotionEventVersionImpl -> android.support.v4.view.r:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompatEclair -> android.support.v4.view.s:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.PagerAdapter -> android.support.v4.view.t:
    android.database.DataSetObservable mObservable -> mObservable
    int POSITION_UNCHANGED -> POSITION_UNCHANGED
    int POSITION_NONE -> POSITION_NONE
    int getCount() -> getCount
    void startUpdate(android.view.ViewGroup) -> startUpdate
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> instantiateItem
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> destroyItem
    void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object) -> setPrimaryItem
    void finishUpdate(android.view.ViewGroup) -> finishUpdate
    void startUpdate(android.view.View) -> startUpdate
    java.lang.Object instantiateItem(android.view.View,int) -> instantiateItem
    void destroyItem(android.view.View,int,java.lang.Object) -> destroyItem
    void setPrimaryItem(android.view.View,int,java.lang.Object) -> setPrimaryItem
    void finishUpdate(android.view.View) -> finishUpdate
    boolean isViewFromObject(android.view.View,java.lang.Object) -> isViewFromObject
    android.os.Parcelable saveState() -> saveState
    void restoreState(android.os.Parcelable,java.lang.ClassLoader) -> restoreState
    int getItemPosition(java.lang.Object) -> getItemPosition
    void notifyDataSetChanged() -> notifyDataSetChanged
    void registerDataSetObserver(android.database.DataSetObserver) -> registerDataSetObserver
    void unregisterDataSetObserver(android.database.DataSetObserver) -> unregisterDataSetObserver
    java.lang.CharSequence getPageTitle(int) -> getPageTitle
    float getPageWidth(int) -> getPageWidth
android.support.v4.view.PagerTabStrip -> android.support.v4.view.PagerTabStrip:
    int mIndicatorColor -> f
    int mIndicatorHeight -> g
    int mMinPaddingBottom -> h
    int mMinTextSpacing -> i
    int mMinStripHeight -> j
    int mTabPadding -> k
    android.graphics.Paint mTabPaint -> l
    android.graphics.Rect mTempRect -> m
    int mTabAlpha -> n
    boolean mDrawFullUnderline -> o
    boolean mDrawFullUnderlineSet -> p
    int mFullUnderlineHeight -> q
    boolean mIgnoreTap -> r
    float mInitialMotionX -> s
    float mInitialMotionY -> t
    int mTouchSlop -> u
    void setTabIndicatorColor(int) -> setTabIndicatorColor
    void setTabIndicatorColorResource(int) -> setTabIndicatorColorResource
    void setPadding(int,int,int,int) -> setPadding
    void setTextSpacing(int) -> setTextSpacing
    void setBackgroundDrawable(android.graphics.drawable.Drawable) -> setBackgroundDrawable
    void setBackgroundColor(int) -> setBackgroundColor
    void setBackgroundResource(int) -> setBackgroundResource
    void setDrawFullUnderline(boolean) -> setDrawFullUnderline
    int getMinHeight() -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void onDraw(android.graphics.Canvas) -> onDraw
    void updateTextPositions(int,float,boolean) -> a
android.support.v4.view.PagerTabStrip$1 -> android.support.v4.view.PagerTabStrip$1:
    android.support.v4.view.PagerTabStrip this$0 -> a
    void onClick(android.view.View) -> onClick
android.support.v4.view.PagerTabStrip$2 -> android.support.v4.view.PagerTabStrip$2:
    android.support.v4.view.PagerTabStrip this$0 -> a
    void onClick(android.view.View) -> onClick
android.support.v4.view.PagerTitleStrip -> android.support.v4.view.PagerTitleStrip:
    android.support.v4.view.ViewPager mPager -> a
    android.widget.TextView mPrevText -> b
    android.widget.TextView mCurrText -> c
    android.widget.TextView mNextText -> d
    int mLastKnownCurrentPage -> f
    float mLastKnownPositionOffset -> g
    int mScaledTextSpacing -> h
    int mGravity -> i
    boolean mUpdatingText -> j
    boolean mUpdatingPositions -> k
    android.support.v4.view.PagerTitleStrip$PageListener mPageListener -> l
    java.lang.ref.WeakReference mWatchingAdapter -> m
    int[] ATTRS -> n
    int[] TEXT_ATTRS -> o
    int mNonPrimaryAlpha -> p
    int mTextColor -> e
    android.support.v4.view.PagerTitleStrip$PagerTitleStripImpl IMPL -> q
    void setSingleLineAllCaps(android.widget.TextView) -> a
    void setTextSpacing(int) -> setTextSpacing
    int getTextSpacing() -> b
    void setNonPrimaryAlpha(float) -> setNonPrimaryAlpha
    void setTextColor(int) -> setTextColor
    void setTextSize(int,float) -> setTextSize
    void setGravity(int) -> setGravity
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void updateText(int,android.support.v4.view.PagerAdapter) -> a
    void requestLayout() -> requestLayout
    void updateAdapter(android.support.v4.view.PagerAdapter,android.support.v4.view.PagerAdapter) -> a
    void updateTextPositions(int,float,boolean) -> a
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    int getMinHeight() -> a
    float access$100(android.support.v4.view.PagerTitleStrip) -> a
android.support.v4.view.PagerTitleStrip$1 -> android.support.v4.view.PagerTitleStrip$1:
android.support.v4.view.PagerTitleStrip$PageListener -> android.support.v4.view.u:
    int mScrollState -> b
    android.support.v4.view.PagerTitleStrip this$0 -> a
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> a
    void onPageScrollStateChanged(int) -> b
    void onAdapterChanged(android.support.v4.view.PagerAdapter,android.support.v4.view.PagerAdapter) -> a
    void onChanged() -> onChanged
android.support.v4.view.PagerTitleStrip$PagerTitleStripImpl -> android.support.v4.view.v:
    void setSingleLineAllCaps(android.widget.TextView) -> a
android.support.v4.view.PagerTitleStrip$PagerTitleStripImplBase -> android.support.v4.view.w:
    void setSingleLineAllCaps(android.widget.TextView) -> a
android.support.v4.view.PagerTitleStrip$PagerTitleStripImplIcs -> android.support.v4.view.x:
    void setSingleLineAllCaps(android.widget.TextView) -> a
android.support.v4.view.PagerTitleStripIcs -> android.support.v4.view.y:
    void setSingleLineAllCaps(android.widget.TextView) -> a
android.support.v4.view.PagerTitleStripIcs$SingleLineAllCapsTransform -> android.support.v4.view.z:
    java.util.Locale mLocale -> a
    java.lang.CharSequence getTransformation(java.lang.CharSequence,android.view.View) -> getTransformation
android.support.v4.view.VelocityTrackerCompat -> android.support.v4.view.A:
    android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl IMPL -> a
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl -> android.support.v4.view.B:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl -> android.support.v4.view.C:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl -> android.support.v4.view.D:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompatHoneycomb -> android.support.v4.view.E:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.ViewCompat -> android.support.v4.view.F:
    android.support.v4.view.ViewCompat$ViewCompatImpl IMPL -> a
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    int getImportantForAccessibility(android.view.View) -> c
    void setImportantForAccessibility(android.view.View,int) -> b
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
android.support.v4.view.ViewCompat$BaseViewCompatImpl -> android.support.v4.view.G:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    long getFrameTime() -> a
    int getImportantForAccessibility(android.view.View) -> c
    void setImportantForAccessibility(android.view.View,int) -> b
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
android.support.v4.view.ViewCompat$GBViewCompatImpl -> android.support.v4.view.H:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompat$HCViewCompatImpl -> android.support.v4.view.I:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
android.support.v4.view.ViewCompat$ICSViewCompatImpl -> android.support.v4.view.J:
    boolean canScrollHorizontally(android.view.View,int) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
android.support.v4.view.ViewCompat$JBViewCompatImpl -> android.support.v4.view.K:
    void postInvalidateOnAnimation(android.view.View) -> b
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    int getImportantForAccessibility(android.view.View) -> c
    void setImportantForAccessibility(android.view.View,int) -> b
android.support.v4.view.ViewCompat$JbMr1ViewCompatImpl -> android.support.v4.view.L:
android.support.v4.view.ViewCompat$ViewCompatImpl -> android.support.v4.view.M:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    int getImportantForAccessibility(android.view.View) -> c
    void setImportantForAccessibility(android.view.View,int) -> b
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
android.support.v4.view.ViewCompatGingerbread -> android.support.v4.view.N:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompatHC -> android.support.v4.view.O:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
android.support.v4.view.ViewCompatICS -> android.support.v4.view.P:
    boolean canScrollHorizontally(android.view.View,int) -> a
    void setAccessibilityDelegate(android.view.View,java.lang.Object) -> a
android.support.v4.view.ViewCompatJB -> android.support.v4.view.Q:
    void postInvalidateOnAnimation(android.view.View) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    int getImportantForAccessibility(android.view.View) -> b
    void setImportantForAccessibility(android.view.View,int) -> a
android.support.v4.view.ViewConfigurationCompat -> android.support.v4.view.R:
    android.support.v4.view.ViewConfigurationCompat$ViewConfigurationVersionImpl IMPL -> a
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompat$BaseViewConfigurationVersionImpl -> android.support.v4.view.S:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompat$FroyoViewConfigurationVersionImpl -> android.support.v4.view.T:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompat$ViewConfigurationVersionImpl -> android.support.v4.view.U:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompatFroyo -> android.support.v4.view.V:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewPager -> android.support.v4.view.ViewPager:
    int[] LAYOUT_ATTRS -> a
    java.util.Comparator COMPARATOR -> b
    android.view.animation.Interpolator sInterpolator -> c
    java.util.ArrayList mItems -> d
    android.support.v4.view.ViewPager$ItemInfo mTempItem -> e
    android.graphics.Rect mTempRect -> f
    android.support.v4.view.PagerAdapter mAdapter -> g
    int mCurItem -> h
    int mRestoredCurItem -> i
    android.os.Parcelable mRestoredAdapterState -> j
    java.lang.ClassLoader mRestoredClassLoader -> k
    android.widget.Scroller mScroller -> l
    android.support.v4.view.ViewPager$PagerObserver mObserver -> m
    int mPageMargin -> n
    android.graphics.drawable.Drawable mMarginDrawable -> o
    int mTopPageBounds -> p
    int mBottomPageBounds -> q
    float mFirstOffset -> r
    float mLastOffset -> s
    int mChildWidthMeasureSpec -> t
    int mChildHeightMeasureSpec -> u
    boolean mInLayout -> v
    boolean mScrollingCacheEnabled -> w
    boolean mPopulatePending -> x
    int mOffscreenPageLimit -> y
    boolean mIsBeingDragged -> z
    boolean mIsUnableToDrag -> A
    int mDefaultGutterSize -> B
    int mGutterSize -> C
    int mTouchSlop -> D
    float mInitialMotionX -> E
    float mLastMotionX -> F
    float mLastMotionY -> G
    int mActivePointerId -> H
    android.view.VelocityTracker mVelocityTracker -> I
    int mMinimumVelocity -> J
    int mMaximumVelocity -> K
    int mFlingDistance -> L
    int mCloseEnough -> M
    int mSeenPositionMin -> N
    int mSeenPositionMax -> O
    boolean mFakeDragging -> P
    android.support.v4.widget.EdgeEffectCompat mLeftEdge -> Q
    android.support.v4.widget.EdgeEffectCompat mRightEdge -> R
    boolean mFirstLayout -> S
    boolean mNeedCalculatePageOffsets -> T
    boolean mCalledSuper -> U
    int mDecorChildCount -> V
    android.support.v4.view.ViewPager$OnPageChangeListener mOnPageChangeListener -> W
    android.support.v4.view.ViewPager$OnPageChangeListener mInternalPageChangeListener -> Z
    android.support.v4.view.ViewPager$OnAdapterChangeListener mAdapterChangeListener -> aa
    android.support.v4.view.ViewPager$PageTransformer mPageTransformer -> ab
    java.lang.reflect.Method mSetChildrenDrawingOrderEnabled -> ac
    int mDrawingOrder -> ad
    java.util.ArrayList mDrawingOrderedChildren -> ae
    android.support.v4.view.ViewPager$ViewPositionComparator sPositionComparator -> af
    java.lang.Runnable mEndScrollRunnable -> ag
    int mScrollState -> ah
    void initViewPager() -> a
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setScrollState(int) -> d
    void setAdapter(android.support.v4.view.PagerAdapter) -> setAdapter
    void removeNonDecorViews() -> i
    android.support.v4.view.PagerAdapter getAdapter() -> b
    void setOnAdapterChangeListener(android.support.v4.view.ViewPager$OnAdapterChangeListener) -> a
    void setCurrentItem(int) -> setCurrentItem
    void setCurrentItem(int,boolean) -> setCurrentItem
    int getCurrentItem() -> c
    void setCurrentItemInternal(int,boolean,boolean) -> a
    void setCurrentItemInternal(int,boolean,boolean,int) -> a
    void scrollToItem(int,boolean,int,boolean) -> a
    void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> setOnPageChangeListener
    void setPageTransformer(boolean,android.support.v4.view.ViewPager$PageTransformer) -> setPageTransformer
    void setChildrenDrawingOrderEnabledCompat(boolean) -> a
    int getChildDrawingOrder(int,int) -> getChildDrawingOrder
    android.support.v4.view.ViewPager$OnPageChangeListener setInternalPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> a
    void setOffscreenPageLimit(int) -> setOffscreenPageLimit
    void setPageMargin(int) -> setPageMargin
    void setPageMarginDrawable(android.graphics.drawable.Drawable) -> setPageMarginDrawable
    void setPageMarginDrawable(int) -> setPageMarginDrawable
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void drawableStateChanged() -> drawableStateChanged
    float distanceInfluenceForSnapDuration(float) -> a
    void smoothScrollTo(int,int,int) -> a
    android.support.v4.view.ViewPager$ItemInfo addNewItem(int,int) -> a
    void dataSetChanged() -> d
    void populate() -> e
    void populate(int) -> a
    void calculatePageOffsets(android.support.v4.view.ViewPager$ItemInfo,int,android.support.v4.view.ViewPager$ItemInfo) -> a
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    android.support.v4.view.ViewPager$ItemInfo infoForChild(android.view.View) -> a
    android.support.v4.view.ViewPager$ItemInfo infoForAnyChild(android.view.View) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForPosition(int) -> b
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void recomputeScrollPosition(int,int,int,int) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void computeScroll() -> computeScroll
    boolean pageScrolled(int) -> e
    void onPageScrolled(int,float,int) -> a
    void completeScroll(boolean) -> b
    boolean isGutterDrag(float,float) -> a
    void enableLayers(boolean) -> c
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean performDrag(float) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForCurrentScrollPosition() -> j
    int determineTargetPage(int,float,int,int) -> a
    void draw(android.graphics.Canvas) -> draw
    void onDraw(android.graphics.Canvas) -> onDraw
    void onSecondaryPointerUp(android.view.MotionEvent) -> a
    void endDrag() -> k
    void setScrollingCacheEnabled(boolean) -> d
    boolean canScroll(android.view.View,boolean,int,int,int) -> a
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean executeKeyEvent(android.view.KeyEvent) -> a
    boolean arrowScroll(int) -> c
    android.graphics.Rect getChildRectInPagerCoordinates(android.graphics.Rect,android.view.View) -> a
    boolean pageLeft() -> f
    boolean pageRight() -> g
    void addFocusables(java.util.ArrayList,int,int) -> addFocusables
    void addTouchables(java.util.ArrayList) -> addTouchables
    boolean onRequestFocusInDescendants(int,android.graphics.Rect) -> onRequestFocusInDescendants
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    void access$000(android.support.v4.view.ViewPager,int) -> a
    android.support.v4.view.PagerAdapter access$200(android.support.v4.view.ViewPager) -> a
    int access$300(android.support.v4.view.ViewPager) -> b
    int[] access$400() -> h
android.support.v4.view.ViewPager$1 -> android.support.v4.view.ViewPager$1:
    int compare(android.support.v4.view.ViewPager$ItemInfo,android.support.v4.view.ViewPager$ItemInfo) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.view.ViewPager$2 -> android.support.v4.view.ViewPager$2:
    float getInterpolation(float) -> getInterpolation
android.support.v4.view.ViewPager$3 -> android.support.v4.view.ViewPager$3:
    android.support.v4.view.ViewPager this$0 -> a
    void run() -> run
android.support.v4.view.ViewPager$Decor -> android.support.v4.view.W:
android.support.v4.view.ViewPager$ItemInfo -> android.support.v4.view.X:
    java.lang.Object object -> a
    int position -> b
    boolean scrolling -> c
    float widthFactor -> d
    float offset -> e
android.support.v4.view.ViewPager$LayoutParams -> android.support.v4.view.ViewPager$LayoutParams:
    boolean isDecor -> a
    int gravity -> b
    float widthFactor -> c
    boolean needsMeasure -> d
    int position -> e
    int childIndex -> f
android.support.v4.view.ViewPager$MyAccessibilityDelegate -> android.support.v4.view.Y:
    android.support.v4.view.ViewPager this$0 -> b
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.ViewPager$OnAdapterChangeListener -> android.support.v4.view.Z:
    void onAdapterChanged(android.support.v4.view.PagerAdapter,android.support.v4.view.PagerAdapter) -> a
android.support.v4.view.ViewPager$OnPageChangeListener -> android.support.v4.view.aa:
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> a
    void onPageScrollStateChanged(int) -> b
android.support.v4.view.ViewPager$PageTransformer -> android.support.v4.view.ab:
    void transformPage(android.view.View,float) -> a
android.support.v4.view.ViewPager$PagerObserver -> android.support.v4.view.ac:
    android.support.v4.view.ViewPager this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v4.view.ViewPager$SavedState -> android.support.v4.view.ad:
    int position -> a
    android.os.Parcelable adapterState -> b
    java.lang.ClassLoader loader -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.view.ViewPager$SavedState$1 -> android.support.v4.view.ad$1:
    android.support.v4.view.ViewPager$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> b
    android.support.v4.view.ViewPager$SavedState[] newArray(int) -> b
    java.lang.Object[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
android.support.v4.view.ViewPager$ViewPositionComparator -> android.support.v4.view.ae:
    int compare(android.view.View,android.view.View) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat -> android.support.v4.view.a.a:
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoImpl IMPL -> a
    java.lang.Object mInfo -> b
    java.lang.Object getInfo() -> a
    void addAction(int) -> a
    void setScrollable(boolean) -> a
    void setClassName(java.lang.CharSequence) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl -> android.support.v4.view.a.b:
    void addAction(java.lang.Object,int) -> a
    void setClassName(java.lang.Object,java.lang.CharSequence) -> a
    void setScrollable(java.lang.Object,boolean) -> a
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoImpl -> android.support.v4.view.a.c:
    void addAction(java.lang.Object,int) -> a
    void setScrollable(java.lang.Object,boolean) -> a
    void setClassName(java.lang.Object,java.lang.CharSequence) -> a
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoJellybeanImpl -> android.support.v4.view.a.d:
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl -> android.support.v4.view.a.e:
    void addAction(java.lang.Object,int) -> a
    void setClassName(java.lang.Object,java.lang.CharSequence) -> a
    void setScrollable(java.lang.Object,boolean) -> a
android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs -> android.support.v4.view.a.f:
    void addAction(java.lang.Object,int) -> a
    void setClassName(java.lang.Object,java.lang.CharSequence) -> a
    void setScrollable(java.lang.Object,boolean) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat -> android.support.v4.view.a.g:
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderImpl IMPL -> a
    java.lang.Object mProvider -> b
    java.lang.Object getProvider() -> a
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat createAccessibilityNodeInfo(int) -> a
    boolean performAction(int,int,android.os.Bundle) -> a
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderImpl -> android.support.v4.view.a.h:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompat) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl -> android.support.v4.view.a.i:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompat) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl$1 -> android.support.v4.view.a.i$1:
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat val$compat -> a
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl this$0 -> b
    boolean performAction(int,int,android.os.Bundle) -> a
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> a
    java.lang.Object createAccessibilityNodeInfo(int) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderStubImpl -> android.support.v4.view.a.j:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompat) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean -> android.support.v4.view.a.k:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$1 -> android.support.v4.view.a.k$1:
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge val$bridge -> a
    android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int) -> createAccessibilityNodeInfo
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> findAccessibilityNodeInfosByText
    boolean performAction(int,int,android.os.Bundle) -> performAction
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge -> android.support.v4.view.a.l:
    java.lang.Object createAccessibilityNodeInfo(int) -> a
    boolean performAction(int,int,android.os.Bundle) -> a
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> a
android.support.v4.widget.EdgeEffectCompat -> android.support.v4.d.a:
    java.lang.Object mEdgeEffect -> a
    android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl IMPL -> b
    void setSize(int,int) -> a
    boolean isFinished() -> a
    void finish() -> b
    boolean onPull(float) -> a
    boolean onRelease() -> c
    boolean draw(android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl -> android.support.v4.d.b:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl -> android.support.v4.d.c:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl -> android.support.v4.d.d:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompatIcs -> android.support.v4.d.e:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
ch.boye.httpclientandroidlib.ConnectionClosedException -> a.a.a.a:
ch.boye.httpclientandroidlib.ConnectionReuseStrategy -> a.a.a.b:
    boolean keepAlive(ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
ch.boye.httpclientandroidlib.Consts -> a.a.a.c:
    java.nio.charset.Charset UTF_8 -> a
    java.nio.charset.Charset ASCII -> b
    java.nio.charset.Charset ISO_8859_1 -> c
ch.boye.httpclientandroidlib.FormattedHeader -> a.a.a.d:
    ch.boye.httpclientandroidlib.util.CharArrayBuffer getBuffer() -> a
    int getValuePos() -> b
ch.boye.httpclientandroidlib.Header -> a.a.a.e:
    java.lang.String getName() -> c
    java.lang.String getValue() -> d
    ch.boye.httpclientandroidlib.HeaderElement[] getElements() -> e
ch.boye.httpclientandroidlib.HeaderElement -> a.a.a.f:
    java.lang.String getName() -> a
    java.lang.String getValue() -> b
    ch.boye.httpclientandroidlib.NameValuePair[] getParameters() -> c
    ch.boye.httpclientandroidlib.NameValuePair getParameterByName(java.lang.String) -> a
ch.boye.httpclientandroidlib.HeaderElementIterator -> a.a.a.g:
    boolean hasNext() -> hasNext
    ch.boye.httpclientandroidlib.HeaderElement nextElement() -> a
ch.boye.httpclientandroidlib.HeaderIterator -> a.a.a.h:
    boolean hasNext() -> hasNext
    ch.boye.httpclientandroidlib.Header nextHeader() -> a
ch.boye.httpclientandroidlib.HttpClientConnection -> a.a.a.i:
    boolean isResponseAvailable(int) -> a
    void sendRequestHeader(ch.boye.httpclientandroidlib.HttpRequest) -> a
    void sendRequestEntity(ch.boye.httpclientandroidlib.HttpEntityEnclosingRequest) -> a
    ch.boye.httpclientandroidlib.HttpResponse receiveResponseHeader() -> a
    void receiveResponseEntity(ch.boye.httpclientandroidlib.HttpResponse) -> a
    void flush() -> b
ch.boye.httpclientandroidlib.HttpConnection -> a.a.a.j:
    void close() -> close
    boolean isOpen() -> c
    boolean isStale() -> d
    void setSocketTimeout(int) -> b
    void shutdown() -> e
ch.boye.httpclientandroidlib.HttpEntity -> a.a.a.k:
    boolean isRepeatable() -> a
    boolean isChunked() -> b
    long getContentLength() -> c
    ch.boye.httpclientandroidlib.Header getContentType() -> d
    ch.boye.httpclientandroidlib.Header getContentEncoding() -> e
    java.io.InputStream getContent() -> f
    void writeTo(java.io.OutputStream) -> a
    boolean isStreaming() -> g
    void consumeContent() -> h
ch.boye.httpclientandroidlib.HttpEntityEnclosingRequest -> a.a.a.l:
    boolean expectContinue() -> expectContinue
    ch.boye.httpclientandroidlib.HttpEntity getEntity() -> getEntity
ch.boye.httpclientandroidlib.HttpException -> a.a.a.m:
ch.boye.httpclientandroidlib.HttpHost -> a.a.a.n:
    java.lang.String hostname -> a
    java.lang.String lcHostname -> b
    int port -> c
    java.lang.String schemeName -> d
    java.lang.String getHostName() -> a
    int getPort() -> b
    java.lang.String getSchemeName() -> c
    java.lang.String toURI() -> d
    java.lang.String toHostString() -> e
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object clone() -> clone
ch.boye.httpclientandroidlib.HttpInetConnection -> a.a.a.o:
    java.net.InetAddress getRemoteAddress() -> f
    int getRemotePort() -> g
ch.boye.httpclientandroidlib.HttpMessage -> a.a.a.p:
    ch.boye.httpclientandroidlib.ProtocolVersion getProtocolVersion() -> getProtocolVersion
    boolean containsHeader(java.lang.String) -> containsHeader
    ch.boye.httpclientandroidlib.Header[] getHeaders(java.lang.String) -> getHeaders
    ch.boye.httpclientandroidlib.Header getFirstHeader(java.lang.String) -> getFirstHeader
    ch.boye.httpclientandroidlib.Header[] getAllHeaders() -> getAllHeaders
    void addHeader(ch.boye.httpclientandroidlib.Header) -> addHeader
    void addHeader(java.lang.String,java.lang.String) -> addHeader
    void setHeader(java.lang.String,java.lang.String) -> setHeader
    void setHeaders(ch.boye.httpclientandroidlib.Header[]) -> setHeaders
    void removeHeaders(java.lang.String) -> removeHeaders
    ch.boye.httpclientandroidlib.HeaderIterator headerIterator() -> headerIterator
    ch.boye.httpclientandroidlib.HeaderIterator headerIterator(java.lang.String) -> headerIterator
    ch.boye.httpclientandroidlib.params.HttpParams getParams() -> getParams
    void setParams(ch.boye.httpclientandroidlib.params.HttpParams) -> setParams
ch.boye.httpclientandroidlib.HttpRequest -> a.a.a.q:
    ch.boye.httpclientandroidlib.RequestLine getRequestLine() -> getRequestLine
ch.boye.httpclientandroidlib.HttpRequestInterceptor -> a.a.a.r:
    void process(ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
ch.boye.httpclientandroidlib.HttpResponse -> a.a.a.s:
    ch.boye.httpclientandroidlib.StatusLine getStatusLine() -> a
    ch.boye.httpclientandroidlib.HttpEntity getEntity() -> b
    void setEntity(ch.boye.httpclientandroidlib.HttpEntity) -> a
ch.boye.httpclientandroidlib.HttpResponseFactory -> a.a.a.t:
    ch.boye.httpclientandroidlib.HttpResponse newHttpResponse(ch.boye.httpclientandroidlib.StatusLine,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
ch.boye.httpclientandroidlib.HttpResponseInterceptor -> a.a.a.u:
    void process(ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
ch.boye.httpclientandroidlib.HttpVersion -> a.a.a.v:
    ch.boye.httpclientandroidlib.HttpVersion HTTP_0_9 -> a
    ch.boye.httpclientandroidlib.HttpVersion HTTP_1_0 -> b
    ch.boye.httpclientandroidlib.HttpVersion HTTP_1_1 -> c
    ch.boye.httpclientandroidlib.ProtocolVersion forVersion(int,int) -> a
ch.boye.httpclientandroidlib.MalformedChunkCodingException -> a.a.a.w:
ch.boye.httpclientandroidlib.NameValuePair -> a.a.a.x:
    java.lang.String getName() -> a
    java.lang.String getValue() -> b
ch.boye.httpclientandroidlib.NoHttpResponseException -> a.a.a.y:
ch.boye.httpclientandroidlib.ParseException -> a.a.a.z:
ch.boye.httpclientandroidlib.ProtocolException -> a.a.a.A:
ch.boye.httpclientandroidlib.ProtocolVersion -> a.a.a.B:
    java.lang.String protocol -> d
    int major -> e
    int minor -> f
    java.lang.String getProtocol() -> a
    int getMajor() -> b
    int getMinor() -> c
    ch.boye.httpclientandroidlib.ProtocolVersion forVersion(int,int) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean isComparable(ch.boye.httpclientandroidlib.ProtocolVersion) -> a
    int compareToVersion(ch.boye.httpclientandroidlib.ProtocolVersion) -> b
    boolean lessEquals(ch.boye.httpclientandroidlib.ProtocolVersion) -> c
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
ch.boye.httpclientandroidlib.ReasonPhraseCatalog -> a.a.a.C:
ch.boye.httpclientandroidlib.RequestLine -> a.a.a.D:
    java.lang.String getMethod() -> a
    ch.boye.httpclientandroidlib.ProtocolVersion getProtocolVersion() -> b
    java.lang.String getUri() -> c
ch.boye.httpclientandroidlib.StatusLine -> a.a.a.E:
    ch.boye.httpclientandroidlib.ProtocolVersion getProtocolVersion() -> a
    int getStatusCode() -> b
    java.lang.String getReasonPhrase() -> c
ch.boye.httpclientandroidlib.TokenIterator -> a.a.a.F:
    boolean hasNext() -> hasNext
    java.lang.String nextToken() -> a
ch.boye.httpclientandroidlib.TruncatedChunkException -> a.a.a.G:
ch.boye.httpclientandroidlib.androidextra.Base64 -> a.a.a.a.a:
    boolean $assertionsDisabled -> a
    byte[] decode(byte[],int) -> a
    byte[] decode(byte[],int,int,int) -> a
    byte[] encode(byte[],int) -> b
    byte[] encode(byte[],int,int,int) -> b
ch.boye.httpclientandroidlib.androidextra.Base64$Coder -> a.a.a.a.b:
    byte[] output -> a
    int op -> b
ch.boye.httpclientandroidlib.androidextra.Base64$Decoder -> a.a.a.a.c:
    int[] DECODE -> c
    int[] DECODE_WEBSAFE -> d
    int state -> e
    int value -> f
    int[] alphabet -> g
    boolean process(byte[],int,int,boolean) -> a
ch.boye.httpclientandroidlib.androidextra.Base64$Encoder -> a.a.a.a.d:
    byte[] ENCODE -> h
    byte[] ENCODE_WEBSAFE -> i
    byte[] tail -> j
    int tailLen -> c
    int count -> k
    boolean do_padding -> d
    boolean do_newline -> e
    boolean do_cr -> f
    byte[] alphabet -> l
    boolean $assertionsDisabled -> g
    boolean process(byte[],int,int,boolean) -> a
ch.boye.httpclientandroidlib.androidextra.HttpClientAndroidLog -> a.a.a.a.e:
    java.lang.String logTag -> a
    boolean debugEnabled -> b
    boolean errorEnabled -> c
    boolean traceEnabled -> d
    boolean warnEnabled -> e
    boolean infoEnabled -> f
    boolean isDebugEnabled() -> a
    void debug(java.lang.Object) -> a
    void debug(java.lang.Object,java.lang.Throwable) -> a
    boolean isErrorEnabled() -> b
    void error(java.lang.Object) -> b
    boolean isWarnEnabled() -> c
    void warn(java.lang.Object) -> c
    void warn(java.lang.Object,java.lang.Throwable) -> b
    boolean isInfoEnabled() -> d
    void info(java.lang.Object) -> d
ch.boye.httpclientandroidlib.auth.AuthOption -> a.a.a.b.a:
    ch.boye.httpclientandroidlib.auth.AuthScheme authScheme -> a
    ch.boye.httpclientandroidlib.auth.Credentials creds -> b
    ch.boye.httpclientandroidlib.auth.AuthScheme getAuthScheme() -> a
    ch.boye.httpclientandroidlib.auth.Credentials getCredentials() -> b
    java.lang.String toString() -> toString
ch.boye.httpclientandroidlib.auth.AuthProtocolState -> a.a.a.b.b:
    ch.boye.httpclientandroidlib.auth.AuthProtocolState UNCHALLENGED -> a
    ch.boye.httpclientandroidlib.auth.AuthProtocolState CHALLENGED -> b
    ch.boye.httpclientandroidlib.auth.AuthProtocolState HANDSHAKE -> c
    ch.boye.httpclientandroidlib.auth.AuthProtocolState FAILURE -> d
    ch.boye.httpclientandroidlib.auth.AuthProtocolState SUCCESS -> e
    ch.boye.httpclientandroidlib.auth.AuthProtocolState[] $VALUES -> f
    ch.boye.httpclientandroidlib.auth.AuthProtocolState[] values() -> values
    ch.boye.httpclientandroidlib.auth.AuthProtocolState valueOf(java.lang.String) -> valueOf
ch.boye.httpclientandroidlib.auth.AuthScheme -> a.a.a.b.c:
    void processChallenge(ch.boye.httpclientandroidlib.Header) -> a
    java.lang.String getSchemeName() -> a
    java.lang.String getRealm() -> b
    boolean isConnectionBased() -> c
    boolean isComplete() -> d
    ch.boye.httpclientandroidlib.Header authenticate(ch.boye.httpclientandroidlib.auth.Credentials,ch.boye.httpclientandroidlib.HttpRequest) -> a
ch.boye.httpclientandroidlib.auth.AuthSchemeFactory -> a.a.a.b.d:
    ch.boye.httpclientandroidlib.auth.AuthScheme newInstance(ch.boye.httpclientandroidlib.params.HttpParams) -> a
ch.boye.httpclientandroidlib.auth.AuthSchemeRegistry -> a.a.a.b.e:
    java.util.concurrent.ConcurrentHashMap registeredSchemes -> a
    void register(java.lang.String,ch.boye.httpclientandroidlib.auth.AuthSchemeFactory) -> a
    ch.boye.httpclientandroidlib.auth.AuthScheme getAuthScheme(java.lang.String,ch.boye.httpclientandroidlib.params.HttpParams) -> a
ch.boye.httpclientandroidlib.auth.AuthScope -> a.a.a.b.f:
    java.lang.String ANY_HOST -> a
    java.lang.String ANY_REALM -> b
    java.lang.String ANY_SCHEME -> c
    ch.boye.httpclientandroidlib.auth.AuthScope ANY -> d
    java.lang.String scheme -> e
    java.lang.String realm -> f
    java.lang.String host -> g
    int port -> h
    int match(ch.boye.httpclientandroidlib.auth.AuthScope) -> a
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
ch.boye.httpclientandroidlib.auth.AuthState -> a.a.a.b.g:
    ch.boye.httpclientandroidlib.auth.AuthProtocolState state -> a
    ch.boye.httpclientandroidlib.auth.AuthScheme authScheme -> b
    ch.boye.httpclientandroidlib.auth.AuthScope authScope -> c
    ch.boye.httpclientandroidlib.auth.Credentials credentials -> d
    java.util.Queue authOptions -> e
    void reset() -> a
    ch.boye.httpclientandroidlib.auth.AuthProtocolState getState() -> b
    void setState(ch.boye.httpclientandroidlib.auth.AuthProtocolState) -> a
    ch.boye.httpclientandroidlib.auth.AuthScheme getAuthScheme() -> c
    ch.boye.httpclientandroidlib.auth.Credentials getCredentials() -> d
    void update(ch.boye.httpclientandroidlib.auth.AuthScheme,ch.boye.httpclientandroidlib.auth.Credentials) -> a
    java.util.Queue getAuthOptions() -> e
    void update(java.util.Queue) -> a
    void setAuthScheme(ch.boye.httpclientandroidlib.auth.AuthScheme) -> a
    void setCredentials(ch.boye.httpclientandroidlib.auth.Credentials) -> a
    java.lang.String toString() -> toString
ch.boye.httpclientandroidlib.auth.AuthenticationException -> a.a.a.b.h:
ch.boye.httpclientandroidlib.auth.BasicUserPrincipal -> a.a.a.b.i:
    java.lang.String username -> a
    java.lang.String getName() -> getName
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
ch.boye.httpclientandroidlib.auth.ChallengeState -> a.a.a.b.j:
    ch.boye.httpclientandroidlib.auth.ChallengeState TARGET -> a
    ch.boye.httpclientandroidlib.auth.ChallengeState PROXY -> b
    ch.boye.httpclientandroidlib.auth.ChallengeState[] $VALUES -> c
    ch.boye.httpclientandroidlib.auth.ChallengeState[] values() -> values
    ch.boye.httpclientandroidlib.auth.ChallengeState valueOf(java.lang.String) -> valueOf
ch.boye.httpclientandroidlib.auth.ContextAwareAuthScheme -> a.a.a.b.k:
    ch.boye.httpclientandroidlib.Header authenticate(ch.boye.httpclientandroidlib.auth.Credentials,ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
ch.boye.httpclientandroidlib.auth.Credentials -> a.a.a.b.l:
    java.security.Principal getUserPrincipal() -> a
    java.lang.String getPassword() -> b
ch.boye.httpclientandroidlib.auth.InvalidCredentialsException -> a.a.a.b.m:
ch.boye.httpclientandroidlib.auth.MalformedChallengeException -> a.a.a.b.n:
ch.boye.httpclientandroidlib.auth.NTCredentials -> a.a.a.b.o:
    ch.boye.httpclientandroidlib.auth.NTUserPrincipal principal -> a
    java.lang.String password -> b
    java.lang.String workstation -> c
    java.security.Principal getUserPrincipal() -> a
    java.lang.String getUserName() -> c
    java.lang.String getPassword() -> b
    java.lang.String getDomain() -> d
    java.lang.String getWorkstation() -> e
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
ch.boye.httpclientandroidlib.auth.NTUserPrincipal -> a.a.a.b.p:
    java.lang.String username -> a
    java.lang.String domain -> b
    java.lang.String ntname -> c
    java.lang.String getName() -> getName
    java.lang.String getDomain() -> a
    java.lang.String getUsername() -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
ch.boye.httpclientandroidlib.auth.UsernamePasswordCredentials -> a.a.a.b.q:
    ch.boye.httpclientandroidlib.auth.BasicUserPrincipal principal -> a
    java.lang.String password -> b
    java.security.Principal getUserPrincipal() -> a
    java.lang.String getPassword() -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
ch.boye.httpclientandroidlib.auth.params.AuthParams -> a.a.a.b.a.a:
    java.lang.String getCredentialCharset(ch.boye.httpclientandroidlib.params.HttpParams) -> a
ch.boye.httpclientandroidlib.client.AuthCache -> a.a.a.c.a:
    void put(ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.auth.AuthScheme) -> a
    ch.boye.httpclientandroidlib.auth.AuthScheme get(ch.boye.httpclientandroidlib.HttpHost) -> a
    void remove(ch.boye.httpclientandroidlib.HttpHost) -> b
ch.boye.httpclientandroidlib.client.AuthenticationHandler -> a.a.a.c.b:
    boolean isAuthenticationRequested(ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    java.util.Map getChallenges(ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext) -> b
    ch.boye.httpclientandroidlib.auth.AuthScheme selectScheme(java.util.Map,ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
ch.boye.httpclientandroidlib.client.AuthenticationStrategy -> a.a.a.c.c:
    boolean isAuthenticationRequested(ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    java.util.Map getChallenges(ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext) -> b
    java.util.Queue select(java.util.Map,ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    void authSucceeded(ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.auth.AuthScheme,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    void authFailed(ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.auth.AuthScheme,ch.boye.httpclientandroidlib.protocol.HttpContext) -> b
ch.boye.httpclientandroidlib.client.BackoffManager -> a.a.a.c.d:
    void backOff(ch.boye.httpclientandroidlib.conn.routing.HttpRoute) -> a
    void probe(ch.boye.httpclientandroidlib.conn.routing.HttpRoute) -> b
ch.boye.httpclientandroidlib.client.CircularRedirectException -> a.a.a.c.e:
ch.boye.httpclientandroidlib.client.ClientProtocolException -> a.a.a.c.f:
    long serialVersionUID -> serialVersionUID
ch.boye.httpclientandroidlib.client.ConnectionBackoffStrategy -> a.a.a.c.g:
    boolean shouldBackoff(java.lang.Throwable) -> a
    boolean shouldBackoff(ch.boye.httpclientandroidlib.HttpResponse) -> a
ch.boye.httpclientandroidlib.client.CookieStore -> a.a.a.c.h:
    void addCookie(ch.boye.httpclientandroidlib.cookie.Cookie) -> a
    java.util.List getCookies() -> a
ch.boye.httpclientandroidlib.client.CredentialsProvider -> a.a.a.c.i:
    void setCredentials(ch.boye.httpclientandroidlib.auth.AuthScope,ch.boye.httpclientandroidlib.auth.Credentials) -> a
    ch.boye.httpclientandroidlib.auth.Credentials getCredentials(ch.boye.httpclientandroidlib.auth.AuthScope) -> a
ch.boye.httpclientandroidlib.client.HttpClient -> a.a.a.c.j:
    ch.boye.httpclientandroidlib.params.HttpParams getParams() -> a
    ch.boye.httpclientandroidlib.conn.ClientConnectionManager getConnectionManager() -> b
ch.boye.httpclientandroidlib.client.HttpRequestRetryHandler -> a.a.a.c.k:
    boolean retryRequest(java.io.IOException,int,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
ch.boye.httpclientandroidlib.client.HttpResponseException -> a.a.a.c.l:
    long serialVersionUID -> serialVersionUID
    int statusCode -> statusCode
    int getStatusCode() -> getStatusCode
ch.boye.httpclientandroidlib.client.NonRepeatableRequestException -> a.a.a.c.m:
ch.boye.httpclientandroidlib.client.RedirectException -> a.a.a.c.n:
ch.boye.httpclientandroidlib.client.RedirectHandler -> a.a.a.c.o:
    boolean isRedirectRequested(ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    java.net.URI getLocationURI(ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext) -> b
ch.boye.httpclientandroidlib.client.RedirectStrategy -> a.a.a.c.p:
    boolean isRedirected(ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    ch.boye.httpclientandroidlib.client.methods.HttpUriRequest getRedirect(ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext) -> b
ch.boye.httpclientandroidlib.client.RequestDirector -> a.a.a.c.q:
    ch.boye.httpclientandroidlib.HttpResponse execute(ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
ch.boye.httpclientandroidlib.client.ResponseHandler -> a.a.a.c.r:
    java.lang.Object handleResponse(ch.boye.httpclientandroidlib.HttpResponse) -> handleResponse
ch.boye.httpclientandroidlib.client.UserTokenHandler -> a.a.a.c.s:
    java.lang.Object getUserToken(ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
ch.boye.httpclientandroidlib.client.methods.AbortableHttpRequest -> a.a.a.c.a.a:
    void setConnectionRequest(ch.boye.httpclientandroidlib.conn.ClientConnectionRequest) -> setConnectionRequest
    void setReleaseTrigger(ch.boye.httpclientandroidlib.conn.ConnectionReleaseTrigger) -> setReleaseTrigger
ch.boye.httpclientandroidlib.client.methods.HttpDelete -> a.a.a.c.a.b:
    java.lang.String getMethod() -> getMethod
ch.boye.httpclientandroidlib.client.methods.HttpEntityEnclosingRequestBase -> a.a.a.c.a.c:
    ch.boye.httpclientandroidlib.HttpEntity entity -> entity
    ch.boye.httpclientandroidlib.HttpEntity getEntity() -> getEntity
    void setEntity(ch.boye.httpclientandroidlib.HttpEntity) -> setEntity
    boolean expectContinue() -> expectContinue
    java.lang.Object clone() -> clone
ch.boye.httpclientandroidlib.client.methods.HttpGet -> a.a.a.c.a.d:
    java.lang.String getMethod() -> getMethod
ch.boye.httpclientandroidlib.client.methods.HttpHead -> a.a.a.c.a.e:
    java.lang.String getMethod() -> getMethod
ch.boye.httpclientandroidlib.client.methods.HttpPut -> a.a.a.c.a.f:
    java.lang.String getMethod() -> getMethod
ch.boye.httpclientandroidlib.client.methods.HttpRequestBase -> a.a.a.c.a.g:
    java.util.concurrent.locks.Lock abortLock -> abortLock
    boolean aborted -> aborted
    java.net.URI uri -> uri
    ch.boye.httpclientandroidlib.conn.ClientConnectionRequest connRequest -> connRequest
    ch.boye.httpclientandroidlib.conn.ConnectionReleaseTrigger releaseTrigger -> releaseTrigger
    java.lang.String getMethod() -> getMethod
    ch.boye.httpclientandroidlib.ProtocolVersion getProtocolVersion() -> getProtocolVersion
    java.net.URI getURI() -> getURI
    ch.boye.httpclientandroidlib.RequestLine getRequestLine() -> getRequestLine
    void setURI(java.net.URI) -> setURI
    void setConnectionRequest(ch.boye.httpclientandroidlib.conn.ClientConnectionRequest) -> setConnectionRequest
    void setReleaseTrigger(ch.boye.httpclientandroidlib.conn.ConnectionReleaseTrigger) -> setReleaseTrigger
    void cleanup() -> cleanup
    void abort() -> abort
    boolean isAborted() -> isAborted
    void reset() -> reset
    void releaseConnection() -> releaseConnection
    java.lang.Object clone() -> clone
    java.lang.String toString() -> toString
ch.boye.httpclientandroidlib.client.methods.HttpUriRequest -> a.a.a.c.a.h:
    java.lang.String getMethod() -> getMethod
    java.net.URI getURI() -> getURI
    boolean isAborted() -> isAborted
ch.boye.httpclientandroidlib.client.params.HttpClientParams -> a.a.a.c.b.a:
    boolean isRedirecting(ch.boye.httpclientandroidlib.params.HttpParams) -> a
    boolean isAuthenticating(ch.boye.httpclientandroidlib.params.HttpParams) -> b
    java.lang.String getCookiePolicy(ch.boye.httpclientandroidlib.params.HttpParams) -> c
    long getConnectionManagerTimeout(ch.boye.httpclientandroidlib.params.HttpParams) -> d
ch.boye.httpclientandroidlib.client.protocol.RequestAddCookies -> a.a.a.c.c.a:
    ch.boye.httpclientandroidlib.androidextra.HttpClientAndroidLog log -> a
    void process(ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
ch.boye.httpclientandroidlib.client.protocol.RequestAuthCache -> a.a.a.c.c.b:
    ch.boye.httpclientandroidlib.androidextra.HttpClientAndroidLog log -> a
    void process(ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    void doPreemptiveAuth(ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.auth.AuthScheme,ch.boye.httpclientandroidlib.auth.AuthState,ch.boye.httpclientandroidlib.client.CredentialsProvider) -> a
ch.boye.httpclientandroidlib.client.protocol.RequestAuthenticationBase -> a.a.a.c.c.c:
    ch.boye.httpclientandroidlib.androidextra.HttpClientAndroidLog log -> a
    void process(ch.boye.httpclientandroidlib.auth.AuthState,ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    void ensureAuthScheme(ch.boye.httpclientandroidlib.auth.AuthScheme) -> a
    ch.boye.httpclientandroidlib.Header authenticate(ch.boye.httpclientandroidlib.auth.AuthScheme,ch.boye.httpclientandroidlib.auth.Credentials,ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
ch.boye.httpclientandroidlib.client.protocol.RequestAuthenticationBase$1 -> a.a.a.c.c.c$1:
    int[] $SwitchMap$ch$boye$httpclientandroidlib$auth$AuthProtocolState -> a
ch.boye.httpclientandroidlib.client.protocol.RequestClientConnControl -> a.a.a.c.c.d:
    ch.boye.httpclientandroidlib.androidextra.HttpClientAndroidLog log -> a
    void process(ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
ch.boye.httpclientandroidlib.client.protocol.RequestDefaultHeaders -> a.a.a.c.c.e:
    void process(ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
ch.boye.httpclientandroidlib.client.protocol.RequestProxyAuthentication -> a.a.a.c.c.f:
    void process(ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
ch.boye.httpclientandroidlib.client.protocol.RequestTargetAuthentication -> a.a.a.c.c.g:
    void process(ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
ch.boye.httpclientandroidlib.client.protocol.ResponseProcessCookies -> a.a.a.c.c.h:
    ch.boye.httpclientandroidlib.androidextra.HttpClientAndroidLog log -> a
    void process(ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    void processCookies(ch.boye.httpclientandroidlib.HeaderIterator,ch.boye.httpclientandroidlib.cookie.CookieSpec,ch.boye.httpclientandroidlib.cookie.CookieOrigin,ch.boye.httpclientandroidlib.client.CookieStore) -> a
ch.boye.httpclientandroidlib.client.utils.CloneUtils -> a.a.a.c.d.a:
    java.lang.Object clone(java.lang.Object) -> a
ch.boye.httpclientandroidlib.client.utils.URIBuilder -> a.a.a.c.d.b:
    java.lang.String scheme -> a
    java.lang.String encodedSchemeSpecificPart -> b
    java.lang.String encodedAuthority -> c
    java.lang.String userInfo -> d
    java.lang.String encodedUserInfo -> e
    java.lang.String host -> f
    int port -> g
    java.lang.String path -> h
    java.lang.String encodedPath -> i
    java.lang.String encodedQuery -> j
    java.util.List queryParams -> k
    java.lang.String fragment -> l
    java.lang.String encodedFragment -> m
    java.util.List parseQuery(java.lang.String,java.nio.charset.Charset) -> a
    java.net.URI build() -> a
    java.lang.String buildString() -> b
    void digestURI(java.net.URI) -> a
    java.lang.String encodeUserInfo(java.lang.String) -> e
    java.lang.String encodePath(java.lang.String) -> f
    java.lang.String encodeQuery(java.util.List) -> a
    java.lang.String encodeFragment(java.lang.String) -> g
    ch.boye.httpclientandroidlib.client.utils.URIBuilder setScheme(java.lang.String) -> a
    ch.boye.httpclientandroidlib.client.utils.URIBuilder setUserInfo(java.lang.String) -> b
    ch.boye.httpclientandroidlib.client.utils.URIBuilder setHost(java.lang.String) -> c
    ch.boye.httpclientandroidlib.client.utils.URIBuilder setPort(int) -> a
    ch.boye.httpclientandroidlib.client.utils.URIBuilder setFragment(java.lang.String) -> d
    java.lang.String toString() -> toString
    java.lang.String normalizePath(java.lang.String) -> h
ch.boye.httpclientandroidlib.client.utils.URIUtils -> a.a.a.c.d.c:
    java.net.URI rewriteURI(java.net.URI,ch.boye.httpclientandroidlib.HttpHost,boolean) -> a
    java.net.URI rewriteURI(java.net.URI,ch.boye.httpclientandroidlib.HttpHost) -> a
    java.net.URI rewriteURI(java.net.URI) -> a
    java.net.URI resolve(java.net.URI,java.net.URI) -> a
    java.net.URI resolveReferenceStartingWithQueryString(java.net.URI,java.net.URI) -> b
    java.net.URI removeDotSegments(java.net.URI) -> c
    ch.boye.httpclientandroidlib.HttpHost extractHost(java.net.URI) -> b
ch.boye.httpclientandroidlib.client.utils.URLEncodedUtils -> a.a.a.c.d.d:
    char[] DELIM -> a
    java.util.BitSet UNRESERVED -> b
    java.util.BitSet PUNCT -> c
    java.util.BitSet USERINFO -> d
    java.util.BitSet PATHSAFE -> e
    java.util.BitSet FRAGMENT -> f
    java.util.BitSet RESERVED -> g
    java.util.BitSet URLENCODER -> h
    java.util.List parse(java.lang.String,java.nio.charset.Charset) -> a
    java.lang.String format(java.lang.Iterable,java.nio.charset.Charset) -> a
    java.lang.String urlencode(java.lang.String,java.nio.charset.Charset,java.util.BitSet,boolean) -> a
    java.lang.String urldecode(java.lang.String,java.nio.charset.Charset,boolean) -> a
    java.lang.String decodeFormFields(java.lang.String,java.nio.charset.Charset) -> e
    java.lang.String encodeFormFields(java.lang.String,java.nio.charset.Charset) -> f
    java.lang.String encUserInfo(java.lang.String,java.nio.charset.Charset) -> b
    java.lang.String encFragment(java.lang.String,java.nio.charset.Charset) -> c
    java.lang.String encPath(java.lang.String,java.nio.charset.Charset) -> d
ch.boye.httpclientandroidlib.conn.BasicManagedEntity -> a.a.a.d.a:
    ch.boye.httpclientandroidlib.conn.ManagedClientConnection managedConn -> a
    boolean attemptReuse -> b
    boolean isRepeatable() -> a
    java.io.InputStream getContent() -> f
    void ensureConsumed() -> l
    void consumeContent() -> h
    void writeTo(java.io.OutputStream) -> a
    void releaseConnection() -> i
    void abortConnection() -> j
    boolean eofDetected(java.io.InputStream) -> a
    boolean streamClosed(java.io.InputStream) -> b
    boolean streamAbort(java.io.InputStream) -> c
    void releaseManagedConnection() -> k
ch.boye.httpclientandroidlib.conn.ClientConnectionManager -> a.a.a.d.b:
    ch.boye.httpclientandroidlib.conn.scheme.SchemeRegistry getSchemeRegistry() -> a
    ch.boye.httpclientandroidlib.conn.ClientConnectionRequest requestConnection(ch.boye.httpclientandroidlib.conn.routing.HttpRoute,java.lang.Object) -> a
    void releaseConnection(ch.boye.httpclientandroidlib.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit) -> a
ch.boye.httpclientandroidlib.conn.ClientConnectionManagerFactory -> a.a.a.d.c:
    ch.boye.httpclientandroidlib.conn.ClientConnectionManager newInstance(ch.boye.httpclientandroidlib.params.HttpParams,ch.boye.httpclientandroidlib.conn.scheme.SchemeRegistry) -> a
ch.boye.httpclientandroidlib.conn.ClientConnectionOperator -> a.a.a.d.d:
    ch.boye.httpclientandroidlib.conn.OperatedClientConnection createConnection() -> a
    void openConnection(ch.boye.httpclientandroidlib.conn.OperatedClientConnection,ch.boye.httpclientandroidlib.HttpHost,java.net.InetAddress,ch.boye.httpclientandroidlib.protocol.HttpContext,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    void updateSecureConnection(ch.boye.httpclientandroidlib.conn.OperatedClientConnection,ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.protocol.HttpContext,ch.boye.httpclientandroidlib.params.HttpParams) -> a
ch.boye.httpclientandroidlib.conn.ClientConnectionRequest -> a.a.a.d.e:
    ch.boye.httpclientandroidlib.conn.ManagedClientConnection getConnection(long,java.util.concurrent.TimeUnit) -> a
    void abortRequest() -> a
ch.boye.httpclientandroidlib.conn.ConnectTimeoutException -> a.a.a.d.f:
ch.boye.httpclientandroidlib.conn.ConnectionKeepAliveStrategy -> a.a.a.d.g:
    long getKeepAliveDuration(ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
ch.boye.httpclientandroidlib.conn.ConnectionPoolTimeoutException -> a.a.a.d.h:
ch.boye.httpclientandroidlib.conn.ConnectionReleaseTrigger -> a.a.a.d.i:
    void releaseConnection() -> i
    void abortConnection() -> j
ch.boye.httpclientandroidlib.conn.DnsResolver -> a.a.a.d.j:
    java.net.InetAddress[] resolve(java.lang.String) -> a
ch.boye.httpclientandroidlib.conn.EofSensorInputStream -> a.a.a.d.k:
    java.io.InputStream wrappedStream -> a
    boolean selfClosed -> b
    ch.boye.httpclientandroidlib.conn.EofSensorWatcher eofWatcher -> c
    boolean isReadAllowed() -> a
    int read() -> read
    int read(byte[],int,int) -> read
    int read(byte[]) -> read
    int available() -> available
    void close() -> close
    void checkEOF(int) -> a
    void checkClose() -> b
    void checkAbort() -> c
    void releaseConnection() -> i
    void abortConnection() -> j
ch.boye.httpclientandroidlib.conn.EofSensorWatcher -> a.a.a.d.l:
    boolean eofDetected(java.io.InputStream) -> a
    boolean streamClosed(java.io.InputStream) -> b
    boolean streamAbort(java.io.InputStream) -> c
ch.boye.httpclientandroidlib.conn.HttpHostConnectException -> a.a.a.d.m:
    ch.boye.httpclientandroidlib.HttpHost host -> a
ch.boye.httpclientandroidlib.conn.HttpInetSocketAddress -> a.a.a.d.n:
    ch.boye.httpclientandroidlib.HttpHost httphost -> a
    ch.boye.httpclientandroidlib.HttpHost getHttpHost() -> a
    java.lang.String toString() -> toString
ch.boye.httpclientandroidlib.conn.HttpRoutedConnection -> a.a.a.d.o:
    boolean isSecure() -> h
    ch.boye.httpclientandroidlib.conn.routing.HttpRoute getRoute() -> k
    javax.net.ssl.SSLSession getSSLSession() -> l
ch.boye.httpclientandroidlib.conn.ManagedClientConnection -> a.a.a.d.p:
    ch.boye.httpclientandroidlib.conn.routing.HttpRoute getRoute() -> k
    void open(ch.boye.httpclientandroidlib.conn.routing.HttpRoute,ch.boye.httpclientandroidlib.protocol.HttpContext,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    void tunnelTarget(boolean,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    void tunnelProxy(ch.boye.httpclientandroidlib.HttpHost,boolean,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    void layerProtocol(ch.boye.httpclientandroidlib.protocol.HttpContext,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    void markReusable() -> m
    void setState(java.lang.Object) -> a
    void setIdleDuration(long,java.util.concurrent.TimeUnit) -> a
ch.boye.httpclientandroidlib.conn.OperatedClientConnection -> a.a.a.d.q:
    boolean isSecure() -> h
    java.net.Socket getSocket() -> i
    void opening(java.net.Socket,ch.boye.httpclientandroidlib.HttpHost) -> a
    void openCompleted(boolean,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    void update(java.net.Socket,ch.boye.httpclientandroidlib.HttpHost,boolean,ch.boye.httpclientandroidlib.params.HttpParams) -> a
ch.boye.httpclientandroidlib.conn.params.ConnManagerParams -> a.a.a.d.a.a:
    ch.boye.httpclientandroidlib.conn.params.ConnPerRoute DEFAULT_CONN_PER_ROUTE -> a
    ch.boye.httpclientandroidlib.conn.params.ConnPerRoute getMaxConnectionsPerRoute(ch.boye.httpclientandroidlib.params.HttpParams) -> a
    int getMaxTotalConnections(ch.boye.httpclientandroidlib.params.HttpParams) -> b
ch.boye.httpclientandroidlib.conn.params.ConnManagerParams$1 -> a.a.a.d.a.a$1:
    int getMaxForRoute(ch.boye.httpclientandroidlib.conn.routing.HttpRoute) -> a
ch.boye.httpclientandroidlib.conn.params.ConnPerRoute -> a.a.a.d.a.b:
    int getMaxForRoute(ch.boye.httpclientandroidlib.conn.routing.HttpRoute) -> a
ch.boye.httpclientandroidlib.conn.params.ConnPerRouteBean -> a.a.a.d.a.c:
    java.util.concurrent.ConcurrentHashMap maxPerHostMap -> a
    int defaultMax -> b
    void setDefaultMaxPerRoute(int) -> a
    int getMaxForRoute(ch.boye.httpclientandroidlib.conn.routing.HttpRoute) -> a
    java.lang.String toString() -> toString
ch.boye.httpclientandroidlib.conn.params.ConnRouteParams -> a.a.a.d.a.d:
    ch.boye.httpclientandroidlib.HttpHost NO_HOST -> a
    ch.boye.httpclientandroidlib.conn.routing.HttpRoute NO_ROUTE -> b
    ch.boye.httpclientandroidlib.HttpHost getDefaultProxy(ch.boye.httpclientandroidlib.params.HttpParams) -> a
    ch.boye.httpclientandroidlib.conn.routing.HttpRoute getForcedRoute(ch.boye.httpclientandroidlib.params.HttpParams) -> b
    java.net.InetAddress getLocalAddress(ch.boye.httpclientandroidlib.params.HttpParams) -> c
ch.boye.httpclientandroidlib.conn.routing.BasicRouteDirector -> a.a.a.d.b.a:
    int nextStep(ch.boye.httpclientandroidlib.conn.routing.RouteInfo,ch.boye.httpclientandroidlib.conn.routing.RouteInfo) -> a
    int firstStep(ch.boye.httpclientandroidlib.conn.routing.RouteInfo) -> a
    int directStep(ch.boye.httpclientandroidlib.conn.routing.RouteInfo,ch.boye.httpclientandroidlib.conn.routing.RouteInfo) -> b
    int proxiedStep(ch.boye.httpclientandroidlib.conn.routing.RouteInfo,ch.boye.httpclientandroidlib.conn.routing.RouteInfo) -> c
ch.boye.httpclientandroidlib.conn.routing.HttpRoute -> a.a.a.d.b.b:
    ch.boye.httpclientandroidlib.HttpHost[] EMPTY_HTTP_HOST_ARRAY -> a
    ch.boye.httpclientandroidlib.HttpHost targetHost -> b
    java.net.InetAddress localAddress -> c
    ch.boye.httpclientandroidlib.HttpHost[] proxyChain -> d
    ch.boye.httpclientandroidlib.conn.routing.RouteInfo$TunnelType tunnelled -> e
    ch.boye.httpclientandroidlib.conn.routing.RouteInfo$LayerType layered -> f
    boolean secure -> g
    ch.boye.httpclientandroidlib.HttpHost[] toChain(ch.boye.httpclientandroidlib.HttpHost) -> a
    ch.boye.httpclientandroidlib.HttpHost[] toChain(ch.boye.httpclientandroidlib.HttpHost[]) -> a
    ch.boye.httpclientandroidlib.HttpHost getTargetHost() -> a
    java.net.InetAddress getLocalAddress() -> b
    int getHopCount() -> c
    ch.boye.httpclientandroidlib.HttpHost getHopTarget(int) -> a
    ch.boye.httpclientandroidlib.HttpHost getProxyHost() -> d
    boolean isTunnelled() -> e
    boolean isLayered() -> f
    boolean isSecure() -> g
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
ch.boye.httpclientandroidlib.conn.routing.HttpRouteDirector -> a.a.a.d.b.c:
    int nextStep(ch.boye.httpclientandroidlib.conn.routing.RouteInfo,ch.boye.httpclientandroidlib.conn.routing.RouteInfo) -> a
ch.boye.httpclientandroidlib.conn.routing.HttpRoutePlanner -> a.a.a.d.b.d:
    ch.boye.httpclientandroidlib.conn.routing.HttpRoute determineRoute(ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
ch.boye.httpclientandroidlib.conn.routing.RouteInfo -> a.a.a.d.b.e:
    ch.boye.httpclientandroidlib.HttpHost getTargetHost() -> a
    java.net.InetAddress getLocalAddress() -> b
    int getHopCount() -> c
    ch.boye.httpclientandroidlib.HttpHost getHopTarget(int) -> a
    boolean isTunnelled() -> e
    boolean isLayered() -> f
    boolean isSecure() -> g
ch.boye.httpclientandroidlib.conn.routing.RouteInfo$LayerType -> a.a.a.d.b.f:
    ch.boye.httpclientandroidlib.conn.routing.RouteInfo$LayerType PLAIN -> a
    ch.boye.httpclientandroidlib.conn.routing.RouteInfo$LayerType LAYERED -> b
    ch.boye.httpclientandroidlib.conn.routing.RouteInfo$LayerType[] $VALUES -> c
    ch.boye.httpclientandroidlib.conn.routing.RouteInfo$LayerType[] values() -> values
    ch.boye.httpclientandroidlib.conn.routing.RouteInfo$LayerType valueOf(java.lang.String) -> valueOf
ch.boye.httpclientandroidlib.conn.routing.RouteInfo$TunnelType -> a.a.a.d.b.g:
    ch.boye.httpclientandroidlib.conn.routing.RouteInfo$TunnelType PLAIN -> a
    ch.boye.httpclientandroidlib.conn.routing.RouteInfo$TunnelType TUNNELLED -> b
    ch.boye.httpclientandroidlib.conn.routing.RouteInfo$TunnelType[] $VALUES -> c
    ch.boye.httpclientandroidlib.conn.routing.RouteInfo$TunnelType[] values() -> values
    ch.boye.httpclientandroidlib.conn.routing.RouteInfo$TunnelType valueOf(java.lang.String) -> valueOf
ch.boye.httpclientandroidlib.conn.routing.RouteTracker -> a.a.a.d.b.h:
    ch.boye.httpclientandroidlib.HttpHost targetHost -> a
    java.net.InetAddress localAddress -> b
    boolean connected -> c
    ch.boye.httpclientandroidlib.HttpHost[] proxyChain -> d
    ch.boye.httpclientandroidlib.conn.routing.RouteInfo$TunnelType tunnelled -> e
    ch.boye.httpclientandroidlib.conn.routing.RouteInfo$LayerType layered -> f
    boolean secure -> g
    void reset() -> d
    void connectTarget(boolean) -> a
    void connectProxy(ch.boye.httpclientandroidlib.HttpHost,boolean) -> a
    void tunnelTarget(boolean) -> b
    void tunnelProxy(ch.boye.httpclientandroidlib.HttpHost,boolean) -> b
    void layerProtocol(boolean) -> c
    ch.boye.httpclientandroidlib.HttpHost getTargetHost() -> a
    java.net.InetAddress getLocalAddress() -> b
    int getHopCount() -> c
    ch.boye.httpclientandroidlib.HttpHost getHopTarget(int) -> a
    boolean isConnected() -> h
    boolean isTunnelled() -> e
    boolean isLayered() -> f
    boolean isSecure() -> g
    ch.boye.httpclientandroidlib.conn.routing.HttpRoute toRoute() -> i
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
ch.boye.httpclientandroidlib.conn.scheme.HostNameResolver -> a.a.a.d.c.a:
    java.net.InetAddress resolve(java.lang.String) -> a
ch.boye.httpclientandroidlib.conn.scheme.LayeredSchemeSocketFactory -> a.a.a.d.c.b:
    java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,boolean) -> a
ch.boye.httpclientandroidlib.conn.scheme.LayeredSocketFactory -> a.a.a.d.c.c:
    java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean) -> b
ch.boye.httpclientandroidlib.conn.scheme.PlainSocketFactory -> a.a.a.d.c.d:
    ch.boye.httpclientandroidlib.conn.scheme.HostNameResolver nameResolver -> a
    ch.boye.httpclientandroidlib.conn.scheme.PlainSocketFactory getSocketFactory() -> a
    java.net.Socket createSocket(ch.boye.httpclientandroidlib.params.HttpParams) -> a
    java.net.Socket createSocket() -> b
    java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    boolean isSecure(java.net.Socket) -> a
    java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,ch.boye.httpclientandroidlib.params.HttpParams) -> a
ch.boye.httpclientandroidlib.conn.scheme.Scheme -> a.a.a.d.c.e:
    java.lang.String name -> a
    ch.boye.httpclientandroidlib.conn.scheme.SchemeSocketFactory socketFactory -> b
    int defaultPort -> c
    boolean layered -> d
    java.lang.String stringRep -> e
    int getDefaultPort() -> a
    ch.boye.httpclientandroidlib.conn.scheme.SchemeSocketFactory getSchemeSocketFactory() -> b
    java.lang.String getName() -> c
    boolean isLayered() -> d
    int resolvePort(int) -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
ch.boye.httpclientandroidlib.conn.scheme.SchemeLayeredSocketFactory -> a.a.a.d.c.f:
    java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,ch.boye.httpclientandroidlib.params.HttpParams) -> a
ch.boye.httpclientandroidlib.conn.scheme.SchemeLayeredSocketFactoryAdaptor -> a.a.a.d.c.g:
    ch.boye.httpclientandroidlib.conn.scheme.LayeredSocketFactory factory -> a
    java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,ch.boye.httpclientandroidlib.params.HttpParams) -> a
ch.boye.httpclientandroidlib.conn.scheme.SchemeLayeredSocketFactoryAdaptor2 -> a.a.a.d.c.h:
    ch.boye.httpclientandroidlib.conn.scheme.LayeredSchemeSocketFactory factory -> a
    java.net.Socket createSocket(ch.boye.httpclientandroidlib.params.HttpParams) -> a
    java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    boolean isSecure(java.net.Socket) -> a
    java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,ch.boye.httpclientandroidlib.params.HttpParams) -> a
ch.boye.httpclientandroidlib.conn.scheme.SchemeRegistry -> a.a.a.d.c.i:
    java.util.concurrent.ConcurrentHashMap registeredSchemes -> a
    ch.boye.httpclientandroidlib.conn.scheme.Scheme getScheme(java.lang.String) -> a
    ch.boye.httpclientandroidlib.conn.scheme.Scheme getScheme(ch.boye.httpclientandroidlib.HttpHost) -> a
    ch.boye.httpclientandroidlib.conn.scheme.Scheme get(java.lang.String) -> b
    ch.boye.httpclientandroidlib.conn.scheme.Scheme register(ch.boye.httpclientandroidlib.conn.scheme.Scheme) -> a
ch.boye.httpclientandroidlib.conn.scheme.SchemeSocketFactory -> a.a.a.d.c.j:
    java.net.Socket createSocket(ch.boye.httpclientandroidlib.params.HttpParams) -> a
    java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    boolean isSecure(java.net.Socket) -> a
ch.boye.httpclientandroidlib.conn.scheme.SchemeSocketFactoryAdaptor -> a.a.a.d.c.k:
    ch.boye.httpclientandroidlib.conn.scheme.SocketFactory factory -> a
    java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    java.net.Socket createSocket(ch.boye.httpclientandroidlib.params.HttpParams) -> a
    boolean isSecure(java.net.Socket) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
ch.boye.httpclientandroidlib.conn.scheme.SocketFactory -> a.a.a.d.c.l:
    java.net.Socket createSocket() -> b
    java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    boolean isSecure(java.net.Socket) -> a
ch.boye.httpclientandroidlib.conn.ssl.AbstractVerifier -> a.a.a.d.d.a:
    java.lang.String[] BAD_COUNTRY_2LDS -> a
    void verify(java.lang.String,javax.net.ssl.SSLSocket) -> a
    boolean verify(java.lang.String,javax.net.ssl.SSLSession) -> verify
    void verify(java.lang.String,java.security.cert.X509Certificate) -> a
    void verify(java.lang.String,java.lang.String[],java.lang.String[],boolean) -> a
    boolean acceptableCountryWildcard(java.lang.String) -> a
    java.lang.String[] getCNs(java.security.cert.X509Certificate) -> a
    java.lang.String[] getSubjectAlts(java.security.cert.X509Certificate,java.lang.String) -> a
    int countDots(java.lang.String) -> b
    boolean isIPAddress(java.lang.String) -> c
ch.boye.httpclientandroidlib.conn.ssl.AllowAllHostnameVerifier -> a.a.a.d.d.b:
    void verify(java.lang.String,java.lang.String[],java.lang.String[]) -> a
    java.lang.String toString() -> toString
ch.boye.httpclientandroidlib.conn.ssl.BrowserCompatHostnameVerifier -> a.a.a.d.d.c:
    void verify(java.lang.String,java.lang.String[],java.lang.String[]) -> a
    java.lang.String toString() -> toString
ch.boye.httpclientandroidlib.conn.ssl.SSLInitializationException -> a.a.a.d.d.d:
ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory -> a.a.a.d.d.e:
    ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier ALLOW_ALL_HOSTNAME_VERIFIER -> a
    ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER -> b
    ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier STRICT_HOSTNAME_VERIFIER -> c
    char[] EMPTY_PASSWORD -> d
    javax.net.ssl.SSLSocketFactory socketfactory -> e
    ch.boye.httpclientandroidlib.conn.scheme.HostNameResolver nameResolver -> f
    ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier hostnameVerifier -> g
    ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory getSocketFactory() -> a
    javax.net.ssl.SSLContext createSSLContext(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy) -> a
    javax.net.ssl.SSLContext createDefaultSSLContext() -> c
    java.net.Socket createSocket(ch.boye.httpclientandroidlib.params.HttpParams) -> a
    java.net.Socket createSocket() -> b
    java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    boolean isSecure(java.net.Socket) -> a
    java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,boolean) -> a
    void setHostnameVerifier(ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier) -> a
    java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean) -> b
    void prepareSocket(javax.net.ssl.SSLSocket) -> a
ch.boye.httpclientandroidlib.conn.ssl.StrictHostnameVerifier -> a.a.a.d.d.f:
    void verify(java.lang.String,java.lang.String[],java.lang.String[]) -> a
    java.lang.String toString() -> toString
ch.boye.httpclientandroidlib.conn.ssl.TrustManagerDecorator -> a.a.a.d.d.g:
    javax.net.ssl.X509TrustManager trustManager -> a
    ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy trustStrategy -> b
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy -> a.a.a.d.d.h:
    boolean isTrusted(java.security.cert.X509Certificate[],java.lang.String) -> a
ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier -> a.a.a.d.d.i:
    void verify(java.lang.String,javax.net.ssl.SSLSocket) -> a
    void verify(java.lang.String,java.lang.String[],java.lang.String[]) -> a
ch.boye.httpclientandroidlib.conn.util.InetAddressUtils -> a.a.a.d.e.a:
    java.util.regex.Pattern IPV4_PATTERN -> a
    java.util.regex.Pattern IPV6_STD_PATTERN -> b
    java.util.regex.Pattern IPV6_HEX_COMPRESSED_PATTERN -> c
    boolean isIPv4Address(java.lang.String) -> a
    boolean isIPv6StdAddress(java.lang.String) -> b
    boolean isIPv6HexCompressedAddress(java.lang.String) -> c
    boolean isIPv6Address(java.lang.String) -> d
ch.boye.httpclientandroidlib.cookie.ClientCookie -> a.a.a.e.a:
    java.lang.String getAttribute(java.lang.String) -> a
    boolean containsAttribute(java.lang.String) -> b
ch.boye.httpclientandroidlib.cookie.Cookie -> a.a.a.e.b:
    java.lang.String getName() -> a
    java.lang.String getValue() -> b
    java.lang.String getDomain() -> c
    java.lang.String getPath() -> d
    int[] getPorts() -> e
    boolean isSecure() -> f
    int getVersion() -> g
    boolean isExpired(java.util.Date) -> a
ch.boye.httpclientandroidlib.cookie.CookieAttributeHandler -> a.a.a.e.c:
    void parse(ch.boye.httpclientandroidlib.cookie.SetCookie,java.lang.String) -> a
    void validate(ch.boye.httpclientandroidlib.cookie.Cookie,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> a
    boolean match(ch.boye.httpclientandroidlib.cookie.Cookie,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> b
ch.boye.httpclientandroidlib.cookie.CookieIdentityComparator -> a.a.a.e.d:
    int compare(ch.boye.httpclientandroidlib.cookie.Cookie,ch.boye.httpclientandroidlib.cookie.Cookie) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
ch.boye.httpclientandroidlib.cookie.CookieOrigin -> a.a.a.e.e:
    java.lang.String host -> a
    int port -> b
    java.lang.String path -> c
    boolean secure -> d
    java.lang.String getHost() -> a
    java.lang.String getPath() -> b
    int getPort() -> c
    boolean isSecure() -> d
    java.lang.String toString() -> toString
ch.boye.httpclientandroidlib.cookie.CookiePathComparator -> a.a.a.e.f:
    java.lang.String normalizePath(ch.boye.httpclientandroidlib.cookie.Cookie) -> a
    int compare(ch.boye.httpclientandroidlib.cookie.Cookie,ch.boye.httpclientandroidlib.cookie.Cookie) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
ch.boye.httpclientandroidlib.cookie.CookieRestrictionViolationException -> a.a.a.e.g:
ch.boye.httpclientandroidlib.cookie.CookieSpec -> a.a.a.e.h:
    int getVersion() -> a
    java.util.List parse(ch.boye.httpclientandroidlib.Header,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> a
    void validate(ch.boye.httpclientandroidlib.cookie.Cookie,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> a
    boolean match(ch.boye.httpclientandroidlib.cookie.Cookie,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> b
    java.util.List formatCookies(java.util.List) -> a
    ch.boye.httpclientandroidlib.Header getVersionHeader() -> b
ch.boye.httpclientandroidlib.cookie.CookieSpecFactory -> a.a.a.e.i:
    ch.boye.httpclientandroidlib.cookie.CookieSpec newInstance(ch.boye.httpclientandroidlib.params.HttpParams) -> a
ch.boye.httpclientandroidlib.cookie.CookieSpecRegistry -> a.a.a.e.j:
    java.util.concurrent.ConcurrentHashMap registeredSpecs -> a
    void register(java.lang.String,ch.boye.httpclientandroidlib.cookie.CookieSpecFactory) -> a
    ch.boye.httpclientandroidlib.cookie.CookieSpec getCookieSpec(java.lang.String,ch.boye.httpclientandroidlib.params.HttpParams) -> a
ch.boye.httpclientandroidlib.cookie.MalformedCookieException -> a.a.a.e.k:
ch.boye.httpclientandroidlib.cookie.SetCookie -> a.a.a.e.l:
    void setComment(java.lang.String) -> c
    void setExpiryDate(java.util.Date) -> b
    void setDomain(java.lang.String) -> d
    void setPath(java.lang.String) -> e
    void setSecure(boolean) -> a
    void setVersion(int) -> a
ch.boye.httpclientandroidlib.cookie.SetCookie2 -> a.a.a.e.m:
    void setCommentURL(java.lang.String) -> a_
    void setPorts(int[]) -> a
    void setDiscard(boolean) -> b
ch.boye.httpclientandroidlib.entity.AbstractHttpEntity -> a.a.a.f.a:
    ch.boye.httpclientandroidlib.Header contentType -> a
    ch.boye.httpclientandroidlib.Header contentEncoding -> b
    boolean chunked -> c
    ch.boye.httpclientandroidlib.Header getContentType() -> d
    ch.boye.httpclientandroidlib.Header getContentEncoding() -> e
    boolean isChunked() -> b
    void setContentType(ch.boye.httpclientandroidlib.Header) -> a
    void setContentType(java.lang.String) -> a
    void setContentEncoding(ch.boye.httpclientandroidlib.Header) -> b
    void setChunked(boolean) -> a
    void consumeContent() -> h
ch.boye.httpclientandroidlib.entity.BasicHttpEntity -> a.a.a.f.b:
    java.io.InputStream content -> d
    long length -> e
    long getContentLength() -> c
    java.io.InputStream getContent() -> f
    boolean isRepeatable() -> a
    void setContentLength(long) -> a
    void setContent(java.io.InputStream) -> a
    void writeTo(java.io.OutputStream) -> a
    boolean isStreaming() -> g
    void consumeContent() -> h
ch.boye.httpclientandroidlib.entity.BufferedHttpEntity -> a.a.a.f.c:
    byte[] buffer -> a
    long getContentLength() -> c
    java.io.InputStream getContent() -> f
    boolean isChunked() -> b
    boolean isRepeatable() -> a
    void writeTo(java.io.OutputStream) -> a
    boolean isStreaming() -> g
ch.boye.httpclientandroidlib.entity.ByteArrayEntity -> a.a.a.f.d:
    byte[] content -> d
    byte[] b -> e
    int off -> f
    int len -> g
    boolean isRepeatable() -> a
    long getContentLength() -> c
    java.io.InputStream getContent() -> f
    void writeTo(java.io.OutputStream) -> a
    boolean isStreaming() -> g
    java.lang.Object clone() -> clone
ch.boye.httpclientandroidlib.entity.ContentLengthStrategy -> a.a.a.f.e:
    long determineLength(ch.boye.httpclientandroidlib.HttpMessage) -> a
ch.boye.httpclientandroidlib.entity.ContentType -> a.a.a.f.f:
    ch.boye.httpclientandroidlib.entity.ContentType APPLICATION_ATOM_XML -> a
    ch.boye.httpclientandroidlib.entity.ContentType APPLICATION_FORM_URLENCODED -> b
    ch.boye.httpclientandroidlib.entity.ContentType APPLICATION_JSON -> c
    ch.boye.httpclientandroidlib.entity.ContentType APPLICATION_OCTET_STREAM -> d
    ch.boye.httpclientandroidlib.entity.ContentType APPLICATION_SVG_XML -> e
    ch.boye.httpclientandroidlib.entity.ContentType APPLICATION_XHTML_XML -> f
    ch.boye.httpclientandroidlib.entity.ContentType APPLICATION_XML -> g
    ch.boye.httpclientandroidlib.entity.ContentType MULTIPART_FORM_DATA -> h
    ch.boye.httpclientandroidlib.entity.ContentType TEXT_HTML -> i
    ch.boye.httpclientandroidlib.entity.ContentType TEXT_PLAIN -> j
    ch.boye.httpclientandroidlib.entity.ContentType TEXT_XML -> k
    ch.boye.httpclientandroidlib.entity.ContentType WILDCARD -> l
    ch.boye.httpclientandroidlib.entity.ContentType DEFAULT_TEXT -> m
    ch.boye.httpclientandroidlib.entity.ContentType DEFAULT_BINARY -> n
    java.lang.String mimeType -> o
    java.nio.charset.Charset charset -> p
    java.lang.String getMimeType() -> a
    java.nio.charset.Charset getCharset() -> b
    java.lang.String toString() -> toString
    boolean valid(java.lang.String) -> a
    ch.boye.httpclientandroidlib.entity.ContentType create(java.lang.String,java.nio.charset.Charset) -> a
    ch.boye.httpclientandroidlib.entity.ContentType create(java.lang.String,java.lang.String) -> a
ch.boye.httpclientandroidlib.entity.HttpEntityWrapper -> a.a.a.f.g:
    ch.boye.httpclientandroidlib.HttpEntity wrappedEntity -> c
    boolean isRepeatable() -> a
    boolean isChunked() -> b
    long getContentLength() -> c
    ch.boye.httpclientandroidlib.Header getContentType() -> d
    ch.boye.httpclientandroidlib.Header getContentEncoding() -> e
    java.io.InputStream getContent() -> f
    void writeTo(java.io.OutputStream) -> a
    boolean isStreaming() -> g
    void consumeContent() -> h
ch.boye.httpclientandroidlib.entity.InputStreamEntity -> a.a.a.f.h:
    java.io.InputStream content -> d
    long length -> e
    boolean isRepeatable() -> a
    long getContentLength() -> c
    java.io.InputStream getContent() -> f
    void writeTo(java.io.OutputStream) -> a
    boolean isStreaming() -> g
    void consumeContent() -> h
ch.boye.httpclientandroidlib.entity.StringEntity -> a.a.a.f.i:
    byte[] content -> d
    boolean isRepeatable() -> a
    long getContentLength() -> c
    java.io.InputStream getContent() -> f
    void writeTo(java.io.OutputStream) -> a
    boolean isStreaming() -> g
    java.lang.Object clone() -> clone
ch.boye.httpclientandroidlib.impl.AbstractHttpClientConnection -> a.a.a.g.a:
    ch.boye.httpclientandroidlib.impl.entity.EntitySerializer entityserializer -> a
    ch.boye.httpclientandroidlib.impl.entity.EntityDeserializer entitydeserializer -> b
    ch.boye.httpclientandroidlib.io.SessionInputBuffer inbuffer -> c
    ch.boye.httpclientandroidlib.io.SessionOutputBuffer outbuffer -> d
    ch.boye.httpclientandroidlib.io.EofSensor eofSensor -> e
    ch.boye.httpclientandroidlib.io.HttpMessageParser responseParser -> f
    ch.boye.httpclientandroidlib.io.HttpMessageWriter requestWriter -> g
    ch.boye.httpclientandroidlib.impl.HttpConnectionMetricsImpl metrics -> h
    void assertOpen() -> j
    ch.boye.httpclientandroidlib.impl.entity.EntityDeserializer createEntityDeserializer() -> k
    ch.boye.httpclientandroidlib.impl.entity.EntitySerializer createEntitySerializer() -> l
    ch.boye.httpclientandroidlib.HttpResponseFactory createHttpResponseFactory() -> m
    ch.boye.httpclientandroidlib.io.HttpMessageParser createResponseParser(ch.boye.httpclientandroidlib.io.SessionInputBuffer,ch.boye.httpclientandroidlib.HttpResponseFactory,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    ch.boye.httpclientandroidlib.io.HttpMessageWriter createRequestWriter(ch.boye.httpclientandroidlib.io.SessionOutputBuffer,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    ch.boye.httpclientandroidlib.impl.HttpConnectionMetricsImpl createConnectionMetrics(ch.boye.httpclientandroidlib.io.HttpTransportMetrics,ch.boye.httpclientandroidlib.io.HttpTransportMetrics) -> a
    void init(ch.boye.httpclientandroidlib.io.SessionInputBuffer,ch.boye.httpclientandroidlib.io.SessionOutputBuffer,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    boolean isResponseAvailable(int) -> a
    void sendRequestHeader(ch.boye.httpclientandroidlib.HttpRequest) -> a
    void sendRequestEntity(ch.boye.httpclientandroidlib.HttpEntityEnclosingRequest) -> a
    void doFlush() -> n
    void flush() -> b
    ch.boye.httpclientandroidlib.HttpResponse receiveResponseHeader() -> a
    void receiveResponseEntity(ch.boye.httpclientandroidlib.HttpResponse) -> a
    boolean isEof() -> o
    boolean isStale() -> d
ch.boye.httpclientandroidlib.impl.DefaultConnectionReuseStrategy -> a.a.a.g.b:
    boolean keepAlive(ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    ch.boye.httpclientandroidlib.TokenIterator createTokenIterator(ch.boye.httpclientandroidlib.HeaderIterator) -> a
ch.boye.httpclientandroidlib.impl.DefaultHttpResponseFactory -> a.a.a.g.c:
    ch.boye.httpclientandroidlib.ReasonPhraseCatalog reasonCatalog -> a
    ch.boye.httpclientandroidlib.HttpResponse newHttpResponse(ch.boye.httpclientandroidlib.StatusLine,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    java.util.Locale determineLocale(ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
ch.boye.httpclientandroidlib.impl.EnglishReasonPhraseCatalog -> a.a.a.g.d:
    ch.boye.httpclientandroidlib.impl.EnglishReasonPhraseCatalog INSTANCE -> a
    java.lang.String[][] REASON_PHRASES -> b
    void setReason(int,java.lang.String) -> a
ch.boye.httpclientandroidlib.impl.HttpConnectionMetricsImpl -> a.a.a.g.e:
    ch.boye.httpclientandroidlib.io.HttpTransportMetrics inTransportMetric -> a
    ch.boye.httpclientandroidlib.io.HttpTransportMetrics outTransportMetric -> b
    long requestCount -> c
    long responseCount -> d
    void incrementRequestCount() -> a
    void incrementResponseCount() -> b
ch.boye.httpclientandroidlib.impl.SocketHttpClientConnection -> a.a.a.g.f:
    boolean open -> a
    java.net.Socket socket -> b
    void assertNotOpen() -> p
    void assertOpen() -> j
    ch.boye.httpclientandroidlib.io.SessionInputBuffer createSessionInputBuffer(java.net.Socket,int,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    ch.boye.httpclientandroidlib.io.SessionOutputBuffer createSessionOutputBuffer(java.net.Socket,int,ch.boye.httpclientandroidlib.params.HttpParams) -> b
    void bind(java.net.Socket,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    boolean isOpen() -> c
    java.net.Socket getSocket() -> i
    java.net.InetAddress getRemoteAddress() -> f
    int getRemotePort() -> g
    void setSocketTimeout(int) -> b
    void shutdown() -> e
    void close() -> close
    void formatAddress(java.lang.StringBuilder,java.net.SocketAddress) -> a
    java.lang.String toString() -> toString
ch.boye.httpclientandroidlib.impl.auth.AuthSchemeBase -> a.a.a.g.a.a:
    ch.boye.httpclientandroidlib.auth.ChallengeState challengeState -> a
    void processChallenge(ch.boye.httpclientandroidlib.Header) -> a
    ch.boye.httpclientandroidlib.Header authenticate(ch.boye.httpclientandroidlib.auth.Credentials,ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    void parseChallenge(ch.boye.httpclientandroidlib.util.CharArrayBuffer,int,int) -> a
    boolean isProxy() -> e
    java.lang.String toString() -> toString
ch.boye.httpclientandroidlib.impl.auth.BasicScheme -> a.a.a.g.a.b:
    boolean complete -> a
    java.lang.String getSchemeName() -> a
    void processChallenge(ch.boye.httpclientandroidlib.Header) -> a
    boolean isComplete() -> d
    boolean isConnectionBased() -> c
    ch.boye.httpclientandroidlib.Header authenticate(ch.boye.httpclientandroidlib.auth.Credentials,ch.boye.httpclientandroidlib.HttpRequest) -> a
    ch.boye.httpclientandroidlib.Header authenticate(ch.boye.httpclientandroidlib.auth.Credentials,ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    ch.boye.httpclientandroidlib.Header authenticate(ch.boye.httpclientandroidlib.auth.Credentials,java.lang.String,boolean) -> a
ch.boye.httpclientandroidlib.impl.auth.BasicSchemeFactory -> a.a.a.g.a.c:
    ch.boye.httpclientandroidlib.auth.AuthScheme newInstance(ch.boye.httpclientandroidlib.params.HttpParams) -> a
ch.boye.httpclientandroidlib.impl.auth.DigestScheme -> a.a.a.g.a.d:
    char[] HEXADECIMAL -> a
    boolean complete -> b
    java.lang.String lastNonce -> c
    long nounceCount -> d
    java.lang.String cnonce -> e
    java.lang.String a1 -> f
    java.lang.String a2 -> g
    void processChallenge(ch.boye.httpclientandroidlib.Header) -> a
    boolean isComplete() -> d
    java.lang.String getSchemeName() -> a
    boolean isConnectionBased() -> c
    ch.boye.httpclientandroidlib.Header authenticate(ch.boye.httpclientandroidlib.auth.Credentials,ch.boye.httpclientandroidlib.HttpRequest) -> a
    ch.boye.httpclientandroidlib.Header authenticate(ch.boye.httpclientandroidlib.auth.Credentials,ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    java.security.MessageDigest createMessageDigest(java.lang.String) -> b
    ch.boye.httpclientandroidlib.Header createDigestHeader(ch.boye.httpclientandroidlib.auth.Credentials,ch.boye.httpclientandroidlib.HttpRequest) -> b
    java.lang.String encode(byte[]) -> a
    java.lang.String createCnonce() -> f
ch.boye.httpclientandroidlib.impl.auth.DigestSchemeFactory -> a.a.a.g.a.e:
    ch.boye.httpclientandroidlib.auth.AuthScheme newInstance(ch.boye.httpclientandroidlib.params.HttpParams) -> a
ch.boye.httpclientandroidlib.impl.auth.HttpEntityDigester -> a.a.a.g.a.f:
    java.security.MessageDigest digester -> a
    boolean closed -> b
    byte[] digest -> c
    void write(int) -> write
    void write(byte[],int,int) -> write
    void close() -> close
    byte[] getDigest() -> a
ch.boye.httpclientandroidlib.impl.auth.NTLMEngine -> a.a.a.g.a.g:
    java.lang.String generateType1Msg(java.lang.String,java.lang.String) -> a
    java.lang.String generateType3Msg(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
ch.boye.httpclientandroidlib.impl.auth.NTLMEngineException -> a.a.a.g.a.h:
ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl -> a.a.a.g.a.i:
    java.security.SecureRandom RND_GEN -> a
    java.lang.String credentialCharset -> b
    byte[] SIGNATURE -> c
    java.lang.String getType1Message(java.lang.String,java.lang.String) -> b
    java.lang.String getType3Message(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[]) -> a
    java.lang.String stripDotSuffix(java.lang.String) -> c
    java.lang.String convertHost(java.lang.String) -> d
    java.lang.String convertDomain(java.lang.String) -> e
    int readULong(byte[],int) -> c
    int readUShort(byte[],int) -> d
    byte[] readSecurityBuffer(byte[],int) -> e
    byte[] makeRandomChallenge() -> d
    byte[] makeNTLM2RandomChallenge() -> e
    byte[] getLMResponse(java.lang.String,byte[]) -> a
    byte[] getNTLMResponse(java.lang.String,byte[]) -> b
    byte[] getNTLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[],byte[]) -> a
    byte[] getLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[]) -> a
    byte[] getNTLM2SessionResponse(java.lang.String,byte[],byte[]) -> a
    byte[] lmHash(java.lang.String) -> f
    byte[] ntlmHash(java.lang.String) -> g
    byte[] ntlmv2Hash(java.lang.String,java.lang.String,java.lang.String) -> a
    byte[] lmResponse(byte[],byte[]) -> a
    byte[] lmv2Response(byte[],byte[],byte[]) -> a
    byte[] createBlob(byte[],byte[]) -> b
    java.security.Key createDESKey(byte[],int) -> f
    void oddParity(byte[]) -> a
    void writeULong(byte[],int,int) -> a
    int F(int,int,int) -> a
    int G(int,int,int) -> b
    int H(int,int,int) -> c
    int rotintlft(int,int) -> a
    java.lang.String generateType1Msg(java.lang.String,java.lang.String) -> a
    java.lang.String generateType3Msg(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    byte[] access$000() -> a
    int access$200(byte[],int) -> a
    byte[] access$300(byte[],int) -> b
    java.lang.String access$400(java.lang.String) -> a
    java.lang.String access$500(java.lang.String) -> b
    byte[] access$600() -> b
    byte[] access$700() -> c
ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$HMACMD5 -> a.a.a.g.a.j:
    byte[] ipad -> a
    byte[] opad -> b
    java.security.MessageDigest md5 -> c
    byte[] getOutput() -> a
    void update(byte[]) -> a
ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$MD4 -> a.a.a.g.a.k:
    int A -> a
    int B -> b
    int C -> c
    int D -> d
    long count -> e
    byte[] dataBuffer -> f
    void update(byte[]) -> a
    byte[] getOutput() -> a
    void processBuffer() -> b
    void round1(int[]) -> a
    void round2(int[]) -> b
    void round3(int[]) -> c
ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$NTLMMessage -> a.a.a.g.a.l:
    byte[] messageContents -> a
    int currentOutputPosition -> b
    int getMessageLength() -> a
    void readBytes(byte[],int) -> a
    int readULong(int) -> a
    byte[] readSecurityBuffer(int) -> b
    void prepareResponse(int,int) -> a
    void addByte(byte) -> a
    void addBytes(byte[]) -> a
    void addUShort(int) -> c
    void addULong(int) -> d
    java.lang.String getResponse() -> b
ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$Type1Message -> a.a.a.g.a.m:
    byte[] hostBytes -> a
    byte[] domainBytes -> b
    java.lang.String getResponse() -> b
ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$Type2Message -> a.a.a.g.a.n:
    byte[] challenge -> a
    java.lang.String target -> b
    byte[] targetInfo -> c
    int flags -> d
    byte[] getChallenge() -> c
    java.lang.String getTarget() -> d
    byte[] getTargetInfo() -> e
    int getFlags() -> f
ch.boye.httpclientandroidlib.impl.auth.NTLMEngineImpl$Type3Message -> a.a.a.g.a.o:
    int type2Flags -> a
    byte[] domainBytes -> b
    byte[] hostBytes -> c
    byte[] userBytes -> d
    byte[] lmResp -> e
    byte[] ntResp -> f
    java.lang.String getResponse() -> b
ch.boye.httpclientandroidlib.impl.auth.NTLMScheme -> a.a.a.g.a.p:
    ch.boye.httpclientandroidlib.impl.auth.NTLMEngine engine -> a
    ch.boye.httpclientandroidlib.impl.auth.NTLMScheme$State state -> b
    java.lang.String challenge -> c
    java.lang.String getSchemeName() -> a
    java.lang.String getRealm() -> b
    boolean isConnectionBased() -> c
    void parseChallenge(ch.boye.httpclientandroidlib.util.CharArrayBuffer,int,int) -> a
    ch.boye.httpclientandroidlib.Header authenticate(ch.boye.httpclientandroidlib.auth.Credentials,ch.boye.httpclientandroidlib.HttpRequest) -> a
    boolean isComplete() -> d
ch.boye.httpclientandroidlib.impl.auth.NTLMScheme$State -> a.a.a.g.a.q:
    ch.boye.httpclientandroidlib.impl.auth.NTLMScheme$State UNINITIATED -> a
    ch.boye.httpclientandroidlib.impl.auth.NTLMScheme$State CHALLENGE_RECEIVED -> b
    ch.boye.httpclientandroidlib.impl.auth.NTLMScheme$State MSG_TYPE1_GENERATED -> c
    ch.boye.httpclientandroidlib.impl.auth.NTLMScheme$State MSG_TYPE2_RECEVIED -> d
    ch.boye.httpclientandroidlib.impl.auth.NTLMScheme$State MSG_TYPE3_GENERATED -> e
    ch.boye.httpclientandroidlib.impl.auth.NTLMScheme$State FAILED -> f
    ch.boye.httpclientandroidlib.impl.auth.NTLMScheme$State[] $VALUES -> g
    ch.boye.httpclientandroidlib.impl.auth.NTLMScheme$State[] values() -> values
    ch.boye.httpclientandroidlib.impl.auth.NTLMScheme$State valueOf(java.lang.String) -> valueOf
ch.boye.httpclientandroidlib.impl.auth.NTLMSchemeFactory -> a.a.a.g.a.r:
    ch.boye.httpclientandroidlib.auth.AuthScheme newInstance(ch.boye.httpclientandroidlib.params.HttpParams) -> a
ch.boye.httpclientandroidlib.impl.auth.RFC2617Scheme -> a.a.a.g.a.s:
    java.util.Map params -> a
    void parseChallenge(ch.boye.httpclientandroidlib.util.CharArrayBuffer,int,int) -> a
    java.util.Map getParameters() -> g
    java.lang.String getParameter(java.lang.String) -> a
    java.lang.String getRealm() -> b
ch.boye.httpclientandroidlib.impl.auth.UnsupportedDigestAlgorithmException -> a.a.a.g.a.t:
ch.boye.httpclientandroidlib.impl.client.AbstractHttpClient -> a.a.a.g.b.a:
    ch.boye.httpclientandroidlib.androidextra.HttpClientAndroidLog log -> a
    ch.boye.httpclientandroidlib.params.HttpParams defaultParams -> b
    ch.boye.httpclientandroidlib.protocol.HttpRequestExecutor requestExec -> c
    ch.boye.httpclientandroidlib.conn.ClientConnectionManager connManager -> d
    ch.boye.httpclientandroidlib.ConnectionReuseStrategy reuseStrategy -> e
    ch.boye.httpclientandroidlib.conn.ConnectionKeepAliveStrategy keepAliveStrategy -> f
    ch.boye.httpclientandroidlib.cookie.CookieSpecRegistry supportedCookieSpecs -> g
    ch.boye.httpclientandroidlib.auth.AuthSchemeRegistry supportedAuthSchemes -> h
    ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor mutableProcessor -> i
    ch.boye.httpclientandroidlib.protocol.ImmutableHttpProcessor protocolProcessor -> j
    ch.boye.httpclientandroidlib.client.HttpRequestRetryHandler retryHandler -> k
    ch.boye.httpclientandroidlib.client.RedirectStrategy redirectStrategy -> l
    ch.boye.httpclientandroidlib.client.AuthenticationStrategy targetAuthStrategy -> m
    ch.boye.httpclientandroidlib.client.AuthenticationStrategy proxyAuthStrategy -> n
    ch.boye.httpclientandroidlib.client.CookieStore cookieStore -> o
    ch.boye.httpclientandroidlib.client.CredentialsProvider credsProvider -> p
    ch.boye.httpclientandroidlib.conn.routing.HttpRoutePlanner routePlanner -> q
    ch.boye.httpclientandroidlib.client.UserTokenHandler userTokenHandler -> r
    ch.boye.httpclientandroidlib.client.ConnectionBackoffStrategy connectionBackoffStrategy -> s
    ch.boye.httpclientandroidlib.client.BackoffManager backoffManager -> t
    ch.boye.httpclientandroidlib.params.HttpParams createHttpParams() -> c
    ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor createHttpProcessor() -> d
    ch.boye.httpclientandroidlib.protocol.HttpContext createHttpContext() -> e
    ch.boye.httpclientandroidlib.conn.ClientConnectionManager createClientConnectionManager() -> f
    ch.boye.httpclientandroidlib.auth.AuthSchemeRegistry createAuthSchemeRegistry() -> g
    ch.boye.httpclientandroidlib.cookie.CookieSpecRegistry createCookieSpecRegistry() -> h
    ch.boye.httpclientandroidlib.protocol.HttpRequestExecutor createRequestExecutor() -> i
    ch.boye.httpclientandroidlib.ConnectionReuseStrategy createConnectionReuseStrategy() -> j
    ch.boye.httpclientandroidlib.conn.ConnectionKeepAliveStrategy createConnectionKeepAliveStrategy() -> k
    ch.boye.httpclientandroidlib.client.HttpRequestRetryHandler createHttpRequestRetryHandler() -> l
    ch.boye.httpclientandroidlib.client.AuthenticationStrategy createTargetAuthenticationStrategy() -> m
    ch.boye.httpclientandroidlib.client.AuthenticationStrategy createProxyAuthenticationStrategy() -> n
    ch.boye.httpclientandroidlib.client.CookieStore createCookieStore() -> o
    ch.boye.httpclientandroidlib.client.CredentialsProvider createCredentialsProvider() -> p
    ch.boye.httpclientandroidlib.conn.routing.HttpRoutePlanner createHttpRoutePlanner() -> q
    ch.boye.httpclientandroidlib.client.UserTokenHandler createUserTokenHandler() -> r
    ch.boye.httpclientandroidlib.params.HttpParams getParams() -> a
    ch.boye.httpclientandroidlib.conn.ClientConnectionManager getConnectionManager() -> b
    ch.boye.httpclientandroidlib.protocol.HttpRequestExecutor getRequestExecutor() -> s
    ch.boye.httpclientandroidlib.auth.AuthSchemeRegistry getAuthSchemes() -> t
    ch.boye.httpclientandroidlib.client.ConnectionBackoffStrategy getConnectionBackoffStrategy() -> u
    ch.boye.httpclientandroidlib.cookie.CookieSpecRegistry getCookieSpecs() -> v
    ch.boye.httpclientandroidlib.client.BackoffManager getBackoffManager() -> w
    ch.boye.httpclientandroidlib.ConnectionReuseStrategy getConnectionReuseStrategy() -> x
    ch.boye.httpclientandroidlib.conn.ConnectionKeepAliveStrategy getConnectionKeepAliveStrategy() -> y
    ch.boye.httpclientandroidlib.client.HttpRequestRetryHandler getHttpRequestRetryHandler() -> z
    ch.boye.httpclientandroidlib.client.RedirectStrategy getRedirectStrategy() -> A
    ch.boye.httpclientandroidlib.client.AuthenticationStrategy getTargetAuthenticationStrategy() -> B
    ch.boye.httpclientandroidlib.client.AuthenticationStrategy getProxyAuthenticationStrategy() -> C
    ch.boye.httpclientandroidlib.client.CookieStore getCookieStore() -> D
    ch.boye.httpclientandroidlib.client.CredentialsProvider getCredentialsProvider() -> E
    ch.boye.httpclientandroidlib.conn.routing.HttpRoutePlanner getRoutePlanner() -> F
    void setRoutePlanner(ch.boye.httpclientandroidlib.conn.routing.HttpRoutePlanner) -> a
    ch.boye.httpclientandroidlib.client.UserTokenHandler getUserTokenHandler() -> G
    ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor getHttpProcessor() -> H
    ch.boye.httpclientandroidlib.protocol.HttpProcessor getProtocolProcessor() -> I
    ch.boye.httpclientandroidlib.HttpResponse execute(ch.boye.httpclientandroidlib.client.methods.HttpUriRequest,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    ch.boye.httpclientandroidlib.HttpHost determineTarget(ch.boye.httpclientandroidlib.client.methods.HttpUriRequest) -> a
    ch.boye.httpclientandroidlib.HttpResponse execute(ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    ch.boye.httpclientandroidlib.client.RequestDirector createClientRequestDirector(ch.boye.httpclientandroidlib.protocol.HttpRequestExecutor,ch.boye.httpclientandroidlib.conn.ClientConnectionManager,ch.boye.httpclientandroidlib.ConnectionReuseStrategy,ch.boye.httpclientandroidlib.conn.ConnectionKeepAliveStrategy,ch.boye.httpclientandroidlib.conn.routing.HttpRoutePlanner,ch.boye.httpclientandroidlib.protocol.HttpProcessor,ch.boye.httpclientandroidlib.client.HttpRequestRetryHandler,ch.boye.httpclientandroidlib.client.RedirectStrategy,ch.boye.httpclientandroidlib.client.AuthenticationStrategy,ch.boye.httpclientandroidlib.client.AuthenticationStrategy,ch.boye.httpclientandroidlib.client.UserTokenHandler,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    ch.boye.httpclientandroidlib.params.HttpParams determineParams(ch.boye.httpclientandroidlib.HttpRequest) -> a
    java.lang.Object execute(ch.boye.httpclientandroidlib.client.methods.HttpUriRequest,ch.boye.httpclientandroidlib.client.ResponseHandler,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    java.lang.Object execute(ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.client.ResponseHandler,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
ch.boye.httpclientandroidlib.impl.client.AuthenticationStrategyAdaptor -> a.a.a.g.b.b:
    ch.boye.httpclientandroidlib.androidextra.HttpClientAndroidLog log -> a
    ch.boye.httpclientandroidlib.client.AuthenticationHandler handler -> b
    boolean isAuthenticationRequested(ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    java.util.Map getChallenges(ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext) -> b
    java.util.Queue select(java.util.Map,ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    void authSucceeded(ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.auth.AuthScheme,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    void authFailed(ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.auth.AuthScheme,ch.boye.httpclientandroidlib.protocol.HttpContext) -> b
    boolean isCachable(ch.boye.httpclientandroidlib.auth.AuthScheme) -> a
    ch.boye.httpclientandroidlib.client.AuthenticationHandler getHandler() -> a
ch.boye.httpclientandroidlib.impl.client.AuthenticationStrategyImpl -> a.a.a.g.b.c:
    ch.boye.httpclientandroidlib.androidextra.HttpClientAndroidLog log -> a
    java.util.List DEFAULT_SCHEME_PRIORITY -> b
    int challengeCode -> c
    java.lang.String headerName -> d
    java.lang.String prefParamName -> e
    boolean isAuthenticationRequested(ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    java.util.Map getChallenges(ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext) -> b
    java.util.Queue select(java.util.Map,ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    void authSucceeded(ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.auth.AuthScheme,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    boolean isCachable(ch.boye.httpclientandroidlib.auth.AuthScheme) -> a
    void authFailed(ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.auth.AuthScheme,ch.boye.httpclientandroidlib.protocol.HttpContext) -> b
ch.boye.httpclientandroidlib.impl.client.BasicAuthCache -> a.a.a.g.b.d:
    java.util.HashMap map -> a
    void put(ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.auth.AuthScheme) -> a
    ch.boye.httpclientandroidlib.auth.AuthScheme get(ch.boye.httpclientandroidlib.HttpHost) -> a
    void remove(ch.boye.httpclientandroidlib.HttpHost) -> b
    java.lang.String toString() -> toString
ch.boye.httpclientandroidlib.impl.client.BasicCookieStore -> a.a.a.g.b.e:
    java.util.TreeSet cookies -> a
    void addCookie(ch.boye.httpclientandroidlib.cookie.Cookie) -> a
    java.util.List getCookies() -> a
    java.lang.String toString() -> toString
ch.boye.httpclientandroidlib.impl.client.BasicCredentialsProvider -> a.a.a.g.b.f:
    java.util.concurrent.ConcurrentHashMap credMap -> a
    void setCredentials(ch.boye.httpclientandroidlib.auth.AuthScope,ch.boye.httpclientandroidlib.auth.Credentials) -> a
    ch.boye.httpclientandroidlib.auth.Credentials matchCredentials(java.util.Map,ch.boye.httpclientandroidlib.auth.AuthScope) -> a
    ch.boye.httpclientandroidlib.auth.Credentials getCredentials(ch.boye.httpclientandroidlib.auth.AuthScope) -> a
    java.lang.String toString() -> toString
ch.boye.httpclientandroidlib.impl.client.ClientParamsStack -> a.a.a.g.b.g:
    ch.boye.httpclientandroidlib.params.HttpParams applicationParams -> a
    ch.boye.httpclientandroidlib.params.HttpParams clientParams -> b
    ch.boye.httpclientandroidlib.params.HttpParams requestParams -> c
    ch.boye.httpclientandroidlib.params.HttpParams overrideParams -> d
    java.lang.Object getParameter(java.lang.String) -> a
    ch.boye.httpclientandroidlib.params.HttpParams setParameter(java.lang.String,java.lang.Object) -> a
ch.boye.httpclientandroidlib.impl.client.DefaultConnectionKeepAliveStrategy -> a.a.a.g.b.h:
    long getKeepAliveDuration(ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
ch.boye.httpclientandroidlib.impl.client.DefaultHttpClient -> a.a.a.g.b.i:
    ch.boye.httpclientandroidlib.params.HttpParams createHttpParams() -> c
    void setDefaultHttpParams(ch.boye.httpclientandroidlib.params.HttpParams) -> a
    ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor createHttpProcessor() -> d
ch.boye.httpclientandroidlib.impl.client.DefaultHttpRequestRetryHandler -> a.a.a.g.b.j:
    int retryCount -> a
    boolean requestSentRetryEnabled -> b
    boolean retryRequest(java.io.IOException,int,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    boolean handleAsIdempotent(ch.boye.httpclientandroidlib.HttpRequest) -> a
    boolean requestIsAborted(ch.boye.httpclientandroidlib.HttpRequest) -> b
ch.boye.httpclientandroidlib.impl.client.DefaultRedirectStrategy -> a.a.a.g.b.k:
    ch.boye.httpclientandroidlib.androidextra.HttpClientAndroidLog log -> a
    java.lang.String[] REDIRECT_METHODS -> b
    boolean isRedirected(ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    java.net.URI getLocationURI(ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext) -> c
    java.net.URI createLocationURI(java.lang.String) -> a
    boolean isRedirectable(java.lang.String) -> b
    ch.boye.httpclientandroidlib.client.methods.HttpUriRequest getRedirect(ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext) -> b
ch.boye.httpclientandroidlib.impl.client.DefaultRedirectStrategyAdaptor -> a.a.a.g.b.l:
    ch.boye.httpclientandroidlib.client.RedirectHandler handler -> a
    boolean isRedirected(ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    ch.boye.httpclientandroidlib.client.methods.HttpUriRequest getRedirect(ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext) -> b
    ch.boye.httpclientandroidlib.client.RedirectHandler getHandler() -> a
ch.boye.httpclientandroidlib.impl.client.DefaultRequestDirector -> a.a.a.g.b.m:
    ch.boye.httpclientandroidlib.androidextra.HttpClientAndroidLog log -> a
    ch.boye.httpclientandroidlib.conn.ClientConnectionManager connManager -> b
    ch.boye.httpclientandroidlib.conn.routing.HttpRoutePlanner routePlanner -> c
    ch.boye.httpclientandroidlib.ConnectionReuseStrategy reuseStrategy -> d
    ch.boye.httpclientandroidlib.conn.ConnectionKeepAliveStrategy keepAliveStrategy -> e
    ch.boye.httpclientandroidlib.protocol.HttpRequestExecutor requestExec -> f
    ch.boye.httpclientandroidlib.protocol.HttpProcessor httpProcessor -> g
    ch.boye.httpclientandroidlib.client.HttpRequestRetryHandler retryHandler -> h
    ch.boye.httpclientandroidlib.client.RedirectHandler redirectHandler -> i
    ch.boye.httpclientandroidlib.client.RedirectStrategy redirectStrategy -> j
    ch.boye.httpclientandroidlib.client.AuthenticationHandler targetAuthHandler -> k
    ch.boye.httpclientandroidlib.client.AuthenticationStrategy targetAuthStrategy -> l
    ch.boye.httpclientandroidlib.client.AuthenticationHandler proxyAuthHandler -> m
    ch.boye.httpclientandroidlib.client.AuthenticationStrategy proxyAuthStrategy -> n
    ch.boye.httpclientandroidlib.client.UserTokenHandler userTokenHandler -> o
    ch.boye.httpclientandroidlib.params.HttpParams params -> p
    ch.boye.httpclientandroidlib.conn.ManagedClientConnection managedConn -> q
    ch.boye.httpclientandroidlib.auth.AuthState targetAuthState -> r
    ch.boye.httpclientandroidlib.auth.AuthState proxyAuthState -> s
    ch.boye.httpclientandroidlib.impl.client.HttpAuthenticator authenticator -> t
    int execCount -> u
    int redirectCount -> v
    int maxRedirects -> w
    ch.boye.httpclientandroidlib.HttpHost virtualHost -> x
    ch.boye.httpclientandroidlib.impl.client.RequestWrapper wrapRequest(ch.boye.httpclientandroidlib.HttpRequest) -> a
    void rewriteRequestURI(ch.boye.httpclientandroidlib.impl.client.RequestWrapper,ch.boye.httpclientandroidlib.conn.routing.HttpRoute) -> a
    ch.boye.httpclientandroidlib.HttpResponse execute(ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    void tryConnect(ch.boye.httpclientandroidlib.impl.client.RoutedRequest,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    ch.boye.httpclientandroidlib.HttpResponse tryExecute(ch.boye.httpclientandroidlib.impl.client.RoutedRequest,ch.boye.httpclientandroidlib.protocol.HttpContext) -> b
    void releaseConnection() -> a
    ch.boye.httpclientandroidlib.conn.routing.HttpRoute determineRoute(ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.protocol.HttpContext) -> b
    void establishRoute(ch.boye.httpclientandroidlib.conn.routing.HttpRoute,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    boolean createTunnelToTarget(ch.boye.httpclientandroidlib.conn.routing.HttpRoute,ch.boye.httpclientandroidlib.protocol.HttpContext) -> b
    boolean createTunnelToProxy(ch.boye.httpclientandroidlib.conn.routing.HttpRoute,int,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    ch.boye.httpclientandroidlib.HttpRequest createConnectRequest(ch.boye.httpclientandroidlib.conn.routing.HttpRoute,ch.boye.httpclientandroidlib.protocol.HttpContext) -> c
    ch.boye.httpclientandroidlib.impl.client.RoutedRequest handleResponse(ch.boye.httpclientandroidlib.impl.client.RoutedRequest,ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    void abortConnection() -> b
ch.boye.httpclientandroidlib.impl.client.DefaultUserTokenHandler -> a.a.a.g.b.n:
    java.lang.Object getUserToken(ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    java.security.Principal getAuthPrincipal(ch.boye.httpclientandroidlib.auth.AuthState) -> a
ch.boye.httpclientandroidlib.impl.client.EntityEnclosingRequestWrapper -> a.a.a.g.b.o:
    ch.boye.httpclientandroidlib.HttpEntity entity -> a
    boolean consumed -> b
    ch.boye.httpclientandroidlib.HttpEntity getEntity() -> getEntity
    void setEntity(ch.boye.httpclientandroidlib.HttpEntity) -> a
    boolean expectContinue() -> expectContinue
    boolean isRepeatable() -> a
    boolean access$002(ch.boye.httpclientandroidlib.impl.client.EntityEnclosingRequestWrapper,boolean) -> a
ch.boye.httpclientandroidlib.impl.client.EntityEnclosingRequestWrapper$EntityWrapper -> a.a.a.g.b.p:
    ch.boye.httpclientandroidlib.impl.client.EntityEnclosingRequestWrapper this$0 -> a
    void consumeContent() -> h
    java.io.InputStream getContent() -> f
    void writeTo(java.io.OutputStream) -> a
ch.boye.httpclientandroidlib.impl.client.HttpAuthenticator -> a.a.a.g.b.q:
    ch.boye.httpclientandroidlib.androidextra.HttpClientAndroidLog log -> a
    boolean isAuthenticationRequested(ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.client.AuthenticationStrategy,ch.boye.httpclientandroidlib.auth.AuthState,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    boolean authenticate(ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.client.AuthenticationStrategy,ch.boye.httpclientandroidlib.auth.AuthState,ch.boye.httpclientandroidlib.protocol.HttpContext) -> b
ch.boye.httpclientandroidlib.impl.client.HttpAuthenticator$1 -> a.a.a.g.b.q$1:
    int[] $SwitchMap$ch$boye$httpclientandroidlib$auth$AuthProtocolState -> a
ch.boye.httpclientandroidlib.impl.client.ProxyAuthenticationStrategy -> a.a.a.g.b.r:
    void authFailed(ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.auth.AuthScheme,ch.boye.httpclientandroidlib.protocol.HttpContext) -> b
    void authSucceeded(ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.auth.AuthScheme,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    java.util.Queue select(java.util.Map,ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    java.util.Map getChallenges(ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext) -> b
    boolean isAuthenticationRequested(ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
ch.boye.httpclientandroidlib.impl.client.RedirectLocations -> a.a.a.g.b.s:
    java.util.Set unique -> a
    java.util.List all -> b
    boolean contains(java.net.URI) -> a
    void add(java.net.URI) -> b
ch.boye.httpclientandroidlib.impl.client.RequestWrapper -> a.a.a.g.b.t:
    ch.boye.httpclientandroidlib.HttpRequest original -> a
    java.net.URI uri -> b
    java.lang.String method -> c
    ch.boye.httpclientandroidlib.ProtocolVersion version -> d
    int execCount -> e
    void resetHeaders() -> b
    java.lang.String getMethod() -> getMethod
    ch.boye.httpclientandroidlib.ProtocolVersion getProtocolVersion() -> getProtocolVersion
    java.net.URI getURI() -> getURI
    void setURI(java.net.URI) -> a
    ch.boye.httpclientandroidlib.RequestLine getRequestLine() -> getRequestLine
    boolean isAborted() -> isAborted
    ch.boye.httpclientandroidlib.HttpRequest getOriginal() -> c
    boolean isRepeatable() -> a
    int getExecCount() -> d
    void incrementExecCount() -> e
ch.boye.httpclientandroidlib.impl.client.RoutedRequest -> a.a.a.g.b.u:
    ch.boye.httpclientandroidlib.impl.client.RequestWrapper request -> a
    ch.boye.httpclientandroidlib.conn.routing.HttpRoute route -> b
    ch.boye.httpclientandroidlib.impl.client.RequestWrapper getRequest() -> a
    ch.boye.httpclientandroidlib.conn.routing.HttpRoute getRoute() -> b
ch.boye.httpclientandroidlib.impl.client.TargetAuthenticationStrategy -> a.a.a.g.b.v:
    void authFailed(ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.auth.AuthScheme,ch.boye.httpclientandroidlib.protocol.HttpContext) -> b
    void authSucceeded(ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.auth.AuthScheme,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    java.util.Queue select(java.util.Map,ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    java.util.Map getChallenges(ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext) -> b
    boolean isAuthenticationRequested(ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
ch.boye.httpclientandroidlib.impl.client.TunnelRefusedException -> a.a.a.g.b.w:
    ch.boye.httpclientandroidlib.HttpResponse response -> a
    ch.boye.httpclientandroidlib.HttpResponse getResponse() -> a
ch.boye.httpclientandroidlib.impl.conn.AbstractClientConnAdapter -> a.a.a.g.c.a:
    ch.boye.httpclientandroidlib.conn.ClientConnectionManager connManager -> a
    ch.boye.httpclientandroidlib.conn.OperatedClientConnection wrappedConnection -> b
    boolean markedReusable -> c
    boolean released -> d
    long duration -> e
    void detach() -> n
    ch.boye.httpclientandroidlib.conn.OperatedClientConnection getWrappedConnection() -> o
    ch.boye.httpclientandroidlib.conn.ClientConnectionManager getManager() -> p
    boolean isReleased() -> q
    void assertValid(ch.boye.httpclientandroidlib.conn.OperatedClientConnection) -> a
    boolean isOpen() -> c
    boolean isStale() -> d
    void setSocketTimeout(int) -> b
    void flush() -> b
    boolean isResponseAvailable(int) -> a
    void receiveResponseEntity(ch.boye.httpclientandroidlib.HttpResponse) -> a
    ch.boye.httpclientandroidlib.HttpResponse receiveResponseHeader() -> a
    void sendRequestEntity(ch.boye.httpclientandroidlib.HttpEntityEnclosingRequest) -> a
    void sendRequestHeader(ch.boye.httpclientandroidlib.HttpRequest) -> a
    java.net.InetAddress getRemoteAddress() -> f
    int getRemotePort() -> g
    boolean isSecure() -> h
    javax.net.ssl.SSLSession getSSLSession() -> l
    void markReusable() -> m
    void unmarkReusable() -> r
    boolean isMarkedReusable() -> s
    void setIdleDuration(long,java.util.concurrent.TimeUnit) -> a
    void releaseConnection() -> i
    void abortConnection() -> j
    java.lang.Object getAttribute(java.lang.String) -> a
    void setAttribute(java.lang.String,java.lang.Object) -> a
ch.boye.httpclientandroidlib.impl.conn.AbstractPoolEntry -> a.a.a.g.c.b:
    ch.boye.httpclientandroidlib.conn.ClientConnectionOperator connOperator -> a
    ch.boye.httpclientandroidlib.conn.OperatedClientConnection connection -> b
    ch.boye.httpclientandroidlib.conn.routing.HttpRoute route -> c
    java.lang.Object state -> d
    ch.boye.httpclientandroidlib.conn.routing.RouteTracker tracker -> e
    java.lang.Object getState() -> a
    void setState(java.lang.Object) -> a
    void open(ch.boye.httpclientandroidlib.conn.routing.HttpRoute,ch.boye.httpclientandroidlib.protocol.HttpContext,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    void tunnelTarget(boolean,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    void tunnelProxy(ch.boye.httpclientandroidlib.HttpHost,boolean,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    void layerProtocol(ch.boye.httpclientandroidlib.protocol.HttpContext,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    void shutdownEntry() -> b
ch.boye.httpclientandroidlib.impl.conn.AbstractPooledConnAdapter -> a.a.a.g.c.c:
    ch.boye.httpclientandroidlib.impl.conn.AbstractPoolEntry poolEntry -> a
    ch.boye.httpclientandroidlib.impl.conn.AbstractPoolEntry getPoolEntry() -> t
    void assertValid(ch.boye.httpclientandroidlib.impl.conn.AbstractPoolEntry) -> a
    void detach() -> n
    ch.boye.httpclientandroidlib.conn.routing.HttpRoute getRoute() -> k
    void open(ch.boye.httpclientandroidlib.conn.routing.HttpRoute,ch.boye.httpclientandroidlib.protocol.HttpContext,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    void tunnelTarget(boolean,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    void tunnelProxy(ch.boye.httpclientandroidlib.HttpHost,boolean,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    void layerProtocol(ch.boye.httpclientandroidlib.protocol.HttpContext,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    void close() -> close
    void shutdown() -> e
    void setState(java.lang.Object) -> a
ch.boye.httpclientandroidlib.impl.conn.BasicClientConnectionManager -> a.a.a.g.c.d:
    ch.boye.httpclientandroidlib.androidextra.HttpClientAndroidLog log -> a
    java.util.concurrent.atomic.AtomicLong COUNTER -> b
    ch.boye.httpclientandroidlib.conn.scheme.SchemeRegistry schemeRegistry -> c
    ch.boye.httpclientandroidlib.conn.ClientConnectionOperator connOperator -> d
    ch.boye.httpclientandroidlib.impl.conn.HttpPoolEntry poolEntry -> e
    ch.boye.httpclientandroidlib.impl.conn.ManagedClientConnectionImpl conn -> f
    boolean shutdown -> g
    void finalize() -> finalize
    ch.boye.httpclientandroidlib.conn.scheme.SchemeRegistry getSchemeRegistry() -> a
    ch.boye.httpclientandroidlib.conn.ClientConnectionOperator createConnectionOperator(ch.boye.httpclientandroidlib.conn.scheme.SchemeRegistry) -> a
    ch.boye.httpclientandroidlib.conn.ClientConnectionRequest requestConnection(ch.boye.httpclientandroidlib.conn.routing.HttpRoute,java.lang.Object) -> a
    void assertNotShutdown() -> c
    ch.boye.httpclientandroidlib.conn.ManagedClientConnection getConnection(ch.boye.httpclientandroidlib.conn.routing.HttpRoute,java.lang.Object) -> b
    void releaseConnection(ch.boye.httpclientandroidlib.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit) -> a
    void shutdown() -> b
ch.boye.httpclientandroidlib.impl.conn.BasicClientConnectionManager$1 -> a.a.a.g.c.d$1:
    ch.boye.httpclientandroidlib.conn.routing.HttpRoute val$route -> a
    java.lang.Object val$state -> b
    ch.boye.httpclientandroidlib.impl.conn.BasicClientConnectionManager this$0 -> c
    void abortRequest() -> a
    ch.boye.httpclientandroidlib.conn.ManagedClientConnection getConnection(long,java.util.concurrent.TimeUnit) -> a
ch.boye.httpclientandroidlib.impl.conn.ConnectionShutdownException -> a.a.a.g.c.e:
ch.boye.httpclientandroidlib.impl.conn.DefaultClientConnection -> a.a.a.g.c.f:
    ch.boye.httpclientandroidlib.androidextra.HttpClientAndroidLog log -> a
    ch.boye.httpclientandroidlib.androidextra.HttpClientAndroidLog headerLog -> b
    ch.boye.httpclientandroidlib.androidextra.HttpClientAndroidLog wireLog -> c
    java.net.Socket socket -> d
    ch.boye.httpclientandroidlib.HttpHost targetHost -> e
    boolean connSecure -> f
    boolean shutdown -> g
    java.util.Map attributes -> h
    boolean isSecure() -> h
    java.net.Socket getSocket() -> i
    void opening(java.net.Socket,ch.boye.httpclientandroidlib.HttpHost) -> a
    void openCompleted(boolean,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    void shutdown() -> e
    void close() -> close
    ch.boye.httpclientandroidlib.io.SessionInputBuffer createSessionInputBuffer(java.net.Socket,int,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    ch.boye.httpclientandroidlib.io.SessionOutputBuffer createSessionOutputBuffer(java.net.Socket,int,ch.boye.httpclientandroidlib.params.HttpParams) -> b
    ch.boye.httpclientandroidlib.io.HttpMessageParser createResponseParser(ch.boye.httpclientandroidlib.io.SessionInputBuffer,ch.boye.httpclientandroidlib.HttpResponseFactory,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    void update(java.net.Socket,ch.boye.httpclientandroidlib.HttpHost,boolean,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    ch.boye.httpclientandroidlib.HttpResponse receiveResponseHeader() -> a
    void sendRequestHeader(ch.boye.httpclientandroidlib.HttpRequest) -> a
    java.lang.Object getAttribute(java.lang.String) -> a
    void setAttribute(java.lang.String,java.lang.Object) -> a
ch.boye.httpclientandroidlib.impl.conn.DefaultClientConnectionOperator -> a.a.a.g.c.g:
    ch.boye.httpclientandroidlib.androidextra.HttpClientAndroidLog log -> a
    ch.boye.httpclientandroidlib.conn.scheme.SchemeRegistry schemeRegistry -> b
    ch.boye.httpclientandroidlib.conn.DnsResolver dnsResolver -> c
    ch.boye.httpclientandroidlib.conn.OperatedClientConnection createConnection() -> a
    void openConnection(ch.boye.httpclientandroidlib.conn.OperatedClientConnection,ch.boye.httpclientandroidlib.HttpHost,java.net.InetAddress,ch.boye.httpclientandroidlib.protocol.HttpContext,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    void updateSecureConnection(ch.boye.httpclientandroidlib.conn.OperatedClientConnection,ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.protocol.HttpContext,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    void prepareSocket(java.net.Socket,ch.boye.httpclientandroidlib.protocol.HttpContext,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    java.net.InetAddress[] resolveHostname(java.lang.String) -> a
ch.boye.httpclientandroidlib.impl.conn.DefaultHttpResponseParser -> a.a.a.g.c.h:
    ch.boye.httpclientandroidlib.androidextra.HttpClientAndroidLog log -> a
    ch.boye.httpclientandroidlib.HttpResponseFactory responseFactory -> c
    ch.boye.httpclientandroidlib.util.CharArrayBuffer lineBuf -> d
    ch.boye.httpclientandroidlib.HttpResponse parseHead(ch.boye.httpclientandroidlib.io.SessionInputBuffer) -> a
    boolean reject(ch.boye.httpclientandroidlib.util.CharArrayBuffer,int) -> a
    ch.boye.httpclientandroidlib.HttpMessage parseHead(ch.boye.httpclientandroidlib.io.SessionInputBuffer) -> b
ch.boye.httpclientandroidlib.impl.conn.DefaultHttpRoutePlanner -> a.a.a.g.c.i:
    ch.boye.httpclientandroidlib.conn.scheme.SchemeRegistry schemeRegistry -> a
    ch.boye.httpclientandroidlib.conn.routing.HttpRoute determineRoute(ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
ch.boye.httpclientandroidlib.impl.conn.HttpPoolEntry -> a.a.a.g.c.j:
    ch.boye.httpclientandroidlib.androidextra.HttpClientAndroidLog log -> a
    ch.boye.httpclientandroidlib.conn.routing.RouteTracker tracker -> b
    boolean isExpired(long) -> a
    ch.boye.httpclientandroidlib.conn.routing.RouteTracker getTracker() -> a
    ch.boye.httpclientandroidlib.conn.routing.HttpRoute getPlannedRoute() -> b
    ch.boye.httpclientandroidlib.conn.routing.HttpRoute getEffectiveRoute() -> c
    boolean isClosed() -> d
    void close() -> e
ch.boye.httpclientandroidlib.impl.conn.IdleConnectionHandler -> a.a.a.g.c.k:
    ch.boye.httpclientandroidlib.androidextra.HttpClientAndroidLog log -> a
    java.util.Map connectionToTimes -> b
    void removeAll() -> a
ch.boye.httpclientandroidlib.impl.conn.LoggingSessionInputBuffer -> a.a.a.g.c.l:
    ch.boye.httpclientandroidlib.io.SessionInputBuffer in -> a
    ch.boye.httpclientandroidlib.io.EofSensor eofSensor -> b
    ch.boye.httpclientandroidlib.impl.conn.Wire wire -> c
    java.lang.String charset -> d
    boolean isDataAvailable(int) -> a
    int read(byte[],int,int) -> a
    int read() -> a
    int readLine(ch.boye.httpclientandroidlib.util.CharArrayBuffer) -> a
    ch.boye.httpclientandroidlib.io.HttpTransportMetrics getMetrics() -> b
    boolean isEof() -> c
ch.boye.httpclientandroidlib.impl.conn.LoggingSessionOutputBuffer -> a.a.a.g.c.m:
    ch.boye.httpclientandroidlib.io.SessionOutputBuffer out -> a
    ch.boye.httpclientandroidlib.impl.conn.Wire wire -> b
    java.lang.String charset -> c
    void write(byte[],int,int) -> a
    void write(int) -> a
    void flush() -> a
    void writeLine(ch.boye.httpclientandroidlib.util.CharArrayBuffer) -> a
    void writeLine(java.lang.String) -> a
    ch.boye.httpclientandroidlib.io.HttpTransportMetrics getMetrics() -> b
ch.boye.httpclientandroidlib.impl.conn.ManagedClientConnectionImpl -> a.a.a.g.c.n:
    ch.boye.httpclientandroidlib.conn.ClientConnectionManager manager -> a
    ch.boye.httpclientandroidlib.conn.ClientConnectionOperator operator -> b
    ch.boye.httpclientandroidlib.impl.conn.HttpPoolEntry poolEntry -> c
    boolean reusable -> d
    long duration -> e
    ch.boye.httpclientandroidlib.impl.conn.HttpPoolEntry getPoolEntry() -> n
    ch.boye.httpclientandroidlib.impl.conn.HttpPoolEntry detach() -> o
    ch.boye.httpclientandroidlib.conn.ClientConnectionManager getManager() -> p
    ch.boye.httpclientandroidlib.conn.OperatedClientConnection getConnection() -> r
    ch.boye.httpclientandroidlib.conn.OperatedClientConnection ensureConnection() -> s
    ch.boye.httpclientandroidlib.impl.conn.HttpPoolEntry ensurePoolEntry() -> t
    void close() -> close
    void shutdown() -> e
    boolean isOpen() -> c
    boolean isStale() -> d
    void setSocketTimeout(int) -> b
    void flush() -> b
    boolean isResponseAvailable(int) -> a
    void receiveResponseEntity(ch.boye.httpclientandroidlib.HttpResponse) -> a
    ch.boye.httpclientandroidlib.HttpResponse receiveResponseHeader() -> a
    void sendRequestEntity(ch.boye.httpclientandroidlib.HttpEntityEnclosingRequest) -> a
    void sendRequestHeader(ch.boye.httpclientandroidlib.HttpRequest) -> a
    java.net.InetAddress getRemoteAddress() -> f
    int getRemotePort() -> g
    boolean isSecure() -> h
    javax.net.ssl.SSLSession getSSLSession() -> l
    ch.boye.httpclientandroidlib.conn.routing.HttpRoute getRoute() -> k
    void open(ch.boye.httpclientandroidlib.conn.routing.HttpRoute,ch.boye.httpclientandroidlib.protocol.HttpContext,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    void tunnelTarget(boolean,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    void tunnelProxy(ch.boye.httpclientandroidlib.HttpHost,boolean,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    void layerProtocol(ch.boye.httpclientandroidlib.protocol.HttpContext,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    void setState(java.lang.Object) -> a
    void markReusable() -> m
    boolean isMarkedReusable() -> q
    void setIdleDuration(long,java.util.concurrent.TimeUnit) -> a
    void releaseConnection() -> i
    void abortConnection() -> j
ch.boye.httpclientandroidlib.impl.conn.ProxySelectorRoutePlanner -> a.a.a.g.c.o:
    ch.boye.httpclientandroidlib.conn.scheme.SchemeRegistry schemeRegistry -> a
    java.net.ProxySelector proxySelector -> b
    ch.boye.httpclientandroidlib.conn.routing.HttpRoute determineRoute(ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    ch.boye.httpclientandroidlib.HttpHost determineProxy(ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.protocol.HttpContext) -> b
    java.lang.String getHost(java.net.InetSocketAddress) -> a
    java.net.Proxy chooseProxy(java.util.List,ch.boye.httpclientandroidlib.HttpHost,ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
ch.boye.httpclientandroidlib.impl.conn.ProxySelectorRoutePlanner$1 -> a.a.a.g.c.o$1:
    int[] $SwitchMap$java$net$Proxy$Type -> a
ch.boye.httpclientandroidlib.impl.conn.SchemeRegistryFactory -> a.a.a.g.c.p:
    ch.boye.httpclientandroidlib.conn.scheme.SchemeRegistry createDefault() -> a
ch.boye.httpclientandroidlib.impl.conn.SystemDefaultDnsResolver -> a.a.a.g.c.q:
    java.net.InetAddress[] resolve(java.lang.String) -> a
ch.boye.httpclientandroidlib.impl.conn.Wire -> a.a.a.g.c.r:
    ch.boye.httpclientandroidlib.androidextra.HttpClientAndroidLog log -> a
    void wire(java.lang.String,java.io.InputStream) -> a
    boolean enabled() -> a
    void output(byte[],int,int) -> a
    void input(byte[],int,int) -> b
    void output(byte[]) -> a
    void input(byte[]) -> b
    void output(int) -> a
    void input(int) -> b
ch.boye.httpclientandroidlib.impl.conn.tsccm.AbstractConnPool -> a.a.a.g.c.a.a:
    ch.boye.httpclientandroidlib.androidextra.HttpClientAndroidLog log -> a
    java.util.concurrent.locks.Lock poolLock -> b
    java.util.Set leasedConnections -> c
    boolean isShutDown -> d
    ch.boye.httpclientandroidlib.impl.conn.IdleConnectionHandler idleConnHandler -> e
    void shutdown() -> a
    void closeConnection(ch.boye.httpclientandroidlib.conn.OperatedClientConnection) -> a
ch.boye.httpclientandroidlib.impl.conn.tsccm.BasicPoolEntry -> a.a.a.g.c.a.b:
    long created -> f
    long updated -> g
    long validUntil -> h
    long expiry -> i
    ch.boye.httpclientandroidlib.conn.OperatedClientConnection getConnection() -> c
    ch.boye.httpclientandroidlib.conn.routing.HttpRoute getPlannedRoute() -> d
    void shutdownEntry() -> b
    void updateExpiry(long,java.util.concurrent.TimeUnit) -> a
    boolean isExpired(long) -> a
ch.boye.httpclientandroidlib.impl.conn.tsccm.BasicPooledConnAdapter -> a.a.a.g.c.a.c:
    ch.boye.httpclientandroidlib.conn.ClientConnectionManager getManager() -> p
    ch.boye.httpclientandroidlib.impl.conn.AbstractPoolEntry getPoolEntry() -> t
    void detach() -> n
ch.boye.httpclientandroidlib.impl.conn.tsccm.ConnPoolByRoute -> a.a.a.g.c.a.d:
    ch.boye.httpclientandroidlib.androidextra.HttpClientAndroidLog log -> f
    java.util.concurrent.locks.Lock poolLock -> p
    ch.boye.httpclientandroidlib.conn.ClientConnectionOperator operator -> g
    ch.boye.httpclientandroidlib.conn.params.ConnPerRoute connPerRoute -> h
    java.util.Set leasedConnections -> i
    java.util.Queue freeConnections -> j
    java.util.Queue waitingThreads -> k
    java.util.Map routeToPool -> l
    long connTTL -> q
    java.util.concurrent.TimeUnit connTTLTimeUnit -> r
    boolean shutdown -> m
    int maxTotalConnections -> n
    int numConnections -> o
    java.util.Queue createFreeConnQueue() -> b
    java.util.Queue createWaitingThreadQueue() -> c
    java.util.Map createRouteToPoolMap() -> d
    ch.boye.httpclientandroidlib.impl.conn.tsccm.RouteSpecificPool newRouteSpecificPool(ch.boye.httpclientandroidlib.conn.routing.HttpRoute) -> a
    ch.boye.httpclientandroidlib.impl.conn.tsccm.WaitingThread newWaitingThread(java.util.concurrent.locks.Condition,ch.boye.httpclientandroidlib.impl.conn.tsccm.RouteSpecificPool) -> a
    void closeConnection(ch.boye.httpclientandroidlib.impl.conn.tsccm.BasicPoolEntry) -> b
    ch.boye.httpclientandroidlib.impl.conn.tsccm.RouteSpecificPool getRoutePool(ch.boye.httpclientandroidlib.conn.routing.HttpRoute,boolean) -> a
    ch.boye.httpclientandroidlib.impl.conn.tsccm.PoolEntryRequest requestPoolEntry(ch.boye.httpclientandroidlib.conn.routing.HttpRoute,java.lang.Object) -> a
    ch.boye.httpclientandroidlib.impl.conn.tsccm.BasicPoolEntry getEntryBlocking(ch.boye.httpclientandroidlib.conn.routing.HttpRoute,java.lang.Object,long,java.util.concurrent.TimeUnit,ch.boye.httpclientandroidlib.impl.conn.tsccm.WaitingThreadAborter) -> a
    void freeEntry(ch.boye.httpclientandroidlib.impl.conn.tsccm.BasicPoolEntry,boolean,long,java.util.concurrent.TimeUnit) -> a
    ch.boye.httpclientandroidlib.impl.conn.tsccm.BasicPoolEntry getFreeEntry(ch.boye.httpclientandroidlib.impl.conn.tsccm.RouteSpecificPool,java.lang.Object) -> a
    ch.boye.httpclientandroidlib.impl.conn.tsccm.BasicPoolEntry createEntry(ch.boye.httpclientandroidlib.impl.conn.tsccm.RouteSpecificPool,ch.boye.httpclientandroidlib.conn.ClientConnectionOperator) -> a
    void deleteEntry(ch.boye.httpclientandroidlib.impl.conn.tsccm.BasicPoolEntry) -> a
    void deleteLeastUsedEntry() -> e
    void notifyWaitingThread(ch.boye.httpclientandroidlib.impl.conn.tsccm.RouteSpecificPool) -> a
    void shutdown() -> a
    java.util.concurrent.locks.Lock access$000(ch.boye.httpclientandroidlib.impl.conn.tsccm.ConnPoolByRoute) -> a
ch.boye.httpclientandroidlib.impl.conn.tsccm.ConnPoolByRoute$1 -> a.a.a.g.c.a.d$1:
    ch.boye.httpclientandroidlib.impl.conn.tsccm.WaitingThreadAborter val$aborter -> a
    ch.boye.httpclientandroidlib.conn.routing.HttpRoute val$route -> b
    java.lang.Object val$state -> c
    ch.boye.httpclientandroidlib.impl.conn.tsccm.ConnPoolByRoute this$0 -> d
    void abortRequest() -> a
    ch.boye.httpclientandroidlib.impl.conn.tsccm.BasicPoolEntry getPoolEntry(long,java.util.concurrent.TimeUnit) -> a
ch.boye.httpclientandroidlib.impl.conn.tsccm.PoolEntryRequest -> a.a.a.g.c.a.e:
    ch.boye.httpclientandroidlib.impl.conn.tsccm.BasicPoolEntry getPoolEntry(long,java.util.concurrent.TimeUnit) -> a
    void abortRequest() -> a
ch.boye.httpclientandroidlib.impl.conn.tsccm.RouteSpecificPool -> a.a.a.g.c.a.f:
    ch.boye.httpclientandroidlib.androidextra.HttpClientAndroidLog log -> a
    ch.boye.httpclientandroidlib.conn.routing.HttpRoute route -> b
    int maxEntries -> c
    ch.boye.httpclientandroidlib.conn.params.ConnPerRoute connPerRoute -> d
    java.util.LinkedList freeEntries -> e
    java.util.Queue waitingThreads -> f
    int numEntries -> g
    ch.boye.httpclientandroidlib.conn.routing.HttpRoute getRoute() -> a
    int getMaxEntries() -> b
    boolean isUnused() -> c
    int getCapacity() -> d
    ch.boye.httpclientandroidlib.impl.conn.tsccm.BasicPoolEntry allocEntry(java.lang.Object) -> a
    void freeEntry(ch.boye.httpclientandroidlib.impl.conn.tsccm.BasicPoolEntry) -> a
    void createdEntry(ch.boye.httpclientandroidlib.impl.conn.tsccm.BasicPoolEntry) -> b
    boolean deleteEntry(ch.boye.httpclientandroidlib.impl.conn.tsccm.BasicPoolEntry) -> c
    void dropEntry() -> e
    void queueThread(ch.boye.httpclientandroidlib.impl.conn.tsccm.WaitingThread) -> a
    boolean hasThread() -> f
    ch.boye.httpclientandroidlib.impl.conn.tsccm.WaitingThread nextThread() -> g
    void removeThread(ch.boye.httpclientandroidlib.impl.conn.tsccm.WaitingThread) -> b
ch.boye.httpclientandroidlib.impl.conn.tsccm.ThreadSafeClientConnManager -> a.a.a.g.c.a.g:
    ch.boye.httpclientandroidlib.androidextra.HttpClientAndroidLog log -> a
    ch.boye.httpclientandroidlib.conn.scheme.SchemeRegistry schemeRegistry -> b
    ch.boye.httpclientandroidlib.impl.conn.tsccm.AbstractConnPool connectionPool -> c
    ch.boye.httpclientandroidlib.impl.conn.tsccm.ConnPoolByRoute pool -> d
    ch.boye.httpclientandroidlib.conn.ClientConnectionOperator connOperator -> e
    ch.boye.httpclientandroidlib.conn.params.ConnPerRouteBean connPerRoute -> f
    void finalize() -> finalize
    ch.boye.httpclientandroidlib.impl.conn.tsccm.AbstractConnPool createConnectionPool(ch.boye.httpclientandroidlib.params.HttpParams) -> a
    ch.boye.httpclientandroidlib.impl.conn.tsccm.ConnPoolByRoute createConnectionPool(long,java.util.concurrent.TimeUnit) -> a
    ch.boye.httpclientandroidlib.conn.ClientConnectionOperator createConnectionOperator(ch.boye.httpclientandroidlib.conn.scheme.SchemeRegistry) -> a
    ch.boye.httpclientandroidlib.conn.scheme.SchemeRegistry getSchemeRegistry() -> a
    ch.boye.httpclientandroidlib.conn.ClientConnectionRequest requestConnection(ch.boye.httpclientandroidlib.conn.routing.HttpRoute,java.lang.Object) -> a
    void releaseConnection(ch.boye.httpclientandroidlib.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit) -> a
    void shutdown() -> b
ch.boye.httpclientandroidlib.impl.conn.tsccm.ThreadSafeClientConnManager$1 -> a.a.a.g.c.a.g$1:
    ch.boye.httpclientandroidlib.impl.conn.tsccm.PoolEntryRequest val$poolRequest -> a
    ch.boye.httpclientandroidlib.conn.routing.HttpRoute val$route -> b
    ch.boye.httpclientandroidlib.impl.conn.tsccm.ThreadSafeClientConnManager this$0 -> c
    void abortRequest() -> a
    ch.boye.httpclientandroidlib.conn.ManagedClientConnection getConnection(long,java.util.concurrent.TimeUnit) -> a
ch.boye.httpclientandroidlib.impl.conn.tsccm.WaitingThread -> a.a.a.g.c.a.h:
    java.util.concurrent.locks.Condition cond -> a
    ch.boye.httpclientandroidlib.impl.conn.tsccm.RouteSpecificPool pool -> b
    java.lang.Thread waiter -> c
    boolean aborted -> d
    boolean await(java.util.Date) -> a
    void wakeup() -> a
    void interrupt() -> b
ch.boye.httpclientandroidlib.impl.conn.tsccm.WaitingThreadAborter -> a.a.a.g.c.a.i:
    ch.boye.httpclientandroidlib.impl.conn.tsccm.WaitingThread waitingThread -> a
    boolean aborted -> b
    void abort() -> a
    void setWaitingThread(ch.boye.httpclientandroidlib.impl.conn.tsccm.WaitingThread) -> a
ch.boye.httpclientandroidlib.impl.cookie.AbstractCookieAttributeHandler -> a.a.a.g.d.a:
    void validate(ch.boye.httpclientandroidlib.cookie.Cookie,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> a
    boolean match(ch.boye.httpclientandroidlib.cookie.Cookie,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> b
ch.boye.httpclientandroidlib.impl.cookie.AbstractCookieSpec -> a.a.a.g.d.b:
    java.util.Map attribHandlerMap -> a
    void registerAttribHandler(java.lang.String,ch.boye.httpclientandroidlib.cookie.CookieAttributeHandler) -> a
    ch.boye.httpclientandroidlib.cookie.CookieAttributeHandler findAttribHandler(java.lang.String) -> a
    java.util.Collection getAttribHandlers() -> c
ch.boye.httpclientandroidlib.impl.cookie.BasicClientCookie -> a.a.a.g.d.c:
    java.lang.String name -> a
    java.util.Map attribs -> b
    java.lang.String value -> c
    java.lang.String cookieComment -> d
    java.lang.String cookieDomain -> e
    java.util.Date cookieExpiryDate -> f
    java.lang.String cookiePath -> g
    boolean isSecure -> h
    int cookieVersion -> i
    java.lang.String getName() -> a
    java.lang.String getValue() -> b
    void setComment(java.lang.String) -> c
    void setExpiryDate(java.util.Date) -> b
    java.lang.String getDomain() -> c
    void setDomain(java.lang.String) -> d
    java.lang.String getPath() -> d
    void setPath(java.lang.String) -> e
    boolean isSecure() -> f
    void setSecure(boolean) -> a
    int[] getPorts() -> e
    int getVersion() -> g
    void setVersion(int) -> a
    boolean isExpired(java.util.Date) -> a
    void setAttribute(java.lang.String,java.lang.String) -> a
    java.lang.String getAttribute(java.lang.String) -> a
    boolean containsAttribute(java.lang.String) -> b
    java.lang.Object clone() -> clone
    java.lang.String toString() -> toString
ch.boye.httpclientandroidlib.impl.cookie.BasicClientCookie2 -> a.a.a.g.d.d:
    java.lang.String commentURL -> a
    int[] ports -> b
    boolean discard -> c
    int[] getPorts() -> e
    void setPorts(int[]) -> a
    void setCommentURL(java.lang.String) -> a_
    void setDiscard(boolean) -> b
    boolean isExpired(java.util.Date) -> a
    java.lang.Object clone() -> clone
ch.boye.httpclientandroidlib.impl.cookie.BasicCommentHandler -> a.a.a.g.d.e:
    void parse(ch.boye.httpclientandroidlib.cookie.SetCookie,java.lang.String) -> a
ch.boye.httpclientandroidlib.impl.cookie.BasicDomainHandler -> a.a.a.g.d.f:
    void parse(ch.boye.httpclientandroidlib.cookie.SetCookie,java.lang.String) -> a
    void validate(ch.boye.httpclientandroidlib.cookie.Cookie,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> a
    boolean match(ch.boye.httpclientandroidlib.cookie.Cookie,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> b
ch.boye.httpclientandroidlib.impl.cookie.BasicExpiresHandler -> a.a.a.g.d.g:
    java.lang.String[] datepatterns -> a
    void parse(ch.boye.httpclientandroidlib.cookie.SetCookie,java.lang.String) -> a
ch.boye.httpclientandroidlib.impl.cookie.BasicMaxAgeHandler -> a.a.a.g.d.h:
    void parse(ch.boye.httpclientandroidlib.cookie.SetCookie,java.lang.String) -> a
ch.boye.httpclientandroidlib.impl.cookie.BasicPathHandler -> a.a.a.g.d.i:
    void parse(ch.boye.httpclientandroidlib.cookie.SetCookie,java.lang.String) -> a
    void validate(ch.boye.httpclientandroidlib.cookie.Cookie,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> a
    boolean match(ch.boye.httpclientandroidlib.cookie.Cookie,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> b
ch.boye.httpclientandroidlib.impl.cookie.BasicSecureHandler -> a.a.a.g.d.j:
    void parse(ch.boye.httpclientandroidlib.cookie.SetCookie,java.lang.String) -> a
    boolean match(ch.boye.httpclientandroidlib.cookie.Cookie,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> b
ch.boye.httpclientandroidlib.impl.cookie.BestMatchSpec -> a.a.a.g.d.k:
    java.lang.String[] datepatterns -> a
    boolean oneHeader -> b
    ch.boye.httpclientandroidlib.impl.cookie.RFC2965Spec strict -> c
    ch.boye.httpclientandroidlib.impl.cookie.RFC2109Spec obsoleteStrict -> d
    ch.boye.httpclientandroidlib.impl.cookie.BrowserCompatSpec compat -> e
    ch.boye.httpclientandroidlib.impl.cookie.RFC2965Spec getStrict() -> c
    ch.boye.httpclientandroidlib.impl.cookie.RFC2109Spec getObsoleteStrict() -> d
    ch.boye.httpclientandroidlib.impl.cookie.BrowserCompatSpec getCompat() -> e
    java.util.List parse(ch.boye.httpclientandroidlib.Header,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> a
    void validate(ch.boye.httpclientandroidlib.cookie.Cookie,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> a
    boolean match(ch.boye.httpclientandroidlib.cookie.Cookie,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> b
    java.util.List formatCookies(java.util.List) -> a
    int getVersion() -> a
    ch.boye.httpclientandroidlib.Header getVersionHeader() -> b
    java.lang.String toString() -> toString
ch.boye.httpclientandroidlib.impl.cookie.BestMatchSpecFactory -> a.a.a.g.d.l:
    ch.boye.httpclientandroidlib.cookie.CookieSpec newInstance(ch.boye.httpclientandroidlib.params.HttpParams) -> a
ch.boye.httpclientandroidlib.impl.cookie.BrowserCompatSpec -> a.a.a.g.d.m:
    java.lang.String[] DEFAULT_DATE_PATTERNS -> a
    java.lang.String[] datepatterns -> b
    java.util.List parse(ch.boye.httpclientandroidlib.Header,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> a
    java.util.List formatCookies(java.util.List) -> a
    int getVersion() -> a
    ch.boye.httpclientandroidlib.Header getVersionHeader() -> b
    java.lang.String toString() -> toString
ch.boye.httpclientandroidlib.impl.cookie.BrowserCompatSpecFactory -> a.a.a.g.d.n:
    ch.boye.httpclientandroidlib.cookie.CookieSpec newInstance(ch.boye.httpclientandroidlib.params.HttpParams) -> a
ch.boye.httpclientandroidlib.impl.cookie.CookieSpecBase -> a.a.a.g.d.o:
    java.lang.String getDefaultPath(ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> a
    java.lang.String getDefaultDomain(ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> b
    java.util.List parse(ch.boye.httpclientandroidlib.HeaderElement[],ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> a
    void validate(ch.boye.httpclientandroidlib.cookie.Cookie,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> a
    boolean match(ch.boye.httpclientandroidlib.cookie.Cookie,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> b
ch.boye.httpclientandroidlib.impl.cookie.DateParseException -> a.a.a.g.d.p:
ch.boye.httpclientandroidlib.impl.cookie.DateUtils -> a.a.a.g.d.q:
    java.lang.String[] DEFAULT_PATTERNS -> b
    java.util.Date DEFAULT_TWO_DIGIT_YEAR_START -> c
    java.util.TimeZone GMT -> a
    java.util.Date parseDate(java.lang.String,java.lang.String[]) -> a
    java.util.Date parseDate(java.lang.String,java.lang.String[],java.util.Date) -> a
ch.boye.httpclientandroidlib.impl.cookie.DateUtils$DateFormatHolder -> a.a.a.g.d.r:
    java.lang.ThreadLocal THREADLOCAL_FORMATS -> a
    java.text.SimpleDateFormat formatFor(java.lang.String) -> a
ch.boye.httpclientandroidlib.impl.cookie.DateUtils$DateFormatHolder$1 -> a.a.a.g.d.r$1:
    java.lang.ref.SoftReference initialValue() -> a
    java.lang.Object initialValue() -> initialValue
ch.boye.httpclientandroidlib.impl.cookie.IgnoreSpec -> a.a.a.g.d.s:
    int getVersion() -> a
    java.util.List parse(ch.boye.httpclientandroidlib.Header,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> a
    java.util.List formatCookies(java.util.List) -> a
    ch.boye.httpclientandroidlib.Header getVersionHeader() -> b
ch.boye.httpclientandroidlib.impl.cookie.IgnoreSpecFactory -> a.a.a.g.d.t:
    ch.boye.httpclientandroidlib.cookie.CookieSpec newInstance(ch.boye.httpclientandroidlib.params.HttpParams) -> a
ch.boye.httpclientandroidlib.impl.cookie.NetscapeDomainHandler -> a.a.a.g.d.u:
    void validate(ch.boye.httpclientandroidlib.cookie.Cookie,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> a
    boolean isSpecialDomain(java.lang.String) -> a
    boolean match(ch.boye.httpclientandroidlib.cookie.Cookie,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> b
ch.boye.httpclientandroidlib.impl.cookie.NetscapeDraftHeaderParser -> a.a.a.g.d.v:
    ch.boye.httpclientandroidlib.impl.cookie.NetscapeDraftHeaderParser DEFAULT -> a
    ch.boye.httpclientandroidlib.HeaderElement parseHeader(ch.boye.httpclientandroidlib.util.CharArrayBuffer,ch.boye.httpclientandroidlib.message.ParserCursor) -> a
    ch.boye.httpclientandroidlib.NameValuePair parseNameValuePair(ch.boye.httpclientandroidlib.util.CharArrayBuffer,ch.boye.httpclientandroidlib.message.ParserCursor) -> b
ch.boye.httpclientandroidlib.impl.cookie.NetscapeDraftSpec -> a.a.a.g.d.w:
    java.lang.String[] datepatterns -> a
    java.util.List parse(ch.boye.httpclientandroidlib.Header,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> a
    java.util.List formatCookies(java.util.List) -> a
    int getVersion() -> a
    ch.boye.httpclientandroidlib.Header getVersionHeader() -> b
    java.lang.String toString() -> toString
ch.boye.httpclientandroidlib.impl.cookie.NetscapeDraftSpecFactory -> a.a.a.g.d.x:
    ch.boye.httpclientandroidlib.cookie.CookieSpec newInstance(ch.boye.httpclientandroidlib.params.HttpParams) -> a
ch.boye.httpclientandroidlib.impl.cookie.RFC2109DomainHandler -> a.a.a.g.d.y:
    void parse(ch.boye.httpclientandroidlib.cookie.SetCookie,java.lang.String) -> a
    void validate(ch.boye.httpclientandroidlib.cookie.Cookie,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> a
    boolean match(ch.boye.httpclientandroidlib.cookie.Cookie,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> b
ch.boye.httpclientandroidlib.impl.cookie.RFC2109Spec -> a.a.a.g.d.z:
    ch.boye.httpclientandroidlib.cookie.CookiePathComparator PATH_COMPARATOR -> a
    java.lang.String[] DATE_PATTERNS -> b
    java.lang.String[] datepatterns -> c
    boolean oneHeader -> d
    java.util.List parse(ch.boye.httpclientandroidlib.Header,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> a
    void validate(ch.boye.httpclientandroidlib.cookie.Cookie,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> a
    java.util.List formatCookies(java.util.List) -> a
    java.util.List doFormatOneHeader(java.util.List) -> b
    java.util.List doFormatManyHeaders(java.util.List) -> c
    void formatParamAsVer(ch.boye.httpclientandroidlib.util.CharArrayBuffer,java.lang.String,java.lang.String,int) -> a
    void formatCookieAsVer(ch.boye.httpclientandroidlib.util.CharArrayBuffer,ch.boye.httpclientandroidlib.cookie.Cookie,int) -> a
    int getVersion() -> a
    ch.boye.httpclientandroidlib.Header getVersionHeader() -> b
    java.lang.String toString() -> toString
ch.boye.httpclientandroidlib.impl.cookie.RFC2109SpecFactory -> a.a.a.g.d.A:
    ch.boye.httpclientandroidlib.cookie.CookieSpec newInstance(ch.boye.httpclientandroidlib.params.HttpParams) -> a
ch.boye.httpclientandroidlib.impl.cookie.RFC2109VersionHandler -> a.a.a.g.d.B:
    void parse(ch.boye.httpclientandroidlib.cookie.SetCookie,java.lang.String) -> a
    void validate(ch.boye.httpclientandroidlib.cookie.Cookie,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> a
ch.boye.httpclientandroidlib.impl.cookie.RFC2965CommentUrlAttributeHandler -> a.a.a.g.d.C:
    void parse(ch.boye.httpclientandroidlib.cookie.SetCookie,java.lang.String) -> a
    void validate(ch.boye.httpclientandroidlib.cookie.Cookie,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> a
    boolean match(ch.boye.httpclientandroidlib.cookie.Cookie,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> b
ch.boye.httpclientandroidlib.impl.cookie.RFC2965DiscardAttributeHandler -> a.a.a.g.d.D:
    void parse(ch.boye.httpclientandroidlib.cookie.SetCookie,java.lang.String) -> a
    void validate(ch.boye.httpclientandroidlib.cookie.Cookie,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> a
    boolean match(ch.boye.httpclientandroidlib.cookie.Cookie,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> b
ch.boye.httpclientandroidlib.impl.cookie.RFC2965DomainAttributeHandler -> a.a.a.g.d.E:
    void parse(ch.boye.httpclientandroidlib.cookie.SetCookie,java.lang.String) -> a
    boolean domainMatch(java.lang.String,java.lang.String) -> a
    void validate(ch.boye.httpclientandroidlib.cookie.Cookie,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> a
    boolean match(ch.boye.httpclientandroidlib.cookie.Cookie,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> b
ch.boye.httpclientandroidlib.impl.cookie.RFC2965PortAttributeHandler -> a.a.a.g.d.F:
    int[] parsePortAttribute(java.lang.String) -> a
    boolean portMatch(int,int[]) -> a
    void parse(ch.boye.httpclientandroidlib.cookie.SetCookie,java.lang.String) -> a
    void validate(ch.boye.httpclientandroidlib.cookie.Cookie,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> a
    boolean match(ch.boye.httpclientandroidlib.cookie.Cookie,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> b
ch.boye.httpclientandroidlib.impl.cookie.RFC2965Spec -> a.a.a.g.d.G:
    java.util.List parse(ch.boye.httpclientandroidlib.Header,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> a
    java.util.List parse(ch.boye.httpclientandroidlib.HeaderElement[],ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> a
    java.util.List createCookies(ch.boye.httpclientandroidlib.HeaderElement[],ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> b
    void validate(ch.boye.httpclientandroidlib.cookie.Cookie,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> a
    boolean match(ch.boye.httpclientandroidlib.cookie.Cookie,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> b
    void formatCookieAsVer(ch.boye.httpclientandroidlib.util.CharArrayBuffer,ch.boye.httpclientandroidlib.cookie.Cookie,int) -> a
    ch.boye.httpclientandroidlib.cookie.CookieOrigin adjustEffectiveHost(ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> c
    int getVersion() -> a
    ch.boye.httpclientandroidlib.Header getVersionHeader() -> b
    java.lang.String toString() -> toString
ch.boye.httpclientandroidlib.impl.cookie.RFC2965SpecFactory -> a.a.a.g.d.H:
    ch.boye.httpclientandroidlib.cookie.CookieSpec newInstance(ch.boye.httpclientandroidlib.params.HttpParams) -> a
ch.boye.httpclientandroidlib.impl.cookie.RFC2965VersionAttributeHandler -> a.a.a.g.d.I:
    void parse(ch.boye.httpclientandroidlib.cookie.SetCookie,java.lang.String) -> a
    void validate(ch.boye.httpclientandroidlib.cookie.Cookie,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> a
    boolean match(ch.boye.httpclientandroidlib.cookie.Cookie,ch.boye.httpclientandroidlib.cookie.CookieOrigin) -> b
ch.boye.httpclientandroidlib.impl.entity.EntityDeserializer -> a.a.a.g.e.a:
    ch.boye.httpclientandroidlib.entity.ContentLengthStrategy lenStrategy -> a
    ch.boye.httpclientandroidlib.entity.BasicHttpEntity doDeserialize(ch.boye.httpclientandroidlib.io.SessionInputBuffer,ch.boye.httpclientandroidlib.HttpMessage) -> a
    ch.boye.httpclientandroidlib.HttpEntity deserialize(ch.boye.httpclientandroidlib.io.SessionInputBuffer,ch.boye.httpclientandroidlib.HttpMessage) -> b
ch.boye.httpclientandroidlib.impl.entity.EntitySerializer -> a.a.a.g.e.b:
    ch.boye.httpclientandroidlib.entity.ContentLengthStrategy lenStrategy -> a
    java.io.OutputStream doSerialize(ch.boye.httpclientandroidlib.io.SessionOutputBuffer,ch.boye.httpclientandroidlib.HttpMessage) -> a
    void serialize(ch.boye.httpclientandroidlib.io.SessionOutputBuffer,ch.boye.httpclientandroidlib.HttpMessage,ch.boye.httpclientandroidlib.HttpEntity) -> a
ch.boye.httpclientandroidlib.impl.entity.LaxContentLengthStrategy -> a.a.a.g.e.c:
    int implicitLen -> a
    long determineLength(ch.boye.httpclientandroidlib.HttpMessage) -> a
ch.boye.httpclientandroidlib.impl.entity.StrictContentLengthStrategy -> a.a.a.g.e.d:
    int implicitLen -> a
    long determineLength(ch.boye.httpclientandroidlib.HttpMessage) -> a
ch.boye.httpclientandroidlib.impl.io.AbstractMessageParser -> a.a.a.g.f.a:
    ch.boye.httpclientandroidlib.io.SessionInputBuffer sessionBuffer -> a
    int maxHeaderCount -> c
    int maxLineLen -> d
    java.util.List headerLines -> e
    ch.boye.httpclientandroidlib.message.LineParser lineParser -> b
    int state -> f
    ch.boye.httpclientandroidlib.HttpMessage message -> g
    ch.boye.httpclientandroidlib.Header[] parseHeaders(ch.boye.httpclientandroidlib.io.SessionInputBuffer,int,int,ch.boye.httpclientandroidlib.message.LineParser) -> a
    ch.boye.httpclientandroidlib.Header[] parseHeaders(ch.boye.httpclientandroidlib.io.SessionInputBuffer,int,int,ch.boye.httpclientandroidlib.message.LineParser,java.util.List) -> a
    ch.boye.httpclientandroidlib.HttpMessage parseHead(ch.boye.httpclientandroidlib.io.SessionInputBuffer) -> b
    ch.boye.httpclientandroidlib.HttpMessage parse() -> a
ch.boye.httpclientandroidlib.impl.io.AbstractMessageWriter -> a.a.a.g.f.b:
    ch.boye.httpclientandroidlib.io.SessionOutputBuffer sessionBuffer -> a
    ch.boye.httpclientandroidlib.util.CharArrayBuffer lineBuf -> b
    ch.boye.httpclientandroidlib.message.LineFormatter lineFormatter -> c
    void writeHeadLine(ch.boye.httpclientandroidlib.HttpMessage) -> a
    void write(ch.boye.httpclientandroidlib.HttpMessage) -> b
ch.boye.httpclientandroidlib.impl.io.AbstractSessionInputBuffer -> a.a.a.g.f.c:
    java.nio.charset.Charset ASCII -> a
    java.io.InputStream instream -> b
    byte[] buffer -> c
    int bufferpos -> d
    int bufferlen -> e
    ch.boye.httpclientandroidlib.util.ByteArrayBuffer linebuffer -> f
    java.nio.charset.Charset charset -> g
    java.nio.charset.CharsetDecoder decoder -> h
    java.nio.CharBuffer cbuf -> i
    boolean ascii -> j
    int maxLineLen -> k
    int minChunkLimit -> l
    ch.boye.httpclientandroidlib.impl.io.HttpTransportMetricsImpl metrics -> m
    java.nio.charset.CodingErrorAction onMalformedInputAction -> n
    java.nio.charset.CodingErrorAction onUnMappableInputAction -> o
    void init(java.io.InputStream,int,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    ch.boye.httpclientandroidlib.impl.io.HttpTransportMetricsImpl createTransportMetrics() -> d
    int length() -> e
    int fillBuffer() -> f
    boolean hasBufferedData() -> g
    int read() -> a
    int read(byte[],int,int) -> a
    int locateLF() -> c
    int readLine(ch.boye.httpclientandroidlib.util.CharArrayBuffer) -> a
    int lineFromLineBuffer(ch.boye.httpclientandroidlib.util.CharArrayBuffer) -> b
    int lineFromReadBuffer(ch.boye.httpclientandroidlib.util.CharArrayBuffer,int) -> a
    int appendDecoded(ch.boye.httpclientandroidlib.util.CharArrayBuffer,java.nio.ByteBuffer) -> a
    int handleDecodingResult(java.nio.charset.CoderResult,ch.boye.httpclientandroidlib.util.CharArrayBuffer,java.nio.ByteBuffer) -> a
    ch.boye.httpclientandroidlib.io.HttpTransportMetrics getMetrics() -> b
ch.boye.httpclientandroidlib.impl.io.AbstractSessionOutputBuffer -> a.a.a.g.f.d:
    java.nio.charset.Charset ASCII -> a
    byte[] CRLF -> b
    java.io.OutputStream outstream -> c
    ch.boye.httpclientandroidlib.util.ByteArrayBuffer buffer -> d
    java.nio.charset.Charset charset -> e
    java.nio.charset.CharsetEncoder encoder -> f
    java.nio.ByteBuffer bbuf -> g
    boolean ascii -> h
    int minChunkLimit -> i
    ch.boye.httpclientandroidlib.impl.io.HttpTransportMetricsImpl metrics -> j
    java.nio.charset.CodingErrorAction onMalformedInputAction -> k
    java.nio.charset.CodingErrorAction onUnMappableInputAction -> l
    void init(java.io.OutputStream,int,ch.boye.httpclientandroidlib.params.HttpParams) -> a
    ch.boye.httpclientandroidlib.impl.io.HttpTransportMetricsImpl createTransportMetrics() -> c
    int length() -> e
    void flushBuffer() -> d
    void flush() -> a
    void write(byte[],int,int) -> a
    void write(byte[]) -> a
    void write(int) -> a
    void writeLine(java.lang.String) -> a
    void writeLine(ch.boye.httpclientandroidlib.util.CharArrayBuffer) -> a
    void writeEncoded(java.nio.CharBuffer) -> a
    void handleEncodingResult(java.nio.charset.CoderResult) -> a
    ch.boye.httpclientandroidlib.io.HttpTransportMetrics getMetrics() -> b
ch.boye.httpclientandroidlib.impl.io.ChunkedInputStream -> a.a.a.g.f.e:
    ch.boye.httpclientandroidlib.io.SessionInputBuffer in -> a
    ch.boye.httpclientandroidlib.util.CharArrayBuffer buffer -> b
    int state -> c
    int chunkSize -> d
    int pos -> e
    boolean eof -> f
    boolean closed -> g
    ch.boye.httpclientandroidlib.Header[] footers -> h
    int available() -> available
    int read() -> read
    int read(byte[],int,int) -> read
    int read(byte[]) -> read
    void nextChunk() -> a
    int getChunkSize() -> b
    void parseTrailerHeaders() -> c
    void close() -> close
ch.boye.httpclientandroidlib.impl.io.ChunkedOutputStream -> a.a.a.g.f.f:
    ch.boye.httpclientandroidlib.io.SessionOutputBuffer out -> a
    byte[] cache -> b
    int cachePosition -> c
    boolean wroteLastChunk -> d
    boolean closed -> e
    void flushCache() -> a
    void flushCacheWithAppend(byte[],int,int) -> a
    void writeClosingChunk() -> b
    void finish() -> c
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void flush() -> flush
    void close() -> close
ch.boye.httpclientandroidlib.impl.io.ContentLengthInputStream -> a.a.a.g.f.g:
    long contentLength -> a
    long pos -> b
    boolean closed -> c
    ch.boye.httpclientandroidlib.io.SessionInputBuffer in -> d
    void close() -> close
    int available() -> available
    int read() -> read
    int read(byte[],int,int) -> read
    int read(byte[]) -> read
    long skip(long) -> skip
ch.boye.httpclientandroidlib.impl.io.ContentLengthOutputStream -> a.a.a.g.f.h:
    ch.boye.httpclientandroidlib.io.SessionOutputBuffer out -> a
    long contentLength -> b
    long total -> c
    boolean closed -> d
    void close() -> close
    void flush() -> flush
    void write(byte[],int,int) -> write
    void write(byte[]) -> write
    void write(int) -> write
ch.boye.httpclientandroidlib.impl.io.DefaultHttpResponseParser -> a.a.a.g.f.i:
    ch.boye.httpclientandroidlib.HttpResponseFactory responseFactory -> a
    ch.boye.httpclientandroidlib.util.CharArrayBuffer lineBuf -> c
    ch.boye.httpclientandroidlib.HttpResponse parseHead(ch.boye.httpclientandroidlib.io.SessionInputBuffer) -> a
    ch.boye.httpclientandroidlib.HttpMessage parseHead(ch.boye.httpclientandroidlib.io.SessionInputBuffer) -> b
ch.boye.httpclientandroidlib.impl.io.HttpRequestWriter -> a.a.a.g.f.j:
    void writeHeadLine(ch.boye.httpclientandroidlib.HttpRequest) -> a
    void writeHeadLine(ch.boye.httpclientandroidlib.HttpMessage) -> a
ch.boye.httpclientandroidlib.impl.io.HttpTransportMetricsImpl -> a.a.a.g.f.k:
    long bytesTransferred -> a
    void incrementBytesTransferred(long) -> a
ch.boye.httpclientandroidlib.impl.io.IdentityInputStream -> a.a.a.g.f.l:
    ch.boye.httpclientandroidlib.io.SessionInputBuffer in -> a
    boolean closed -> b
    int available() -> available
    void close() -> close
    int read() -> read
    int read(byte[],int,int) -> read
ch.boye.httpclientandroidlib.impl.io.IdentityOutputStream -> a.a.a.g.f.m:
    ch.boye.httpclientandroidlib.io.SessionOutputBuffer out -> a
    boolean closed -> b
    void close() -> close
    void flush() -> flush
    void write(byte[],int,int) -> write
    void write(byte[]) -> write
    void write(int) -> write
ch.boye.httpclientandroidlib.impl.io.SocketInputBuffer -> a.a.a.g.f.n:
    java.net.Socket socket -> a
    boolean eof -> b
    int fillBuffer() -> f
    boolean isDataAvailable(int) -> a
    boolean isEof() -> c
ch.boye.httpclientandroidlib.impl.io.SocketOutputBuffer -> a.a.a.g.f.o:
ch.boye.httpclientandroidlib.io.BufferInfo -> a.a.a.h.a:
    int length() -> e
ch.boye.httpclientandroidlib.io.EofSensor -> a.a.a.h.b:
    boolean isEof() -> c
ch.boye.httpclientandroidlib.io.HttpMessageParser -> a.a.a.h.c:
    ch.boye.httpclientandroidlib.HttpMessage parse() -> a
ch.boye.httpclientandroidlib.io.HttpMessageWriter -> a.a.a.h.d:
    void write(ch.boye.httpclientandroidlib.HttpMessage) -> b
ch.boye.httpclientandroidlib.io.HttpTransportMetrics -> a.a.a.h.e:
ch.boye.httpclientandroidlib.io.SessionInputBuffer -> a.a.a.h.f:
    int read(byte[],int,int) -> a
    int read() -> a
    int readLine(ch.boye.httpclientandroidlib.util.CharArrayBuffer) -> a
    boolean isDataAvailable(int) -> a
    ch.boye.httpclientandroidlib.io.HttpTransportMetrics getMetrics() -> b
ch.boye.httpclientandroidlib.io.SessionOutputBuffer -> a.a.a.h.g:
    void write(byte[],int,int) -> a
    void write(int) -> a
    void writeLine(java.lang.String) -> a
    void writeLine(ch.boye.httpclientandroidlib.util.CharArrayBuffer) -> a
    void flush() -> a
    ch.boye.httpclientandroidlib.io.HttpTransportMetrics getMetrics() -> b
ch.boye.httpclientandroidlib.message.AbstractHttpMessage -> a.a.a.i.a:
    ch.boye.httpclientandroidlib.message.HeaderGroup headergroup -> headergroup
    ch.boye.httpclientandroidlib.params.HttpParams params -> params
    boolean containsHeader(java.lang.String) -> containsHeader
    ch.boye.httpclientandroidlib.Header[] getHeaders(java.lang.String) -> getHeaders
    ch.boye.httpclientandroidlib.Header getFirstHeader(java.lang.String) -> getFirstHeader
    ch.boye.httpclientandroidlib.Header getLastHeader(java.lang.String) -> getLastHeader
    ch.boye.httpclientandroidlib.Header[] getAllHeaders() -> getAllHeaders
    void addHeader(ch.boye.httpclientandroidlib.Header) -> addHeader
    void addHeader(java.lang.String,java.lang.String) -> addHeader
    void setHeader(ch.boye.httpclientandroidlib.Header) -> setHeader
    void setHeader(java.lang.String,java.lang.String) -> setHeader
    void setHeaders(ch.boye.httpclientandroidlib.Header[]) -> setHeaders
    void removeHeader(ch.boye.httpclientandroidlib.Header) -> removeHeader
    void removeHeaders(java.lang.String) -> removeHeaders
    ch.boye.httpclientandroidlib.HeaderIterator headerIterator() -> headerIterator
    ch.boye.httpclientandroidlib.HeaderIterator headerIterator(java.lang.String) -> headerIterator
    ch.boye.httpclientandroidlib.params.HttpParams getParams() -> getParams
    void setParams(ch.boye.httpclientandroidlib.params.HttpParams) -> setParams
ch.boye.httpclientandroidlib.message.BasicHeader -> a.a.a.i.b:
    java.lang.String name -> a
    java.lang.String value -> b
    java.lang.String getName() -> c
    java.lang.String getValue() -> d
    java.lang.String toString() -> toString
    ch.boye.httpclientandroidlib.HeaderElement[] getElements() -> e
    java.lang.Object clone() -> clone
ch.boye.httpclientandroidlib.message.BasicHeaderElement -> a.a.a.i.c:
    java.lang.String name -> a
    java.lang.String value -> b
    ch.boye.httpclientandroidlib.NameValuePair[] parameters -> c
    java.lang.String getName() -> a
    java.lang.String getValue() -> b
    ch.boye.httpclientandroidlib.NameValuePair[] getParameters() -> c
    ch.boye.httpclientandroidlib.NameValuePair getParameterByName(java.lang.String) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
ch.boye.httpclientandroidlib.message.BasicHeaderElementIterator -> a.a.a.i.d:
    ch.boye.httpclientandroidlib.HeaderIterator headerIt -> a
    ch.boye.httpclientandroidlib.message.HeaderValueParser parser -> b
    ch.boye.httpclientandroidlib.HeaderElement currentElement -> c
    ch.boye.httpclientandroidlib.util.CharArrayBuffer buffer -> d
    ch.boye.httpclientandroidlib.message.ParserCursor cursor -> e
    void bufferHeaderValue() -> b
    void parseNextElement() -> c
    boolean hasNext() -> hasNext
    ch.boye.httpclientandroidlib.HeaderElement nextElement() -> a
    java.lang.Object next() -> next
    void remove() -> remove
ch.boye.httpclientandroidlib.message.BasicHeaderValueFormatter -> a.a.a.i.e:
    ch.boye.httpclientandroidlib.message.BasicHeaderValueFormatter DEFAULT -> a
    ch.boye.httpclientandroidlib.util.CharArrayBuffer formatNameValuePair(ch.boye.httpclientandroidlib.util.CharArrayBuffer,ch.boye.httpclientandroidlib.NameValuePair,boolean) -> a
    int estimateNameValuePairLen(ch.boye.httpclientandroidlib.NameValuePair) -> a
    void doFormatValue(ch.boye.httpclientandroidlib.util.CharArrayBuffer,java.lang.String,boolean) -> a
    boolean isSeparator(char) -> a
    boolean isUnsafe(char) -> b
ch.boye.httpclientandroidlib.message.BasicHeaderValueParser -> a.a.a.i.f:
    ch.boye.httpclientandroidlib.message.BasicHeaderValueParser DEFAULT -> a
    char[] ALL_DELIMITERS -> b
    ch.boye.httpclientandroidlib.HeaderElement[] parseElements(java.lang.String,ch.boye.httpclientandroidlib.message.HeaderValueParser) -> a
    ch.boye.httpclientandroidlib.HeaderElement[] parseElements(ch.boye.httpclientandroidlib.util.CharArrayBuffer,ch.boye.httpclientandroidlib.message.ParserCursor) -> a
    ch.boye.httpclientandroidlib.HeaderElement parseHeaderElement(ch.boye.httpclientandroidlib.util.CharArrayBuffer,ch.boye.httpclientandroidlib.message.ParserCursor) -> b
    ch.boye.httpclientandroidlib.HeaderElement createHeaderElement(java.lang.String,java.lang.String,ch.boye.httpclientandroidlib.NameValuePair[]) -> a
    ch.boye.httpclientandroidlib.NameValuePair[] parseParameters(ch.boye.httpclientandroidlib.util.CharArrayBuffer,ch.boye.httpclientandroidlib.message.ParserCursor) -> c
    ch.boye.httpclientandroidlib.NameValuePair parseNameValuePair(ch.boye.httpclientandroidlib.util.CharArrayBuffer,ch.boye.httpclientandroidlib.message.ParserCursor) -> d
    boolean isOneOf(char,char[]) -> a
    ch.boye.httpclientandroidlib.NameValuePair parseNameValuePair(ch.boye.httpclientandroidlib.util.CharArrayBuffer,ch.boye.httpclientandroidlib.message.ParserCursor,char[]) -> a
    ch.boye.httpclientandroidlib.NameValuePair createNameValuePair(java.lang.String,java.lang.String) -> a
ch.boye.httpclientandroidlib.message.BasicHttpRequest -> a.a.a.i.g:
    java.lang.String method -> a
    java.lang.String uri -> b
    ch.boye.httpclientandroidlib.RequestLine requestline -> c
    ch.boye.httpclientandroidlib.ProtocolVersion getProtocolVersion() -> getProtocolVersion
    ch.boye.httpclientandroidlib.RequestLine getRequestLine() -> getRequestLine
    java.lang.String toString() -> toString
ch.boye.httpclientandroidlib.message.BasicHttpResponse -> a.a.a.i.h:
    ch.boye.httpclientandroidlib.StatusLine statusline -> a
    ch.boye.httpclientandroidlib.HttpEntity entity -> b
    ch.boye.httpclientandroidlib.ReasonPhraseCatalog reasonCatalog -> c
    java.util.Locale locale -> d
    ch.boye.httpclientandroidlib.ProtocolVersion getProtocolVersion() -> getProtocolVersion
    ch.boye.httpclientandroidlib.StatusLine getStatusLine() -> a
    ch.boye.httpclientandroidlib.HttpEntity getEntity() -> b
    void setEntity(ch.boye.httpclientandroidlib.HttpEntity) -> a
    java.lang.String toString() -> toString
ch.boye.httpclientandroidlib.message.BasicLineFormatter -> a.a.a.i.i:
    ch.boye.httpclientandroidlib.message.BasicLineFormatter DEFAULT -> a
    ch.boye.httpclientandroidlib.util.CharArrayBuffer initBuffer(ch.boye.httpclientandroidlib.util.CharArrayBuffer) -> a
    ch.boye.httpclientandroidlib.util.CharArrayBuffer appendProtocolVersion(ch.boye.httpclientandroidlib.util.CharArrayBuffer,ch.boye.httpclientandroidlib.ProtocolVersion) -> a
    int estimateProtocolVersionLen(ch.boye.httpclientandroidlib.ProtocolVersion) -> a
    ch.boye.httpclientandroidlib.util.CharArrayBuffer formatRequestLine(ch.boye.httpclientandroidlib.util.CharArrayBuffer,ch.boye.httpclientandroidlib.RequestLine) -> a
    void doFormatRequestLine(ch.boye.httpclientandroidlib.util.CharArrayBuffer,ch.boye.httpclientandroidlib.RequestLine) -> b
    ch.boye.httpclientandroidlib.util.CharArrayBuffer formatStatusLine(ch.boye.httpclientandroidlib.util.CharArrayBuffer,ch.boye.httpclientandroidlib.StatusLine) -> a
    void doFormatStatusLine(ch.boye.httpclientandroidlib.util.CharArrayBuffer,ch.boye.httpclientandroidlib.StatusLine) -> b
    ch.boye.httpclientandroidlib.util.CharArrayBuffer formatHeader(ch.boye.httpclientandroidlib.util.CharArrayBuffer,ch.boye.httpclientandroidlib.Header) -> a
    void doFormatHeader(ch.boye.httpclientandroidlib.util.CharArrayBuffer,ch.boye.httpclientandroidlib.Header) -> b
ch.boye.httpclientandroidlib.message.BasicLineParser -> a.a.a.i.j:
    ch.boye.httpclientandroidlib.message.BasicLineParser DEFAULT -> a
    ch.boye.httpclientandroidlib.ProtocolVersion protocol -> b
    ch.boye.httpclientandroidlib.ProtocolVersion parseProtocolVersion(ch.boye.httpclientandroidlib.util.CharArrayBuffer,ch.boye.httpclientandroidlib.message.ParserCursor) -> a
    ch.boye.httpclientandroidlib.ProtocolVersion createProtocolVersion(int,int) -> a
    boolean hasProtocolVersion(ch.boye.httpclientandroidlib.util.CharArrayBuffer,ch.boye.httpclientandroidlib.message.ParserCursor) -> b
    ch.boye.httpclientandroidlib.StatusLine parseStatusLine(ch.boye.httpclientandroidlib.util.CharArrayBuffer,ch.boye.httpclientandroidlib.message.ParserCursor) -> c
    ch.boye.httpclientandroidlib.StatusLine createStatusLine(ch.boye.httpclientandroidlib.ProtocolVersion,int,java.lang.String) -> a
    ch.boye.httpclientandroidlib.Header parseHeader(ch.boye.httpclientandroidlib.util.CharArrayBuffer) -> a
    void skipWhitespace(ch.boye.httpclientandroidlib.util.CharArrayBuffer,ch.boye.httpclientandroidlib.message.ParserCursor) -> d
ch.boye.httpclientandroidlib.message.BasicListHeaderIterator -> a.a.a.i.k:
    java.util.List allHeaders -> a
    int currentIndex -> b
    int lastIndex -> c
    java.lang.String headerName -> d
    int findNext(int) -> a
    boolean filterHeader(int) -> b
    boolean hasNext() -> hasNext
    ch.boye.httpclientandroidlib.Header nextHeader() -> a
    java.lang.Object next() -> next
    void remove() -> remove
ch.boye.httpclientandroidlib.message.BasicNameValuePair -> a.a.a.i.l:
    java.lang.String name -> a
    java.lang.String value -> b
    java.lang.String getName() -> a
    java.lang.String getValue() -> b
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object clone() -> clone
ch.boye.httpclientandroidlib.message.BasicRequestLine -> a.a.a.i.m:
    ch.boye.httpclientandroidlib.ProtocolVersion protoversion -> a
    java.lang.String method -> b
    java.lang.String uri -> c
    java.lang.String getMethod() -> a
    ch.boye.httpclientandroidlib.ProtocolVersion getProtocolVersion() -> b
    java.lang.String getUri() -> c
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
ch.boye.httpclientandroidlib.message.BasicStatusLine -> a.a.a.i.n:
    ch.boye.httpclientandroidlib.ProtocolVersion protoVersion -> a
    int statusCode -> b
    java.lang.String reasonPhrase -> c
    int getStatusCode() -> b
    ch.boye.httpclientandroidlib.ProtocolVersion getProtocolVersion() -> a
    java.lang.String getReasonPhrase() -> c
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
ch.boye.httpclientandroidlib.message.BasicTokenIterator -> a.a.a.i.o:
    ch.boye.httpclientandroidlib.HeaderIterator headerIt -> a
    java.lang.String currentHeader -> b
    java.lang.String currentToken -> c
    int searchPos -> d
    boolean hasNext() -> hasNext
    java.lang.String nextToken() -> a
    java.lang.Object next() -> next
    void remove() -> remove
    int findNext(int) -> a
    java.lang.String createToken(java.lang.String,int,int) -> a
    int findTokenStart(int) -> b
    int findTokenSeparator(int) -> c
    int findTokenEnd(int) -> d
    boolean isTokenSeparator(char) -> a
    boolean isWhitespace(char) -> b
    boolean isTokenChar(char) -> c
    boolean isHttpSeparator(char) -> d
ch.boye.httpclientandroidlib.message.BufferedHeader -> a.a.a.i.p:
    java.lang.String name -> a
    ch.boye.httpclientandroidlib.util.CharArrayBuffer buffer -> b
    int valuePos -> c
    java.lang.String getName() -> c
    java.lang.String getValue() -> d
    ch.boye.httpclientandroidlib.HeaderElement[] getElements() -> e
    int getValuePos() -> b
    ch.boye.httpclientandroidlib.util.CharArrayBuffer getBuffer() -> a
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
ch.boye.httpclientandroidlib.message.HeaderGroup -> a.a.a.i.q:
    java.util.List headers -> a
    void clear() -> a
    void addHeader(ch.boye.httpclientandroidlib.Header) -> a
    void removeHeader(ch.boye.httpclientandroidlib.Header) -> b
    void updateHeader(ch.boye.httpclientandroidlib.Header) -> c
    void setHeaders(ch.boye.httpclientandroidlib.Header[]) -> a
    ch.boye.httpclientandroidlib.Header[] getHeaders(java.lang.String) -> a
    ch.boye.httpclientandroidlib.Header getFirstHeader(java.lang.String) -> b
    ch.boye.httpclientandroidlib.Header getLastHeader(java.lang.String) -> c
    ch.boye.httpclientandroidlib.Header[] getAllHeaders() -> b
    boolean containsHeader(java.lang.String) -> d
    ch.boye.httpclientandroidlib.HeaderIterator iterator() -> c
    ch.boye.httpclientandroidlib.HeaderIterator iterator(java.lang.String) -> e
    java.lang.Object clone() -> clone
    java.lang.String toString() -> toString
ch.boye.httpclientandroidlib.message.HeaderValueParser -> a.a.a.i.r:
    ch.boye.httpclientandroidlib.HeaderElement[] parseElements(ch.boye.httpclientandroidlib.util.CharArrayBuffer,ch.boye.httpclientandroidlib.message.ParserCursor) -> a
    ch.boye.httpclientandroidlib.HeaderElement parseHeaderElement(ch.boye.httpclientandroidlib.util.CharArrayBuffer,ch.boye.httpclientandroidlib.message.ParserCursor) -> b
ch.boye.httpclientandroidlib.message.LineFormatter -> a.a.a.i.s:
    ch.boye.httpclientandroidlib.util.CharArrayBuffer formatRequestLine(ch.boye.httpclientandroidlib.util.CharArrayBuffer,ch.boye.httpclientandroidlib.RequestLine) -> a
    ch.boye.httpclientandroidlib.util.CharArrayBuffer formatHeader(ch.boye.httpclientandroidlib.util.CharArrayBuffer,ch.boye.httpclientandroidlib.Header) -> a
ch.boye.httpclientandroidlib.message.LineParser -> a.a.a.i.t:
    boolean hasProtocolVersion(ch.boye.httpclientandroidlib.util.CharArrayBuffer,ch.boye.httpclientandroidlib.message.ParserCursor) -> b
    ch.boye.httpclientandroidlib.StatusLine parseStatusLine(ch.boye.httpclientandroidlib.util.CharArrayBuffer,ch.boye.httpclientandroidlib.message.ParserCursor) -> c
    ch.boye.httpclientandroidlib.Header parseHeader(ch.boye.httpclientandroidlib.util.CharArrayBuffer) -> a
ch.boye.httpclientandroidlib.message.ParserCursor -> a.a.a.i.u:
    int lowerBound -> a
    int upperBound -> b
    int pos -> c
    int getUpperBound() -> a
    int getPos() -> b
    void updatePos(int) -> a
    boolean atEnd() -> c
    java.lang.String toString() -> toString
ch.boye.httpclientandroidlib.params.AbstractHttpParams -> a.a.a.j.a:
    int getIntParameter(java.lang.String,int) -> a
    ch.boye.httpclientandroidlib.params.HttpParams setIntParameter(java.lang.String,int) -> b
    boolean getBooleanParameter(java.lang.String,boolean) -> a
    ch.boye.httpclientandroidlib.params.HttpParams setBooleanParameter(java.lang.String,boolean) -> b
    boolean isParameterTrue(java.lang.String) -> b
    boolean isParameterFalse(java.lang.String) -> c
ch.boye.httpclientandroidlib.params.BasicHttpParams -> a.a.a.j.b:
    java.util.HashMap parameters -> a
    java.lang.Object getParameter(java.lang.String) -> a
    ch.boye.httpclientandroidlib.params.HttpParams setParameter(java.lang.String,java.lang.Object) -> a
    java.lang.Object clone() -> clone
    void copyParams(ch.boye.httpclientandroidlib.params.HttpParams) -> a
ch.boye.httpclientandroidlib.params.HttpConnectionParams -> a.a.a.j.c:
    int getSoTimeout(ch.boye.httpclientandroidlib.params.HttpParams) -> a
    boolean getSoReuseaddr(ch.boye.httpclientandroidlib.params.HttpParams) -> b
    boolean getTcpNoDelay(ch.boye.httpclientandroidlib.params.HttpParams) -> c
    void setTcpNoDelay(ch.boye.httpclientandroidlib.params.HttpParams,boolean) -> a
    int getSocketBufferSize(ch.boye.httpclientandroidlib.params.HttpParams) -> d
    void setSocketBufferSize(ch.boye.httpclientandroidlib.params.HttpParams,int) -> a
    int getLinger(ch.boye.httpclientandroidlib.params.HttpParams) -> e
    int getConnectionTimeout(ch.boye.httpclientandroidlib.params.HttpParams) -> f
    boolean isStaleCheckingEnabled(ch.boye.httpclientandroidlib.params.HttpParams) -> g
ch.boye.httpclientandroidlib.params.HttpParams -> a.a.a.j.d:
    java.lang.Object getParameter(java.lang.String) -> a
    ch.boye.httpclientandroidlib.params.HttpParams setParameter(java.lang.String,java.lang.Object) -> a
    int getIntParameter(java.lang.String,int) -> a
    ch.boye.httpclientandroidlib.params.HttpParams setIntParameter(java.lang.String,int) -> b
    boolean getBooleanParameter(java.lang.String,boolean) -> a
    ch.boye.httpclientandroidlib.params.HttpParams setBooleanParameter(java.lang.String,boolean) -> b
    boolean isParameterTrue(java.lang.String) -> b
    boolean isParameterFalse(java.lang.String) -> c
ch.boye.httpclientandroidlib.params.HttpProtocolParams -> a.a.a.j.e:
    java.lang.String getHttpElementCharset(ch.boye.httpclientandroidlib.params.HttpParams) -> a
    void setContentCharset(ch.boye.httpclientandroidlib.params.HttpParams,java.lang.String) -> a
    ch.boye.httpclientandroidlib.ProtocolVersion getVersion(ch.boye.httpclientandroidlib.params.HttpParams) -> b
    void setVersion(ch.boye.httpclientandroidlib.params.HttpParams,ch.boye.httpclientandroidlib.ProtocolVersion) -> a
    java.lang.String getUserAgent(ch.boye.httpclientandroidlib.params.HttpParams) -> c
    void setUserAgent(ch.boye.httpclientandroidlib.params.HttpParams,java.lang.String) -> b
    boolean useExpectContinue(ch.boye.httpclientandroidlib.params.HttpParams) -> d
    void setUseExpectContinue(ch.boye.httpclientandroidlib.params.HttpParams,boolean) -> a
    java.nio.charset.CodingErrorAction getMalformedInputAction(ch.boye.httpclientandroidlib.params.HttpParams) -> e
    java.nio.charset.CodingErrorAction getUnmappableInputAction(ch.boye.httpclientandroidlib.params.HttpParams) -> f
ch.boye.httpclientandroidlib.params.SyncBasicHttpParams -> a.a.a.j.f:
    ch.boye.httpclientandroidlib.params.HttpParams setParameter(java.lang.String,java.lang.Object) -> a
    java.lang.Object getParameter(java.lang.String) -> a
    java.lang.Object clone() -> clone
ch.boye.httpclientandroidlib.pool.PoolEntry -> a.a.a.k.a:
    java.lang.String id -> a
    java.lang.Object route -> b
    java.lang.Object conn -> c
    long created -> d
    long validUnit -> e
    long updated -> f
    long expiry -> g
    java.lang.Object state -> h
    java.lang.Object getRoute() -> f
    java.lang.Object getConnection() -> g
    void setState(java.lang.Object) -> a
    long getExpiry() -> h
    void updateExpiry(long,java.util.concurrent.TimeUnit) -> a
    boolean isExpired(long) -> a
    java.lang.String toString() -> toString
ch.boye.httpclientandroidlib.protocol.BasicHttpContext -> a.a.a.l.a:
    ch.boye.httpclientandroidlib.protocol.HttpContext parentContext -> a
    java.util.Map map -> b
    java.lang.Object getAttribute(java.lang.String) -> a
    void setAttribute(java.lang.String,java.lang.Object) -> a
    java.lang.String toString() -> toString
ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor -> a.a.a.l.b:
    java.util.List requestInterceptors -> a
    java.util.List responseInterceptors -> b
    void addRequestInterceptor(ch.boye.httpclientandroidlib.HttpRequestInterceptor) -> a
    void addInterceptor(ch.boye.httpclientandroidlib.HttpRequestInterceptor) -> b
    int getRequestInterceptorCount() -> a
    ch.boye.httpclientandroidlib.HttpRequestInterceptor getRequestInterceptor(int) -> a
    void addResponseInterceptor(ch.boye.httpclientandroidlib.HttpResponseInterceptor) -> a
    void addInterceptor(ch.boye.httpclientandroidlib.HttpResponseInterceptor) -> b
    int getResponseInterceptorCount() -> b
    ch.boye.httpclientandroidlib.HttpResponseInterceptor getResponseInterceptor(int) -> b
    void process(ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    void process(ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    void copyInterceptors(ch.boye.httpclientandroidlib.protocol.BasicHttpProcessor) -> a
    java.lang.Object clone() -> clone
ch.boye.httpclientandroidlib.protocol.DefaultedHttpContext -> a.a.a.l.c:
    ch.boye.httpclientandroidlib.protocol.HttpContext local -> a
    ch.boye.httpclientandroidlib.protocol.HttpContext defaults -> b
    java.lang.Object getAttribute(java.lang.String) -> a
    void setAttribute(java.lang.String,java.lang.Object) -> a
    java.lang.String toString() -> toString
ch.boye.httpclientandroidlib.protocol.HTTP -> a.a.a.l.d:
    java.nio.charset.Charset DEF_CONTENT_CHARSET -> a
    java.nio.charset.Charset DEF_PROTOCOL_CHARSET -> b
    boolean isWhitespace(char) -> a
ch.boye.httpclientandroidlib.protocol.HttpContext -> a.a.a.l.e:
    java.lang.Object getAttribute(java.lang.String) -> a
    void setAttribute(java.lang.String,java.lang.Object) -> a
ch.boye.httpclientandroidlib.protocol.HttpProcessor -> a.a.a.l.f:
ch.boye.httpclientandroidlib.protocol.HttpRequestExecutor -> a.a.a.l.g:
    boolean canResponseHaveBody(ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.HttpResponse) -> a
    ch.boye.httpclientandroidlib.HttpResponse execute(ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.HttpClientConnection,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    void closeConnection(ch.boye.httpclientandroidlib.HttpClientConnection) -> a
    void preProcess(ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.protocol.HttpProcessor,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    ch.boye.httpclientandroidlib.HttpResponse doSendRequest(ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.HttpClientConnection,ch.boye.httpclientandroidlib.protocol.HttpContext) -> b
    ch.boye.httpclientandroidlib.HttpResponse doReceiveResponse(ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.HttpClientConnection,ch.boye.httpclientandroidlib.protocol.HttpContext) -> c
    void postProcess(ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpProcessor,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
ch.boye.httpclientandroidlib.protocol.ImmutableHttpProcessor -> a.a.a.l.h:
    ch.boye.httpclientandroidlib.HttpRequestInterceptor[] requestInterceptors -> a
    ch.boye.httpclientandroidlib.HttpResponseInterceptor[] responseInterceptors -> b
    void process(ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
    void process(ch.boye.httpclientandroidlib.HttpResponse,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
ch.boye.httpclientandroidlib.protocol.RequestContent -> a.a.a.l.i:
    boolean overwrite -> a
    void process(ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
ch.boye.httpclientandroidlib.protocol.RequestExpectContinue -> a.a.a.l.j:
    void process(ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
ch.boye.httpclientandroidlib.protocol.RequestTargetHost -> a.a.a.l.k:
    void process(ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
ch.boye.httpclientandroidlib.protocol.RequestUserAgent -> a.a.a.l.l:
    void process(ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
ch.boye.httpclientandroidlib.util.ByteArrayBuffer -> a.a.a.m.a:
    byte[] buffer -> a
    int len -> b
    void expand(int) -> c
    void append(byte[],int,int) -> a
    void append(int) -> a
    void append(char[],int,int) -> a
    void append(ch.boye.httpclientandroidlib.util.CharArrayBuffer,int,int) -> a
    void clear() -> a
    byte[] toByteArray() -> b
    int byteAt(int) -> b
    int capacity() -> c
    int length() -> d
    byte[] buffer() -> e
    boolean isEmpty() -> f
    boolean isFull() -> g
ch.boye.httpclientandroidlib.util.CharArrayBuffer -> a.a.a.m.b:
    char[] buffer -> a
    int len -> b
    void expand(int) -> d
    void append(char[],int,int) -> a
    void append(java.lang.String) -> a
    void append(ch.boye.httpclientandroidlib.util.CharArrayBuffer,int,int) -> a
    void append(char) -> a
    void append(byte[],int,int) -> a
    void append(ch.boye.httpclientandroidlib.util.ByteArrayBuffer,int,int) -> a
    void clear() -> a
    char charAt(int) -> a
    char[] buffer() -> b
    int length() -> c
    void ensureCapacity(int) -> b
    boolean isEmpty() -> d
    int indexOf(int,int,int) -> a
    int indexOf(int) -> c
    java.lang.String substring(int,int) -> a
    java.lang.String substringTrimmed(int,int) -> b
    java.lang.String toString() -> toString
ch.boye.httpclientandroidlib.util.EncodingUtils -> a.a.a.m.c:
    byte[] getBytes(java.lang.String,java.lang.String) -> a
    byte[] getAsciiBytes(java.lang.String) -> a
    java.lang.String getAsciiString(byte[],int,int) -> a
    java.lang.String getAsciiString(byte[]) -> a
ch.boye.httpclientandroidlib.util.EntityUtils -> a.a.a.m.d:
    void consume(ch.boye.httpclientandroidlib.HttpEntity) -> a
    byte[] toByteArray(ch.boye.httpclientandroidlib.HttpEntity) -> b
ch.boye.httpclientandroidlib.util.LangUtils -> a.a.a.m.e:
    int hashCode(int,int) -> a
    int hashCode(int,boolean) -> a
    int hashCode(int,java.lang.Object) -> a
    boolean equals(java.lang.Object,java.lang.Object) -> a
    boolean equals(java.lang.Object[],java.lang.Object[]) -> a
ch.boye.httpclientandroidlib.util.VersionInfo -> a.a.a.m.f:
    java.lang.String infoPackage -> a
    java.lang.String infoModule -> b
    java.lang.String infoRelease -> c
    java.lang.String infoTimestamp -> d
    java.lang.String infoClassloader -> e
    java.lang.String getRelease() -> a
    java.lang.String toString() -> toString
    ch.boye.httpclientandroidlib.util.VersionInfo loadVersionInfo(java.lang.String,java.lang.ClassLoader) -> a
    ch.boye.httpclientandroidlib.util.VersionInfo fromMap(java.lang.String,java.util.Map,java.lang.ClassLoader) -> a
com.dropbox.client2.DropboxAPI -> com.dropbox.client2.DropboxAPI:
    java.lang.String SDK_VERSION -> a
    com.dropbox.client2.session.Session session -> b
    com.dropbox.client2.session.Session getSession() -> a
    com.dropbox.client2.DropboxAPI$DropboxInputStream getFileStream(java.lang.String,java.lang.String) -> a
    com.dropbox.client2.DropboxAPI$Entry putFileOverwrite(java.lang.String,java.io.InputStream,long,com.dropbox.client2.ProgressListener) -> a
    com.dropbox.client2.DropboxAPI$UploadRequest putFileOverwriteRequest(java.lang.String,java.io.InputStream,long,com.dropbox.client2.ProgressListener) -> b
    com.dropbox.client2.DropboxAPI$Entry metadata(java.lang.String,int,java.lang.String,boolean,java.lang.String) -> a
    com.dropbox.client2.DropboxAPI$Entry move(java.lang.String,java.lang.String) -> b
    com.dropbox.client2.DropboxAPI$Entry copy(java.lang.String,java.lang.String) -> c
    com.dropbox.client2.DropboxAPI$Entry createFolder(java.lang.String) -> a
    void delete(java.lang.String) -> b
    boolean getFromMapAsBoolean(java.util.Map,java.lang.String) -> a
    com.dropbox.client2.DropboxAPI$UploadRequest putFileRequest(java.lang.String,java.io.InputStream,long,boolean,java.lang.String,com.dropbox.client2.ProgressListener) -> a
    void assertAuthenticated() -> b
    long getFromMapAsLong(java.util.Map,java.lang.String) -> b
com.dropbox.client2.DropboxAPI$1 -> com.dropbox.client2.DropboxAPI$1:
com.dropbox.client2.DropboxAPI$Account -> com.dropbox.client2.DropboxAPI$Account:
com.dropbox.client2.DropboxAPI$BasicUploadRequest -> com.dropbox.client2.DropboxAPI$BasicUploadRequest:
    org.apache.http.client.methods.HttpUriRequest request -> request
    com.dropbox.client2.session.Session session -> session
    void abort() -> abort
    com.dropbox.client2.DropboxAPI$Entry upload() -> upload
com.dropbox.client2.DropboxAPI$ChunkedUploadRequest -> com.dropbox.client2.DropboxAPI$ChunkedUploadRequest:
com.dropbox.client2.DropboxAPI$ChunkedUploadResponse -> com.dropbox.client2.DropboxAPI$ChunkedUploadResponse:
com.dropbox.client2.DropboxAPI$ChunkedUploader -> com.dropbox.client2.DropboxAPI$ChunkedUploader:
com.dropbox.client2.DropboxAPI$CreatedCopyRef -> com.dropbox.client2.DropboxAPI$CreatedCopyRef:
com.dropbox.client2.DropboxAPI$DeltaEntry -> com.dropbox.client2.DropboxAPI$DeltaEntry:
    java.lang.String lcPath -> a
    java.lang.Object metadata -> b
com.dropbox.client2.DropboxAPI$DeltaEntry$JsonExtractor -> com.dropbox.client2.DropboxAPI$DeltaEntry$JsonExtractor:
    com.dropbox.client2.jsonextract.JsonExtractor mdExtractor -> mdExtractor
    com.dropbox.client2.DropboxAPI$DeltaEntry extract(com.dropbox.client2.jsonextract.JsonThing) -> extract
    com.dropbox.client2.DropboxAPI$DeltaEntry extract(com.dropbox.client2.jsonextract.JsonThing,com.dropbox.client2.jsonextract.JsonExtractor) -> extract
    java.lang.Object extract(com.dropbox.client2.jsonextract.JsonThing) -> extract
com.dropbox.client2.DropboxAPI$DeltaPage -> com.dropbox.client2.DropboxAPI$DeltaPage:
com.dropbox.client2.DropboxAPI$DropboxFileInfo -> com.dropbox.client2.DropboxAPI$DropboxFileInfo:
    java.lang.String mimeType -> a
    long fileSize -> b
    java.lang.String charset -> c
    com.dropbox.client2.DropboxAPI$Entry metadata -> d
    com.dropbox.client2.DropboxAPI$Entry parseXDropboxMetadata(org.apache.http.HttpResponse) -> a
    long parseFileSize(org.apache.http.HttpResponse,com.dropbox.client2.DropboxAPI$Entry) -> a
com.dropbox.client2.DropboxAPI$DropboxInputStream -> com.dropbox.client2.DropboxAPI$DropboxInputStream:
    org.apache.http.client.methods.HttpUriRequest request -> a
    com.dropbox.client2.DropboxAPI$DropboxFileInfo info -> b
    void close() -> close
com.dropbox.client2.DropboxAPI$DropboxLink -> com.dropbox.client2.DropboxAPI$DropboxLink:
com.dropbox.client2.DropboxAPI$Entry -> com.dropbox.client2.DropboxAPI$Entry:
    long bytes -> a
    java.lang.String hash -> b
    java.lang.String icon -> c
    boolean isDir -> d
    java.lang.String modified -> e
    java.lang.String clientMtime -> f
    java.lang.String path -> g
    java.lang.String root -> h
    java.lang.String size -> i
    java.lang.String mimeType -> j
    java.lang.String rev -> k
    boolean thumbExists -> l
    boolean isDeleted -> m
    java.util.List contents -> n
    com.dropbox.client2.jsonextract.JsonExtractor JsonExtractor -> o
    java.lang.String fileName() -> a
    java.lang.String parentPath() -> b
com.dropbox.client2.DropboxAPI$Entry$1 -> com.dropbox.client2.DropboxAPI$Entry$1:
    com.dropbox.client2.DropboxAPI$Entry extract(com.dropbox.client2.jsonextract.JsonThing) -> extract
    java.lang.Object extract(com.dropbox.client2.jsonextract.JsonThing) -> extract
com.dropbox.client2.DropboxAPI$RequestAndResponse -> com.dropbox.client2.DropboxAPI$RequestAndResponse:
    org.apache.http.client.methods.HttpUriRequest request -> a
    org.apache.http.HttpResponse response -> b
com.dropbox.client2.DropboxAPI$ThumbFormat -> com.dropbox.client2.DropboxAPI$ThumbFormat:
    com.dropbox.client2.DropboxAPI$ThumbFormat PNG -> a
    com.dropbox.client2.DropboxAPI$ThumbFormat JPEG -> b
    com.dropbox.client2.DropboxAPI$ThumbFormat[] $VALUES -> c
    com.dropbox.client2.DropboxAPI$ThumbFormat[] values() -> values
    com.dropbox.client2.DropboxAPI$ThumbFormat valueOf(java.lang.String) -> valueOf
com.dropbox.client2.DropboxAPI$ThumbSize -> com.dropbox.client2.DropboxAPI$ThumbSize:
    com.dropbox.client2.DropboxAPI$ThumbSize ICON_32x32 -> a
    com.dropbox.client2.DropboxAPI$ThumbSize ICON_64x64 -> b
    com.dropbox.client2.DropboxAPI$ThumbSize ICON_128x128 -> c
    com.dropbox.client2.DropboxAPI$ThumbSize ICON_256x256 -> d
    com.dropbox.client2.DropboxAPI$ThumbSize BESTFIT_320x240 -> e
    com.dropbox.client2.DropboxAPI$ThumbSize BESTFIT_480x320 -> f
    com.dropbox.client2.DropboxAPI$ThumbSize BESTFIT_640x480 -> g
    com.dropbox.client2.DropboxAPI$ThumbSize BESTFIT_960x640 -> h
    com.dropbox.client2.DropboxAPI$ThumbSize BESTFIT_1024x768 -> i
    java.lang.String size -> j
    com.dropbox.client2.DropboxAPI$ThumbSize[] $VALUES -> k
    com.dropbox.client2.DropboxAPI$ThumbSize[] values() -> values
    com.dropbox.client2.DropboxAPI$ThumbSize valueOf(java.lang.String) -> valueOf
com.dropbox.client2.DropboxAPI$UploadRequest -> com.dropbox.client2.DropboxAPI$UploadRequest:
    com.dropbox.client2.DropboxAPI$Entry upload() -> upload
com.dropbox.client2.ProgressListener -> com.dropbox.client2.ProgressListener:
    void onProgress(long,long) -> onProgress
    long progressInterval() -> progressInterval
com.dropbox.client2.ProgressListener$Adjusted -> com.dropbox.client2.ProgressListener$Adjusted:
    com.dropbox.client2.ProgressListener relay -> relay
    long bytesOffset -> bytesOffset
    long adjustedTotal -> adjustedTotal
    void onProgress(long,long) -> onProgress
    long progressInterval() -> progressInterval
com.dropbox.client2.ProgressListener$ProgressHttpEntity -> com.dropbox.client2.ProgressListener$ProgressHttpEntity:
    com.dropbox.client2.ProgressListener listener -> a
    long length -> b
    void writeTo(java.io.OutputStream) -> writeTo
    com.dropbox.client2.ProgressListener access$000(com.dropbox.client2.ProgressListener$ProgressHttpEntity) -> a
    long access$100(com.dropbox.client2.ProgressListener$ProgressHttpEntity) -> b
com.dropbox.client2.ProgressListener$ProgressHttpEntity$CountingOutputStream -> com.dropbox.client2.ProgressListener$ProgressHttpEntity$CountingOutputStream:
    long lastListened -> b
    long intervalMs -> c
    long transferred -> d
    com.dropbox.client2.ProgressListener$ProgressHttpEntity this$0 -> a
    void write(byte[],int,int) -> write
    void write(int) -> write
com.dropbox.client2.RESTUtility -> com.dropbox.client2.RESTUtility:
    java.text.DateFormat dateFormat -> a
    java.lang.Object request(com.dropbox.client2.RESTUtility$RequestMethod,java.lang.String,java.lang.String,int,java.lang.String[],com.dropbox.client2.session.Session) -> a
    com.dropbox.client2.DropboxAPI$RequestAndResponse streamRequest(com.dropbox.client2.RESTUtility$RequestMethod,java.lang.String,java.lang.String,int,java.lang.String[],com.dropbox.client2.session.Session) -> b
    java.lang.Object parseAsJSON(org.apache.http.HttpResponse) -> a
    java.util.Map parseAsQueryString(org.apache.http.HttpResponse) -> b
    org.apache.http.HttpResponse execute(com.dropbox.client2.session.Session,org.apache.http.client.methods.HttpUriRequest) -> a
    org.apache.http.HttpResponse execute(com.dropbox.client2.session.Session,org.apache.http.client.methods.HttpUriRequest,int) -> a
    boolean isRequestRepeatable(org.apache.http.HttpRequest) -> a
    java.lang.String buildURL(java.lang.String,int,java.lang.String,java.lang.String[]) -> a
    java.util.Date parseDate(java.lang.String) -> a
    org.apache.http.client.HttpClient updatedHttpClient(com.dropbox.client2.session.Session) -> a
    void updateClientProxy(org.apache.http.client.HttpClient,com.dropbox.client2.session.Session) -> a
    java.lang.String urlencode(java.lang.String[]) -> a
com.dropbox.client2.RESTUtility$RequestMethod -> com.dropbox.client2.RESTUtility$RequestMethod:
    com.dropbox.client2.RESTUtility$RequestMethod GET -> a
    com.dropbox.client2.RESTUtility$RequestMethod POST -> b
    com.dropbox.client2.RESTUtility$RequestMethod[] $VALUES -> c
    com.dropbox.client2.RESTUtility$RequestMethod[] values() -> values
    com.dropbox.client2.RESTUtility$RequestMethod valueOf(java.lang.String) -> valueOf
com.dropbox.client2.SdkVersion -> com.dropbox.client2.SdkVersion:
    java.lang.String get() -> a
com.dropbox.client2.android.AndroidAuthSession -> com.dropbox.client2.android.AndroidAuthSession:
    void startAuthentication(android.content.Context) -> startAuthentication
    boolean authenticationSuccessful() -> authenticationSuccessful
    java.lang.String finishAuthentication() -> finishAuthentication
    void unlink() -> unlink
com.dropbox.client2.android.AndroidAuthSession$1 -> com.dropbox.client2.android.AndroidAuthSession$1:
    com.dropbox.client2.android.AndroidAuthSession this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.dropbox.client2.android.AuthActivity -> com.dropbox.client2.android.AuthActivity:
    android.content.Intent lastResult -> a
    java.lang.String consumerKey -> b
    java.lang.String consumerSecret -> c
    boolean hasDelegated -> d
    boolean gotNewIntent -> e
    java.lang.String[] DROPBOX_APP_SIGNATURES -> f
    void onCreate(android.os.Bundle) -> onCreate
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onResume() -> onResume
    void onNewIntent(android.content.Intent) -> onNewIntent
    java.lang.String getConsumerSig() -> a
    boolean hasDropboxApp(android.content.Intent) -> a
    void startWebAuth() -> b
com.dropbox.client2.exception.DropboxException -> com.dropbox.client2.exception.DropboxException:
    long serialVersionUID -> serialVersionUID
com.dropbox.client2.exception.DropboxFileSizeException -> com.dropbox.client2.exception.DropboxFileSizeException:
    long serialVersionUID -> serialVersionUID
com.dropbox.client2.exception.DropboxIOException -> com.dropbox.client2.exception.DropboxIOException:
    long serialVersionUID -> serialVersionUID
com.dropbox.client2.exception.DropboxLocalStorageFullException -> com.dropbox.client2.exception.DropboxLocalStorageFullException:
    long serialVersionUID -> serialVersionUID
com.dropbox.client2.exception.DropboxParseException -> com.dropbox.client2.exception.DropboxParseException:
    long serialVersionUID -> serialVersionUID
    java.lang.String stringifyBody(java.io.BufferedReader) -> stringifyBody
com.dropbox.client2.exception.DropboxPartialFileException -> com.dropbox.client2.exception.DropboxPartialFileException:
    long serialVersionUID -> serialVersionUID
    long bytesTransferred -> bytesTransferred
com.dropbox.client2.exception.DropboxSSLException -> com.dropbox.client2.exception.DropboxSSLException:
    long serialVersionUID -> serialVersionUID
com.dropbox.client2.exception.DropboxServerException -> com.dropbox.client2.exception.DropboxServerException:
    int _200_OK -> _200_OK
    int _206_PARTIAL_CONTENT -> _206_PARTIAL_CONTENT
    int _302_FOUND -> _302_FOUND
    int _304_NOT_MODIFIED -> _304_NOT_MODIFIED
    int _400_BAD_REQUEST -> _400_BAD_REQUEST
    int _401_UNAUTHORIZED -> _401_UNAUTHORIZED
    int _403_FORBIDDEN -> _403_FORBIDDEN
    int _404_NOT_FOUND -> _404_NOT_FOUND
    int _405_METHOD_NOT_ALLOWED -> _405_METHOD_NOT_ALLOWED
    int _406_NOT_ACCEPTABLE -> _406_NOT_ACCEPTABLE
    int _409_CONFLICT -> _409_CONFLICT
    int _411_LENGTH_REQUIRED -> _411_LENGTH_REQUIRED
    int _415_UNSUPPORTED_MEDIA -> _415_UNSUPPORTED_MEDIA
    int _500_INTERNAL_SERVER_ERROR -> _500_INTERNAL_SERVER_ERROR
    int _501_NOT_IMPLEMENTED -> _501_NOT_IMPLEMENTED
    int _502_BAD_GATEWAY -> _502_BAD_GATEWAY
    int _503_SERVICE_UNAVAILABLE -> _503_SERVICE_UNAVAILABLE
    int _507_INSUFFICIENT_STORAGE -> _507_INSUFFICIENT_STORAGE
    long serialVersionUID -> serialVersionUID
    com.dropbox.client2.exception.DropboxServerException$Error body -> body
    int error -> error
    java.lang.String reason -> reason
    java.lang.String server -> server
    java.lang.String location -> location
    java.util.Map parsedResponse -> parsedResponse
    boolean isDuplicateAccount() -> isDuplicateAccount
    java.lang.String toString() -> toString
    boolean isValidWithNullBody(org.apache.http.HttpResponse) -> isValidWithNullBody
    java.lang.String getHeader(org.apache.http.HttpResponse,java.lang.String) -> getHeader
com.dropbox.client2.exception.DropboxServerException$Error -> com.dropbox.client2.exception.DropboxServerException$Error:
    java.lang.String error -> a
    java.lang.String userError -> b
    java.util.Map fields -> c
com.dropbox.client2.exception.DropboxUnlinkedException -> com.dropbox.client2.exception.DropboxUnlinkedException:
    long serialVersionUID -> serialVersionUID
com.dropbox.client2.jsonextract.JsonBase -> com.dropbox.client2.jsonextract.JsonBase:
    java.lang.Object internal -> internal
    java.lang.String path -> path
    com.dropbox.client2.jsonextract.JsonExtractionException error(java.lang.String) -> error
com.dropbox.client2.jsonextract.JsonExtractionException -> com.dropbox.client2.jsonextract.JsonExtractionException:
    java.lang.String summarizeValue(java.lang.Object) -> a
com.dropbox.client2.jsonextract.JsonExtractor -> com.dropbox.client2.jsonextract.JsonExtractor:
    java.lang.Object extract(com.dropbox.client2.jsonextract.JsonThing) -> extract
com.dropbox.client2.jsonextract.JsonList -> com.dropbox.client2.jsonextract.JsonList:
    java.lang.String pathConcatIndex(java.lang.String,int) -> pathConcatIndex
    com.dropbox.client2.jsonextract.JsonThing get(int) -> get
    void expectLength(int) -> expectLength
    int length() -> length
    java.util.Iterator iterator() -> iterator
    java.util.ArrayList extract(com.dropbox.client2.jsonextract.JsonExtractor) -> extract
    com.dropbox.client2.jsonextract.JsonExtractionException error(java.lang.String) -> error
    java.lang.String access$000(java.lang.String,int) -> access$000
com.dropbox.client2.jsonextract.JsonList$1 -> com.dropbox.client2.jsonextract.JsonList$1:
com.dropbox.client2.jsonextract.JsonList$Extractor -> com.dropbox.client2.jsonextract.JsonList$Extractor:
    com.dropbox.client2.jsonextract.JsonExtractor elementExtractor -> elementExtractor
    java.util.List extract(com.dropbox.client2.jsonextract.JsonThing) -> extract
    java.lang.Object extract(com.dropbox.client2.jsonextract.JsonThing) -> extract
com.dropbox.client2.jsonextract.JsonList$WrapperIterator -> com.dropbox.client2.jsonextract.JsonList$WrapperIterator:
    int numReturned -> a
    java.lang.String path -> b
    java.util.Iterator internal -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
    com.dropbox.client2.jsonextract.JsonThing next() -> a
    java.lang.Object next() -> next
com.dropbox.client2.jsonextract.JsonMap -> com.dropbox.client2.jsonextract.JsonMap:
    boolean isIdentLike(java.lang.String) -> isIdentLike
    boolean isEnglishLetter(char) -> isEnglishLetter
    boolean isEnglishDigit(char) -> isEnglishDigit
    java.lang.String pathConcatField(java.lang.String,java.lang.String) -> pathConcatField
    com.dropbox.client2.jsonextract.JsonThing get(java.lang.String) -> get
    com.dropbox.client2.jsonextract.JsonThing getOrNull(java.lang.String) -> getOrNull
    java.util.Iterator iterator() -> iterator
    com.dropbox.client2.jsonextract.JsonExtractionException error(java.lang.String) -> error
    java.lang.String access$100(java.lang.String,java.lang.String) -> access$100
com.dropbox.client2.jsonextract.JsonMap$1 -> com.dropbox.client2.jsonextract.JsonMap$1:
com.dropbox.client2.jsonextract.JsonMap$WrappedEntry -> com.dropbox.client2.jsonextract.JsonMap$WrappedEntry:
    java.lang.String key -> a
    com.dropbox.client2.jsonextract.JsonThing value -> b
    java.lang.String getKey() -> a
    com.dropbox.client2.jsonextract.JsonThing getValue() -> b
    com.dropbox.client2.jsonextract.JsonThing setValue(com.dropbox.client2.jsonextract.JsonThing) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
com.dropbox.client2.jsonextract.JsonMap$WrapperIterator -> com.dropbox.client2.jsonextract.JsonMap$WrapperIterator:
    java.lang.String path -> a
    java.util.Iterator internal -> b
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> a
    void remove() -> remove
    java.lang.Object next() -> next
com.dropbox.client2.jsonextract.JsonThing -> com.dropbox.client2.jsonextract.JsonThing:
    java.util.HashMap TypeNames -> TypeNames
    boolean $assertionsDisabled -> $assertionsDisabled
    java.lang.String typeNameForClass(java.lang.Class) -> typeNameForClass
    java.lang.String typeNameForObject(java.lang.Object) -> typeNameForObject
    boolean is(java.lang.Class) -> is
    java.lang.Object expect(java.lang.Class) -> expect
    void expectNull() -> expectNull
    boolean isNull() -> isNull
    com.dropbox.client2.jsonextract.JsonMap expectMap() -> expectMap
    boolean isMap() -> isMap
    com.dropbox.client2.jsonextract.JsonList expectList() -> expectList
    boolean isList() -> isList
    java.lang.Number expectNumber() -> expectNumber
    boolean isNumber() -> isNumber
    long expectInt64() -> expectInt64
    boolean isInt64() -> isInt64
    int expectInt32() -> expectInt32
    boolean isInt32() -> isInt32
    double expectFloat64() -> expectFloat64
    boolean isFloat64() -> isFloat64
    java.lang.String expectString() -> expectString
    java.lang.String expectStringOrNull() -> expectStringOrNull
    boolean isString() -> isString
    boolean expectBoolean() -> expectBoolean
    boolean isBoolean() -> isBoolean
    java.lang.String pathConcat(java.lang.String,java.lang.String) -> pathConcat
    com.dropbox.client2.jsonextract.JsonExtractionException unexpected() -> unexpected
    java.lang.Object optionalExtract(com.dropbox.client2.jsonextract.JsonExtractor) -> optionalExtract
    com.dropbox.client2.jsonextract.JsonExtractionException error(java.lang.String) -> error
com.dropbox.client2.jsonextract.JsonThing$OptionalExtractor -> com.dropbox.client2.jsonextract.JsonThing$OptionalExtractor:
    com.dropbox.client2.jsonextract.JsonExtractor elementExtractor -> elementExtractor
    java.lang.Object extract(com.dropbox.client2.jsonextract.JsonThing) -> extract
com.dropbox.client2.session.AbstractSession -> com.dropbox.client2.session.AbstractSession:
    java.lang.String API_SERVER -> API_SERVER
    java.lang.String CONTENT_SERVER -> CONTENT_SERVER
    java.lang.String WEB_SERVER -> WEB_SERVER
    int KEEP_ALIVE_DURATION_SECS -> KEEP_ALIVE_DURATION_SECS
    int KEEP_ALIVE_MONITOR_INTERVAL_SECS -> KEEP_ALIVE_MONITOR_INTERVAL_SECS
    int DEFAULT_TIMEOUT_MILLIS -> DEFAULT_TIMEOUT_MILLIS
    com.dropbox.client2.session.Session$AccessType accessType -> accessType
    com.dropbox.client2.session.AppKeyPair appKeyPair -> appKeyPair
    com.dropbox.client2.session.AccessTokenPair accessTokenPair -> accessTokenPair
    org.apache.http.client.HttpClient client -> client
    void setAccessTokenPair(com.dropbox.client2.session.AccessTokenPair) -> setAccessTokenPair
    com.dropbox.client2.session.AppKeyPair getAppKeyPair() -> getAppKeyPair
    com.dropbox.client2.session.AccessTokenPair getAccessTokenPair() -> getAccessTokenPair
    com.dropbox.client2.session.Session$AccessType getAccessType() -> getAccessType
    java.util.Locale getLocale() -> getLocale
    boolean isLinked() -> isLinked
    void unlink() -> unlink
    void sign(org.apache.http.HttpRequest) -> sign
    java.lang.String buildOAuthHeader(com.dropbox.client2.session.AppKeyPair,com.dropbox.client2.session.AccessTokenPair) -> buildOAuthHeader
    java.lang.String encode(java.lang.String) -> encode
    com.dropbox.client2.session.Session$ProxyInfo getProxyInfo() -> getProxyInfo
    org.apache.http.client.HttpClient getHttpClient() -> getHttpClient
    void setRequestTimeout(org.apache.http.client.methods.HttpUriRequest) -> setRequestTimeout
    java.lang.String getAPIServer() -> getAPIServer
    java.lang.String getContentServer() -> getContentServer
    java.lang.String getWebServer() -> getWebServer
com.dropbox.client2.session.AbstractSession$1 -> com.dropbox.client2.session.AbstractSession$1:
    com.dropbox.client2.session.AbstractSession this$0 -> a
    int getMaxForRoute(org.apache.http.conn.routing.HttpRoute) -> getMaxForRoute
com.dropbox.client2.session.AbstractSession$2 -> com.dropbox.client2.session.AbstractSession$2:
    com.dropbox.client2.session.AbstractSession this$0 -> a
    org.apache.http.conn.ConnectionKeepAliveStrategy createConnectionKeepAliveStrategy() -> createConnectionKeepAliveStrategy
    org.apache.http.ConnectionReuseStrategy createConnectionReuseStrategy() -> createConnectionReuseStrategy
com.dropbox.client2.session.AbstractSession$3 -> com.dropbox.client2.session.AbstractSession$3:
    com.dropbox.client2.session.AbstractSession this$0 -> a
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
com.dropbox.client2.session.AbstractSession$4 -> com.dropbox.client2.session.AbstractSession$4:
    com.dropbox.client2.session.AbstractSession this$0 -> a
    void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> process
com.dropbox.client2.session.AbstractSession$DBClientConnManager -> com.dropbox.client2.session.AbstractSession$DBClientConnManager:
    org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> requestConnection
com.dropbox.client2.session.AbstractSession$DBConnectionReuseStrategy -> com.dropbox.client2.session.AbstractSession$DBConnectionReuseStrategy:
    boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> keepAlive
com.dropbox.client2.session.AbstractSession$DBKeepAliveStrategy -> com.dropbox.client2.session.AbstractSession$DBKeepAliveStrategy:
    long getKeepAliveDuration(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getKeepAliveDuration
com.dropbox.client2.session.AbstractSession$GzipDecompressingEntity -> com.dropbox.client2.session.AbstractSession$GzipDecompressingEntity:
    java.io.InputStream getContent() -> getContent
    long getContentLength() -> getContentLength
com.dropbox.client2.session.AbstractSession$IdleConnectionCloserThread -> com.dropbox.client2.session.AbstractSession$IdleConnectionCloserThread:
    com.dropbox.client2.session.AbstractSession$DBClientConnManager manager -> a
    int idleTimeoutSeconds -> b
    int checkIntervalMs -> c
    com.dropbox.client2.session.AbstractSession$IdleConnectionCloserThread thread -> d
    void ensureRunning(com.dropbox.client2.session.AbstractSession$DBClientConnManager,int,int) -> a
    void run() -> run
com.dropbox.client2.session.AccessTokenPair -> com.dropbox.client2.session.AccessTokenPair:
    long serialVersionUID -> serialVersionUID
com.dropbox.client2.session.AppKeyPair -> com.dropbox.client2.session.AppKeyPair:
com.dropbox.client2.session.RequestTokenPair -> com.dropbox.client2.session.RequestTokenPair:
    long serialVersionUID -> serialVersionUID
com.dropbox.client2.session.Session -> com.dropbox.client2.session.Session:
    com.dropbox.client2.session.Session$AccessType getAccessType() -> getAccessType
    java.util.Locale getLocale() -> getLocale
    boolean isLinked() -> isLinked
    void sign(org.apache.http.HttpRequest) -> sign
    com.dropbox.client2.session.Session$ProxyInfo getProxyInfo() -> getProxyInfo
    org.apache.http.client.HttpClient getHttpClient() -> getHttpClient
    void setRequestTimeout(org.apache.http.client.methods.HttpUriRequest) -> setRequestTimeout
    java.lang.String getAPIServer() -> getAPIServer
    java.lang.String getContentServer() -> getContentServer
com.dropbox.client2.session.Session$AccessType -> com.dropbox.client2.session.Session$AccessType:
    com.dropbox.client2.session.Session$AccessType DROPBOX -> a
    com.dropbox.client2.session.Session$AccessType APP_FOLDER -> b
    java.lang.String urlPart -> c
    com.dropbox.client2.session.Session$AccessType[] $VALUES -> d
    com.dropbox.client2.session.Session$AccessType[] values() -> values
    com.dropbox.client2.session.Session$AccessType valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
com.dropbox.client2.session.Session$ProxyInfo -> com.dropbox.client2.session.Session$ProxyInfo:
    java.lang.String host -> a
    int port -> b
com.dropbox.client2.session.TokenPair -> com.dropbox.client2.session.TokenPair:
    java.lang.String key -> key
    java.lang.String secret -> secret
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean equals(com.dropbox.client2.session.TokenPair) -> equals
    java.lang.String toString() -> toString
com.dropbox.client2.session.WebAuthSession -> com.dropbox.client2.session.WebAuthSession:
    com.dropbox.client2.session.WebAuthSession$WebAuthInfo getAuthInfo() -> getAuthInfo
    com.dropbox.client2.session.WebAuthSession$WebAuthInfo getAuthInfo(java.lang.String) -> getAuthInfo
    java.lang.String retrieveWebAccessToken(com.dropbox.client2.session.RequestTokenPair) -> retrieveWebAccessToken
    java.util.Map setUpToken(java.lang.String) -> setUpToken
com.dropbox.client2.session.WebAuthSession$1 -> com.dropbox.client2.session.WebAuthSession$1:
com.dropbox.client2.session.WebAuthSession$WebAuthInfo -> com.dropbox.client2.session.WebAuthSession$WebAuthInfo:
    java.lang.String url -> a
    com.dropbox.client2.session.RequestTokenPair requestTokenPair -> b
com.jcraft.jsch.Buffer -> com.jcraft.jsch.Buffer:
    byte[] tmp -> a
    byte[] buffer -> b
    int index -> c
    int s -> d
    void putByte(byte) -> a
    void putByte(byte[]) -> a
    void putByte(byte[],int,int) -> a
    void putString(byte[]) -> b
    void putString(byte[],int,int) -> b
    void putInt(int) -> a
    void putLong(long) -> a
    void skip(int) -> b
    void putMPInt(byte[]) -> c
    int getLength() -> a
    int getOffSet() -> b
    void setOffSet(int) -> c
    long getLong() -> c
    int getInt() -> d
    long getUInt() -> e
    int getShort() -> f
    int getByte() -> g
    void getByte(byte[]) -> d
    void getByte(byte[],int,int) -> c
    int getByte(int) -> d
    byte[] getMPInt() -> h
    byte[] getMPIntBits() -> i
    byte[] getString() -> j
    byte[] getString(int[],int[]) -> a
    void reset() -> k
    void shift() -> l
    void rewind() -> m
    byte getCommand() -> n
    void checkFreeSize(int) -> e
    byte[][] getBytes(int,java.lang.String) -> a
    com.jcraft.jsch.Buffer fromBytes(byte[][]) -> a
com.jcraft.jsch.Channel -> com.jcraft.jsch.Channel:
    int index -> a
    java.util.Vector pool -> u
    int id -> b
    int recipient -> c
    byte[] type -> d
    int lwsize_max -> e
    int lwsize -> f
    int lmpsize -> g
    long rwsize -> h
    int rmpsize -> i
    com.jcraft.jsch.IO io -> j
    java.lang.Thread thread -> k
    boolean eof_local -> l
    boolean eof_remote -> m
    boolean close -> n
    boolean connected -> o
    boolean open_confirmation -> p
    int exitstatus -> q
    int reply -> r
    int connectTimeout -> s
    com.jcraft.jsch.Session session -> v
    int notifyme -> t
    com.jcraft.jsch.Channel getChannel(java.lang.String) -> a
    com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session) -> a
    void del(com.jcraft.jsch.Channel) -> a
    void setRecipient(int) -> a
    int getRecipient() -> a
    void init() -> b
    void connect() -> c
    void connect(int) -> b
    void start() -> d
    void getData(com.jcraft.jsch.Buffer) -> a
    void setInputStream(java.io.InputStream) -> a
    void setOutputStream(java.io.OutputStream) -> a
    java.io.InputStream getInputStream() -> e
    void setLocalWindowSizeMax(int) -> c
    void setLocalWindowSize(int) -> d
    void setLocalPacketSize(int) -> e
    void setRemoteWindowSize(long) -> a
    void addRemoteWindowSize(long) -> b
    void setRemotePacketSize(int) -> f
    void run() -> run
    void write(byte[],int,int) -> a
    void write_ext(byte[],int,int) -> b
    void eof_remote() -> f
    void eof() -> g
    void close() -> h
    void disconnect(com.jcraft.jsch.Session) -> a
    void disconnect() -> i
    boolean isConnected() -> j
    void setExitStatus(int) -> g
    void setSession(com.jcraft.jsch.Session) -> b
    com.jcraft.jsch.Session getSession() -> k
    void sendOpenConfirmation() -> l
    void sendOpenFailure(int) -> h
    com.jcraft.jsch.Packet genChannelOpenPacket() -> m
    void sendChannelOpen() -> n
com.jcraft.jsch.Channel$1 -> com.jcraft.jsch.Channel$1:
    int dataLen -> b
    com.jcraft.jsch.Buffer buffer -> c
    com.jcraft.jsch.Packet packet -> d
    boolean closed -> e
    byte[] b -> a
    com.jcraft.jsch.Channel val$channel -> f
    com.jcraft.jsch.Channel this$0 -> g
    void init() -> a
    void write(int) -> write
    void write(byte[],int,int) -> write
    void flush() -> flush
    void close() -> close
com.jcraft.jsch.Channel$MyPipedInputStream -> com.jcraft.jsch.Channel$MyPipedInputStream:
    int BUFFER_SIZE -> a
    int max_buffer_size -> b
    com.jcraft.jsch.Channel this$0 -> c
    void updateReadSide() -> a
    int freeSpace() -> b
    void checkSpace(int) -> a
com.jcraft.jsch.Channel$PassiveInputStream -> com.jcraft.jsch.Channel$PassiveInputStream:
    java.io.PipedOutputStream out -> a
    com.jcraft.jsch.Channel this$0 -> b
    void close() -> close
com.jcraft.jsch.Channel$PassiveOutputStream -> com.jcraft.jsch.Channel$PassiveOutputStream:
    com.jcraft.jsch.Channel$MyPipedInputStream _sink -> a
    com.jcraft.jsch.Channel this$0 -> b
    void write(int) -> write
    void write(byte[],int,int) -> write
com.jcraft.jsch.ChannelAgentForwarding -> com.jcraft.jsch.ChannelAgentForwarding:
    byte SSH_AGENTC_REQUEST_RSA_IDENTITIES -> v
    byte SSH_AGENT_RSA_IDENTITIES_ANSWER -> w
    byte SSH_AGENTC_RSA_CHALLENGE -> x
    byte SSH_AGENT_RSA_RESPONSE -> y
    byte SSH_AGENT_FAILURE -> z
    byte SSH_AGENT_SUCCESS -> A
    byte SSH_AGENTC_ADD_RSA_IDENTITY -> B
    byte SSH_AGENTC_REMOVE_RSA_IDENTITY -> C
    byte SSH_AGENTC_REMOVE_ALL_RSA_IDENTITIES -> D
    byte SSH2_AGENTC_REQUEST_IDENTITIES -> E
    byte SSH2_AGENT_IDENTITIES_ANSWER -> F
    byte SSH2_AGENTC_SIGN_REQUEST -> G
    byte SSH2_AGENT_SIGN_RESPONSE -> H
    byte SSH2_AGENTC_ADD_IDENTITY -> I
    byte SSH2_AGENTC_REMOVE_IDENTITY -> J
    byte SSH2_AGENTC_REMOVE_ALL_IDENTITIES -> K
    byte SSH2_AGENT_FAILURE -> L
    boolean init -> u
    com.jcraft.jsch.Buffer rbuf -> M
    com.jcraft.jsch.Buffer wbuf -> N
    com.jcraft.jsch.Packet packet -> O
    com.jcraft.jsch.Buffer mbuf -> P
    void run() -> run
    void write(byte[],int,int) -> a
    void send(byte[]) -> a
    void eof_remote() -> f
com.jcraft.jsch.ChannelDirectTCPIP -> com.jcraft.jsch.ChannelDirectTCPIP:
    byte[] _type -> y
    java.lang.String host -> u
    int port -> v
    java.lang.String originator_IP_address -> w
    int originator_port -> x
    void init() -> b
    void connect(int) -> b
    void run() -> run
    void setInputStream(java.io.InputStream) -> a
    void setOutputStream(java.io.OutputStream) -> a
    void setHost(java.lang.String) -> b
    void setPort(int) -> i
    void setOrgIPAddress(java.lang.String) -> c
    void setOrgPort(int) -> j
    com.jcraft.jsch.Packet genChannelOpenPacket() -> m
com.jcraft.jsch.ChannelExec -> com.jcraft.jsch.ChannelExec:
    byte[] command -> u
    void start() -> d
    void init() -> b
com.jcraft.jsch.ChannelForwardedTCPIP -> com.jcraft.jsch.ChannelForwardedTCPIP:
    java.util.Vector pool -> u
    java.net.Socket socket -> v
    com.jcraft.jsch.ForwardedTCPIPDaemon daemon -> w
    com.jcraft.jsch.ChannelForwardedTCPIP$Config config -> x
    void run() -> run
    void getData(com.jcraft.jsch.Buffer) -> a
    com.jcraft.jsch.ChannelForwardedTCPIP$Config getPort(com.jcraft.jsch.Session,java.lang.String,int) -> b
    java.lang.String normalize(java.lang.String) -> b
    void addPort(com.jcraft.jsch.Session,java.lang.String,int,int,java.lang.String,int,com.jcraft.jsch.SocketFactory) -> a
    void delPort(com.jcraft.jsch.Session,int) -> a
    void delPort(com.jcraft.jsch.Session,java.lang.String,int) -> a
    void delPort(com.jcraft.jsch.Session) -> c
com.jcraft.jsch.ChannelForwardedTCPIP$Config -> com.jcraft.jsch.ChannelForwardedTCPIP$Config:
    com.jcraft.jsch.Session session -> a
    int rport -> b
    int allocated_rport -> c
    java.lang.String address_to_bind -> d
    java.lang.String target -> e
com.jcraft.jsch.ChannelForwardedTCPIP$ConfigDaemon -> com.jcraft.jsch.ChannelForwardedTCPIP$ConfigDaemon:
    java.lang.Object[] arg -> f
com.jcraft.jsch.ChannelForwardedTCPIP$ConfigLHost -> com.jcraft.jsch.ChannelForwardedTCPIP$ConfigLHost:
    int lport -> f
    com.jcraft.jsch.SocketFactory factory -> g
com.jcraft.jsch.ChannelSession -> com.jcraft.jsch.ChannelSession:
    byte[] _session -> u
    boolean agent_forwarding -> v
    boolean xforwading -> w
    java.util.Hashtable env -> x
    boolean pty -> y
    java.lang.String ttype -> z
    int tcol -> A
    int trow -> B
    int twp -> C
    int thp -> D
    byte[] terminal_mode -> E
    void setAgentForwarding(boolean) -> a
    void setPty(boolean) -> b
    void sendRequests() -> o
    byte[] toByteArray(java.lang.Object) -> a
    void run() -> run
com.jcraft.jsch.ChannelSftp -> com.jcraft.jsch.ChannelSftp:
    boolean interactive -> u
    int seq -> F
    int[] ackid -> G
    com.jcraft.jsch.Buffer buf -> H
    com.jcraft.jsch.Packet packet -> I
    com.jcraft.jsch.Buffer obuf -> J
    com.jcraft.jsch.Packet opacket -> K
    int client_version -> L
    int server_version -> M
    java.lang.String version -> N
    java.util.Hashtable extensions -> O
    java.io.InputStream io_in -> P
    boolean extension_posix_rename -> Q
    boolean extension_statvfs -> R
    boolean extension_hardlink -> S
    java.lang.String file_separator -> T
    char file_separatorc -> U
    boolean fs_is_bs -> V
    java.lang.String cwd -> W
    java.lang.String home -> X
    java.lang.String lcwd -> Y
    java.lang.String fEncoding -> Z
    boolean fEncoding_is_utf8 -> aa
    com.jcraft.jsch.ChannelSftp$RequestQueue rq -> ab
    void init() -> b
    void start() -> d
    java.io.OutputStream put(java.lang.String) -> b
    java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int) -> a
    java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long) -> a
    java.io.InputStream get(java.lang.String) -> c
    java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long) -> a
    java.util.Vector ls(java.lang.String) -> d
    void ls(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntrySelector) -> a
    void rename(java.lang.String,java.lang.String) -> a
    void rm(java.lang.String) -> e
    boolean isRemoteDir(java.lang.String) -> h
    void rmdir(java.lang.String) -> f
    void mkdir(java.lang.String) -> g
    com.jcraft.jsch.SftpATTRS _stat(byte[]) -> a
    com.jcraft.jsch.SftpATTRS _stat(java.lang.String) -> i
    byte[] _realpath(java.lang.String) -> j
    java.lang.String getHome() -> p
    java.lang.String getCwd() -> q
    boolean checkStatus(int[],com.jcraft.jsch.ChannelSftp$Header) -> a
    boolean _sendCLOSE(byte[],com.jcraft.jsch.ChannelSftp$Header) -> a
    void sendINIT() -> r
    void sendREALPATH(byte[]) -> b
    void sendSTAT(byte[]) -> c
    void sendREMOVE(byte[]) -> d
    void sendMKDIR(byte[],com.jcraft.jsch.SftpATTRS) -> a
    void sendRMDIR(byte[]) -> e
    void sendOPENDIR(byte[]) -> f
    void sendREADDIR(byte[]) -> g
    void sendRENAME(byte[],byte[]) -> a
    void sendCLOSE(byte[]) -> h
    void sendOPENR(byte[]) -> i
    void sendOPENW(byte[]) -> j
    void sendOPENA(byte[]) -> k
    void sendOPEN(byte[],int) -> a
    void sendPacketPath(byte,byte[]) -> a
    void sendPacketPath(byte,byte[],java.lang.String) -> a
    void sendPacketPath(byte,byte[],byte[],java.lang.String) -> a
    int sendWRITE(byte[],long,byte[],int,int) -> a
    void sendREAD(byte[],long,int,com.jcraft.jsch.ChannelSftp$RequestQueue) -> a
    void putHEAD(com.jcraft.jsch.Buffer,byte,int) -> a
    void putHEAD(byte,int) -> a
    java.util.Vector glob_remote(java.lang.String) -> k
    boolean isPattern(byte[]) -> l
    void throwStatusError(com.jcraft.jsch.Buffer,int) -> a
    void disconnect() -> i
    boolean isPattern(java.lang.String,byte[][]) -> a
    boolean isPattern(java.lang.String) -> l
    void fill(com.jcraft.jsch.Buffer,int) -> b
    int fill(byte[],int,int) -> c
    void skip(long) -> c
    com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header) -> a
    java.lang.String remoteAbsolutePath(java.lang.String) -> m
    java.lang.String isUnique(java.lang.String) -> n
    int access$000(com.jcraft.jsch.ChannelSftp) -> a
    int access$100(com.jcraft.jsch.ChannelSftp,byte[],long,byte[],int,int) -> a
    java.io.InputStream access$200(com.jcraft.jsch.ChannelSftp) -> b
    boolean access$300(com.jcraft.jsch.ChannelSftp,int[],com.jcraft.jsch.ChannelSftp$Header) -> a
    boolean access$400(com.jcraft.jsch.ChannelSftp,byte[],com.jcraft.jsch.ChannelSftp$Header) -> a
    com.jcraft.jsch.ChannelSftp$Header access$500(com.jcraft.jsch.ChannelSftp,com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header) -> a
    void access$600(com.jcraft.jsch.ChannelSftp,long) -> a
    com.jcraft.jsch.Buffer access$700(com.jcraft.jsch.ChannelSftp) -> c
    int access$800(com.jcraft.jsch.ChannelSftp) -> d
    com.jcraft.jsch.ChannelSftp$RequestQueue access$900(com.jcraft.jsch.ChannelSftp) -> e
    void access$1000(com.jcraft.jsch.ChannelSftp,byte[],long,int,com.jcraft.jsch.ChannelSftp$RequestQueue) -> a
    void access$1100(com.jcraft.jsch.ChannelSftp,com.jcraft.jsch.Buffer,int) -> a
    int access$1200(com.jcraft.jsch.ChannelSftp,byte[],int,int) -> a
com.jcraft.jsch.ChannelSftp$1 -> com.jcraft.jsch.ChannelSftp$1:
    boolean init -> b
    boolean isClosed -> c
    int[] ackid -> d
    int startid -> e
    int _ackid -> f
    int ackcount -> g
    int writecount -> h
    com.jcraft.jsch.ChannelSftp$Header header -> i
    byte[] _data -> a
    byte[] val$handle -> j
    long[] val$_offset -> k
    com.jcraft.jsch.SftpProgressMonitor val$monitor -> l
    com.jcraft.jsch.ChannelSftp this$0 -> m
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void write(int) -> write
    void flush() -> flush
    void close() -> close
com.jcraft.jsch.ChannelSftp$2 -> com.jcraft.jsch.ChannelSftp$2:
    long offset -> a
    boolean closed -> b
    int rest_length -> c
    byte[] _data -> d
    byte[] rest_byte -> e
    com.jcraft.jsch.ChannelSftp$Header header -> f
    int request_max -> g
    long request_offset -> h
    long val$skip -> i
    com.jcraft.jsch.SftpProgressMonitor val$monitor -> j
    byte[] val$handle -> k
    com.jcraft.jsch.ChannelSftp this$0 -> l
    int read() -> read
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    void close() -> close
com.jcraft.jsch.ChannelSftp$3 -> com.jcraft.jsch.ChannelSftp$3:
    java.util.Vector val$v -> a
    com.jcraft.jsch.ChannelSftp this$0 -> b
    int select(com.jcraft.jsch.ChannelSftp$LsEntry) -> a
com.jcraft.jsch.ChannelSftp$Header -> com.jcraft.jsch.ChannelSftp$Header:
    int length -> a
    int type -> b
    int rid -> c
    com.jcraft.jsch.ChannelSftp this$0 -> d
com.jcraft.jsch.ChannelSftp$LsEntry -> com.jcraft.jsch.ChannelSftp$LsEntry:
    java.lang.String filename -> a
    java.lang.String longname -> b
    com.jcraft.jsch.SftpATTRS attrs -> c
    com.jcraft.jsch.ChannelSftp this$0 -> d
    java.lang.String getFilename() -> a
    void setFilename(java.lang.String) -> a
    void setLongname(java.lang.String) -> b
    com.jcraft.jsch.SftpATTRS getAttrs() -> b
    void setAttrs(com.jcraft.jsch.SftpATTRS) -> a
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
com.jcraft.jsch.ChannelSftp$LsEntrySelector -> com.jcraft.jsch.ChannelSftp$LsEntrySelector:
    int select(com.jcraft.jsch.ChannelSftp$LsEntry) -> a
com.jcraft.jsch.ChannelSftp$RequestQueue -> com.jcraft.jsch.ChannelSftp$RequestQueue:
    com.jcraft.jsch.ChannelSftp$RequestQueue$Request[] rrq -> a
    int head -> b
    int count -> c
    com.jcraft.jsch.ChannelSftp this$0 -> d
    void init() -> a
    void add(int,long,int) -> a
    com.jcraft.jsch.ChannelSftp$RequestQueue$Request get(int) -> a
    int count() -> b
    int size() -> c
    void cancel(com.jcraft.jsch.ChannelSftp$Header,com.jcraft.jsch.Buffer) -> a
    long getOffset() -> d
com.jcraft.jsch.ChannelSftp$RequestQueue$OutOfOrderException -> com.jcraft.jsch.ChannelSftp$RequestQueue$OutOfOrderException:
    long offset -> a
    com.jcraft.jsch.ChannelSftp$RequestQueue this$1 -> b
com.jcraft.jsch.ChannelSftp$RequestQueue$Request -> com.jcraft.jsch.ChannelSftp$RequestQueue$Request:
    int id -> a
    long offset -> b
    long length -> c
    com.jcraft.jsch.ChannelSftp$RequestQueue this$1 -> d
com.jcraft.jsch.ChannelShell -> com.jcraft.jsch.ChannelShell:
    void start() -> d
    void init() -> b
com.jcraft.jsch.ChannelSubsystem -> com.jcraft.jsch.ChannelSubsystem:
    boolean xforwading -> u
    boolean pty -> F
    boolean want_reply -> G
    java.lang.String subsystem -> H
    void setPty(boolean) -> b
    void start() -> d
    void init() -> b
com.jcraft.jsch.ChannelX11 -> com.jcraft.jsch.ChannelX11:
    java.lang.String host -> v
    int port -> w
    boolean init -> x
    byte[] cookie -> u
    byte[] cookie_hex -> y
    java.util.Hashtable faked_cookie_pool -> z
    java.util.Hashtable faked_cookie_hex_pool -> A
    byte[] table -> B
    java.net.Socket socket -> C
    byte[] cache -> D
    byte[] getFakedCookie(com.jcraft.jsch.Session) -> c
    void removeFakedCookie(com.jcraft.jsch.Session) -> d
    void run() -> run
    byte[] addCache(byte[],int,int) -> c
    void write(byte[],int,int) -> a
    boolean equals(byte[],byte[]) -> a
com.jcraft.jsch.Cipher -> com.jcraft.jsch.Cipher:
    int getIVSize() -> a
    int getBlockSize() -> b
    void init(int,byte[],byte[]) -> a
    void update(byte[],int,int,byte[],int) -> a
    boolean isCBC() -> c
com.jcraft.jsch.CipherNone -> com.jcraft.jsch.CipherNone:
    int getIVSize() -> a
    int getBlockSize() -> b
    void init(int,byte[],byte[]) -> a
    void update(byte[],int,int,byte[],int) -> a
    boolean isCBC() -> c
com.jcraft.jsch.Compression -> com.jcraft.jsch.Compression:
    void init(int,int) -> a
    byte[] compress(byte[],int,int[]) -> a
    byte[] uncompress(byte[],int,int[]) -> b
com.jcraft.jsch.ConfigRepository -> com.jcraft.jsch.ConfigRepository:
    com.jcraft.jsch.ConfigRepository$Config defaultConfig -> a
    com.jcraft.jsch.ConfigRepository nullConfig -> b
    com.jcraft.jsch.ConfigRepository$Config getConfig(java.lang.String) -> a
com.jcraft.jsch.ConfigRepository$1 -> com.jcraft.jsch.ConfigRepository$1:
    java.lang.String getHostname() -> a
    java.lang.String getUser() -> b
    int getPort() -> c
    java.lang.String getValue(java.lang.String) -> a
    java.lang.String[] getValues(java.lang.String) -> b
com.jcraft.jsch.ConfigRepository$2 -> com.jcraft.jsch.ConfigRepository$2:
    com.jcraft.jsch.ConfigRepository$Config getConfig(java.lang.String) -> a
com.jcraft.jsch.ConfigRepository$Config -> com.jcraft.jsch.ConfigRepository$Config:
    java.lang.String getHostname() -> a
    java.lang.String getUser() -> b
    int getPort() -> c
    java.lang.String getValue(java.lang.String) -> a
    java.lang.String[] getValues(java.lang.String) -> b
com.jcraft.jsch.DH -> com.jcraft.jsch.DH:
    void init() -> a
    void setP(byte[]) -> a
    void setG(byte[]) -> b
    byte[] getE() -> b
    void setF(byte[]) -> c
    byte[] getK() -> c
    void checkRange() -> d
com.jcraft.jsch.DHEC256 -> com.jcraft.jsch.DHEC256:
com.jcraft.jsch.DHEC384 -> com.jcraft.jsch.DHEC384:
com.jcraft.jsch.DHEC521 -> com.jcraft.jsch.DHEC521:
com.jcraft.jsch.DHECN -> com.jcraft.jsch.DHECN:
    int state -> h
    byte[] Q_C -> a
    byte[] V_S -> b
    byte[] V_C -> c
    byte[] I_S -> d
    byte[] I_C -> e
    com.jcraft.jsch.Buffer buf -> i
    com.jcraft.jsch.Packet packet -> z
    com.jcraft.jsch.ECDH ecdh -> A
    java.lang.String sha_name -> f
    int key_size -> g
    void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[]) -> a
    boolean next(com.jcraft.jsch.Buffer) -> a
    int getState() -> a
com.jcraft.jsch.DHG1 -> com.jcraft.jsch.DHG1:
    byte[] g -> a
    byte[] p -> b
    int state -> i
    com.jcraft.jsch.DH dh -> c
    byte[] V_S -> d
    byte[] V_C -> e
    byte[] I_S -> f
    byte[] I_C -> g
    byte[] e -> h
    com.jcraft.jsch.Buffer buf -> z
    com.jcraft.jsch.Packet packet -> A
    void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[]) -> a
    boolean next(com.jcraft.jsch.Buffer) -> a
    int getState() -> a
com.jcraft.jsch.DHG14 -> com.jcraft.jsch.DHG14:
    byte[] g -> a
    byte[] p -> b
    int state -> i
    com.jcraft.jsch.DH dh -> c
    byte[] V_S -> d
    byte[] V_C -> e
    byte[] I_S -> f
    byte[] I_C -> g
    byte[] e -> h
    com.jcraft.jsch.Buffer buf -> z
    com.jcraft.jsch.Packet packet -> A
    void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[]) -> a
    boolean next(com.jcraft.jsch.Buffer) -> a
    int getState() -> a
com.jcraft.jsch.DHGEX -> com.jcraft.jsch.DHGEX:
    int min -> a
    int preferred -> b
    int max -> c
    int state -> z
    com.jcraft.jsch.DH dh -> d
    byte[] V_S -> e
    byte[] V_C -> f
    byte[] I_S -> g
    byte[] I_C -> h
    com.jcraft.jsch.Buffer buf -> A
    com.jcraft.jsch.Packet packet -> B
    byte[] p -> C
    byte[] g -> D
    byte[] e -> E
    java.lang.String hash -> i
    void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[]) -> a
    boolean next(com.jcraft.jsch.Buffer) -> a
    int getState() -> a
    int check2048(java.lang.Class,int) -> a
com.jcraft.jsch.DHGEX256 -> com.jcraft.jsch.DHGEX256:
com.jcraft.jsch.ECDH -> com.jcraft.jsch.ECDH:
    void init(int) -> a
    byte[] getSecret(byte[],byte[]) -> a
    byte[] getQ() -> a
    boolean validate(byte[],byte[]) -> b
com.jcraft.jsch.ForwardedTCPIPDaemon -> com.jcraft.jsch.ForwardedTCPIPDaemon:
    void setChannel(com.jcraft.jsch.ChannelForwardedTCPIP,java.io.InputStream,java.io.OutputStream) -> a
    void setArg(java.lang.Object[]) -> a
com.jcraft.jsch.GSSContext -> com.jcraft.jsch.GSSContext:
    void create(java.lang.String,java.lang.String) -> a
    boolean isEstablished() -> a
    byte[] init(byte[],int,int) -> a
    byte[] getMIC(byte[],int,int) -> b
    void dispose() -> b
com.jcraft.jsch.HASH -> com.jcraft.jsch.HASH:
    void init() -> a
    int getBlockSize() -> b
    void update(byte[],int,int) -> a
    byte[] digest() -> c
com.jcraft.jsch.HostKey -> com.jcraft.jsch.HostKey:
    byte[][] names -> f
    java.lang.String marker -> a
    java.lang.String host -> b
    int type -> c
    byte[] key -> d
    java.lang.String comment -> e
    java.lang.String getHost() -> a
    java.lang.String getType() -> b
    int name2type(java.lang.String) -> a
    java.lang.String getKey() -> c
    java.lang.String getComment() -> d
    java.lang.String getMarker() -> e
    boolean isMatched(java.lang.String) -> b
    boolean isIncluded(java.lang.String) -> c
com.jcraft.jsch.HostKeyRepository -> com.jcraft.jsch.HostKeyRepository:
    int check(java.lang.String,byte[]) -> a
    void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo) -> a
    void remove(java.lang.String,java.lang.String,byte[]) -> a
    java.lang.String getKnownHostsRepositoryID() -> a
    com.jcraft.jsch.HostKey[] getHostKey(java.lang.String,java.lang.String) -> a
com.jcraft.jsch.IO -> com.jcraft.jsch.IO:
    java.io.InputStream in -> a
    java.io.OutputStream out -> b
    java.io.OutputStream out_ext -> c
    boolean in_dontclose -> d
    boolean out_dontclose -> e
    boolean out_ext_dontclose -> f
    void setOutputStream(java.io.OutputStream) -> a
    void setOutputStream(java.io.OutputStream,boolean) -> a
    void setInputStream(java.io.InputStream) -> a
    void setInputStream(java.io.InputStream,boolean) -> a
    void put(com.jcraft.jsch.Packet) -> a
    void put(byte[],int,int) -> a
    void put_ext(byte[],int,int) -> b
    int getByte() -> a
    void getByte(byte[],int,int) -> c
    void out_close() -> b
    void close() -> c
com.jcraft.jsch.Identity -> com.jcraft.jsch.Identity:
    boolean setPassphrase(byte[]) -> a
    byte[] getPublicKeyBlob() -> a
    byte[] getSignature(byte[]) -> b
    java.lang.String getAlgName() -> b
    java.lang.String getName() -> c
    boolean isEncrypted() -> d
    void clear() -> e
com.jcraft.jsch.IdentityFile -> com.jcraft.jsch.IdentityFile:
    com.jcraft.jsch.JSch jsch -> a
    com.jcraft.jsch.KeyPair kpair -> b
    java.lang.String identity -> c
    com.jcraft.jsch.IdentityFile newInstance(java.lang.String,java.lang.String,com.jcraft.jsch.JSch) -> a
    com.jcraft.jsch.IdentityFile newInstance(java.lang.String,byte[],byte[],com.jcraft.jsch.JSch) -> a
    boolean setPassphrase(byte[]) -> a
    byte[] getPublicKeyBlob() -> a
    byte[] getSignature(byte[]) -> b
    java.lang.String getAlgName() -> b
    java.lang.String getName() -> c
    boolean isEncrypted() -> d
    void clear() -> e
    com.jcraft.jsch.KeyPair getKeyPair() -> f
com.jcraft.jsch.IdentityRepository -> com.jcraft.jsch.IdentityRepository:
    java.util.Vector getIdentities() -> a
    boolean add(byte[]) -> a
    boolean remove(byte[]) -> b
    void removeAll() -> b
com.jcraft.jsch.IdentityRepository$Wrapper -> com.jcraft.jsch.IdentityRepository$Wrapper:
    com.jcraft.jsch.IdentityRepository ir -> a
    java.util.Vector cache -> b
    boolean keep_in_cache -> c
    boolean add(byte[]) -> a
    boolean remove(byte[]) -> b
    void removeAll() -> b
    java.util.Vector getIdentities() -> a
    void add(com.jcraft.jsch.Identity) -> a
    void check() -> c
com.jcraft.jsch.JSch -> com.jcraft.jsch.JSch:
    java.util.Hashtable config -> a
    java.util.Vector sessionPool -> c
    com.jcraft.jsch.IdentityRepository defaultIdentityRepository -> d
    com.jcraft.jsch.IdentityRepository identityRepository -> e
    com.jcraft.jsch.ConfigRepository configRepository -> f
    com.jcraft.jsch.HostKeyRepository known_hosts -> g
    com.jcraft.jsch.Logger DEVNULL -> h
    com.jcraft.jsch.Logger logger -> b
    void setIdentityRepository(com.jcraft.jsch.IdentityRepository) -> a
    com.jcraft.jsch.IdentityRepository getIdentityRepository() -> a
    com.jcraft.jsch.ConfigRepository getConfigRepository() -> b
    com.jcraft.jsch.Session getSession(java.lang.String,java.lang.String,int) -> a
    void addSession(com.jcraft.jsch.Session) -> a
    boolean removeSession(com.jcraft.jsch.Session) -> b
    com.jcraft.jsch.HostKeyRepository getHostKeyRepository() -> c
    void addIdentity(java.lang.String) -> a
    void addIdentity(java.lang.String,byte[]) -> a
    void addIdentity(com.jcraft.jsch.Identity,byte[]) -> a
    java.lang.String getConfig(java.lang.String) -> b
    com.jcraft.jsch.Logger getLogger() -> d
com.jcraft.jsch.JSch$1 -> com.jcraft.jsch.JSch$1:
    boolean isEnabled(int) -> a
    void log(int,java.lang.String) -> a
com.jcraft.jsch.JSchAuthCancelException -> com.jcraft.jsch.JSchAuthCancelException:
    java.lang.String method -> a
com.jcraft.jsch.JSchException -> com.jcraft.jsch.JSchException:
    java.lang.Throwable cause -> a
    java.lang.Throwable getCause() -> getCause
com.jcraft.jsch.JSchPartialAuthException -> com.jcraft.jsch.JSchPartialAuthException:
    java.lang.String methods -> a
    java.lang.String getMethods() -> a
com.jcraft.jsch.KeyExchange -> com.jcraft.jsch.KeyExchange:
    java.lang.String kex -> j
    java.lang.String server_host_key -> k
    java.lang.String enc_c2s -> l
    java.lang.String enc_s2c -> m
    java.lang.String mac_c2s -> n
    java.lang.String mac_s2c -> o
    java.lang.String lang_c2s -> p
    java.lang.String lang_s2c -> q
    com.jcraft.jsch.Session session -> r
    com.jcraft.jsch.HASH sha -> s
    byte[] K -> t
    byte[] H -> u
    byte[] K_S -> v
    int RSA -> w
    int DSS -> x
    int ECDSA -> y
    int type -> a
    java.lang.String key_alg_name -> b
    void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[]) -> a
    boolean next(com.jcraft.jsch.Buffer) -> a
    int getState() -> a
    java.lang.String getKeyType() -> b
    java.lang.String getKeyAlgorithName() -> c
    java.lang.String[] guess(byte[],byte[]) -> a
    java.lang.String getFingerPrint() -> d
    byte[] getK() -> e
    byte[] getH() -> f
    com.jcraft.jsch.HASH getHash() -> g
    byte[] getHostKey() -> h
    byte[] normalize(byte[]) -> a
    boolean verify(java.lang.String,byte[],int,byte[]) -> a
com.jcraft.jsch.KeyPair -> com.jcraft.jsch.KeyPair:
    int vendor -> a
    byte[] cr -> g
    java.lang.String publicKeyComment -> b
    com.jcraft.jsch.JSch jsch -> c
    com.jcraft.jsch.Cipher cipher -> h
    com.jcraft.jsch.HASH hash -> i
    byte[] passphrase -> j
    byte[][] header -> d
    byte[] space -> k
    boolean encrypted -> e
    byte[] data -> f
    byte[] iv -> l
    byte[] publickeyblob -> m
    java.lang.String[] header1 -> n
    java.lang.String[] header2 -> o
    java.lang.String[] header3 -> p
    byte[] getSignature(byte[]) -> a
    byte[] forSSHAgent() -> a
    byte[] getKeyTypeName() -> b
    byte[] getPublicKeyBlob() -> c
    boolean parse(byte[]) -> b
    byte[] decrypt(byte[],byte[],byte[]) -> a
    int writeSEQUENCE(byte[],int,int) -> a
    int writeINTEGER(byte[],int,byte[]) -> a
    int countLength(int) -> a
    int writeLength(byte[],int,int) -> b
    com.jcraft.jsch.HASH genHash() -> f
    com.jcraft.jsch.Cipher genCipher() -> g
    byte[] genKey(byte[],byte[]) -> a
    boolean isEncrypted() -> d
    boolean decrypt(byte[]) -> c
    com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String) -> a
    com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,byte[],byte[]) -> a
    byte a2b(byte) -> a
    void dispose() -> e
    void finalize() -> finalize
    com.jcraft.jsch.KeyPair loadPPK(com.jcraft.jsch.JSch,byte[]) -> a
    byte[] parseLines(com.jcraft.jsch.Buffer,int) -> a
    boolean parseHeader(com.jcraft.jsch.Buffer,java.util.Hashtable) -> a
    void copy(com.jcraft.jsch.KeyPair) -> a
com.jcraft.jsch.KeyPair$ASN1 -> com.jcraft.jsch.KeyPair$ASN1:
    byte[] buf -> a
    int start -> b
    int length -> c
    com.jcraft.jsch.KeyPair this$0 -> d
    int getLength(int[]) -> a
    byte[] getContent() -> a
    com.jcraft.jsch.KeyPair$ASN1[] getContents() -> b
com.jcraft.jsch.KeyPair$ASN1Exception -> com.jcraft.jsch.KeyPair$ASN1Exception:
    com.jcraft.jsch.KeyPair this$0 -> a
com.jcraft.jsch.KeyPairDSA -> com.jcraft.jsch.KeyPairDSA:
    byte[] P_array -> g
    byte[] Q_array -> h
    byte[] G_array -> i
    byte[] pub_array -> j
    byte[] prv_array -> k
    int key_size -> l
    byte[] begin -> m
    byte[] end -> n
    byte[] sshdss -> o
    byte[] getPrivateKey() -> f
    boolean parse(byte[]) -> b
    byte[] getPublicKeyBlob() -> c
    byte[] getKeyTypeName() -> b
    byte[] getSignature(byte[]) -> a
    com.jcraft.jsch.KeyPair fromSSHAgent(com.jcraft.jsch.JSch,com.jcraft.jsch.Buffer) -> a
    byte[] forSSHAgent() -> a
    void dispose() -> e
com.jcraft.jsch.KeyPairECDSA -> com.jcraft.jsch.KeyPairECDSA:
    byte[][] oids -> g
    java.lang.String[] names -> h
    byte[] name -> i
    byte[] r_array -> j
    byte[] s_array -> k
    byte[] prv_array -> l
    int key_size -> m
    byte[] begin -> n
    byte[] end -> o
    boolean parse(byte[]) -> b
    byte[] getPublicKeyBlob() -> c
    byte[] getKeyTypeName() -> b
    byte[] getSignature(byte[]) -> a
    com.jcraft.jsch.KeyPair fromSSHAgent(com.jcraft.jsch.JSch,com.jcraft.jsch.Buffer) -> a
    byte[] forSSHAgent() -> a
    byte[] toPoint(byte[],byte[]) -> b
    byte[][] fromPoint(byte[]) -> d
    void dispose() -> e
com.jcraft.jsch.KeyPairGenDSA -> com.jcraft.jsch.KeyPairGenDSA:
com.jcraft.jsch.KeyPairGenECDSA -> com.jcraft.jsch.KeyPairGenECDSA:
com.jcraft.jsch.KeyPairGenRSA -> com.jcraft.jsch.KeyPairGenRSA:
com.jcraft.jsch.KeyPairPKCS8 -> com.jcraft.jsch.KeyPairPKCS8:
    byte[] rsaEncryption -> g
    byte[] dsaEncryption -> h
    byte[] pbes2 -> i
    byte[] pbkdf2 -> j
    byte[] aes128cbc -> k
    byte[] aes192cbc -> l
    byte[] aes256cbc -> m
    byte[] pbeWithMD5AndDESCBC -> n
    com.jcraft.jsch.KeyPair kpair -> o
    byte[] begin -> p
    byte[] end -> q
    boolean parse(byte[]) -> b
    byte[] getPublicKeyBlob() -> c
    byte[] getKeyTypeName() -> b
    byte[] getSignature(byte[]) -> a
    byte[] forSSHAgent() -> a
    boolean decrypt(byte[]) -> c
    com.jcraft.jsch.Cipher getCipher(byte[]) -> d
com.jcraft.jsch.KeyPairRSA -> com.jcraft.jsch.KeyPairRSA:
    byte[] n_array -> g
    byte[] pub_array -> h
    byte[] prv_array -> i
    byte[] p_array -> j
    byte[] q_array -> k
    byte[] ep_array -> l
    byte[] eq_array -> m
    byte[] c_array -> n
    int key_size -> o
    byte[] begin -> p
    byte[] end -> q
    byte[] sshrsa -> r
    boolean parse(byte[]) -> b
    byte[] getPublicKeyBlob() -> c
    byte[] getKeyTypeName() -> b
    byte[] getSignature(byte[]) -> a
    com.jcraft.jsch.KeyPair fromSSHAgent(com.jcraft.jsch.JSch,com.jcraft.jsch.Buffer) -> a
    byte[] forSSHAgent() -> a
    byte[] getEPArray() -> f
    byte[] getEQArray() -> g
    byte[] getCArray() -> h
    void dispose() -> e
com.jcraft.jsch.KnownHosts -> com.jcraft.jsch.KnownHosts:
    com.jcraft.jsch.JSch jsch -> a
    java.lang.String known_hosts -> b
    java.util.Vector pool -> c
    com.jcraft.jsch.MAC hmacsha1 -> d
    byte[] space -> e
    byte[] cr -> f
    void setKnownHosts(java.lang.String) -> a
    void setKnownHosts(java.io.InputStream) -> a
    void addInvalidLine(java.lang.String) -> c
    java.lang.String getKnownHostsRepositoryID() -> a
    int check(java.lang.String,byte[]) -> a
    void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo) -> a
    com.jcraft.jsch.HostKey[] getHostKey(java.lang.String,java.lang.String) -> a
    void remove(java.lang.String,java.lang.String,byte[]) -> a
    void sync() -> b
    void sync(java.lang.String) -> b
    void dump(java.io.OutputStream) -> a
    java.lang.String deleteSubString(java.lang.String,java.lang.String) -> b
    com.jcraft.jsch.MAC getHMACSHA1() -> c
    com.jcraft.jsch.HostKey createHashedHostKey(java.lang.String,byte[]) -> b
    com.jcraft.jsch.MAC access$000(com.jcraft.jsch.KnownHosts) -> a
com.jcraft.jsch.KnownHosts$HashedHostKey -> com.jcraft.jsch.KnownHosts$HashedHostKey:
    boolean hashed -> h
    byte[] salt -> f
    byte[] hash -> g
    com.jcraft.jsch.KnownHosts this$0 -> i
    boolean isMatched(java.lang.String) -> b
    boolean isHashed() -> f
    void hash() -> g
com.jcraft.jsch.LocalIdentityRepository -> com.jcraft.jsch.LocalIdentityRepository:
    java.util.Vector identities -> a
    com.jcraft.jsch.JSch jsch -> b
    java.util.Vector getIdentities() -> a
    void add(com.jcraft.jsch.Identity) -> a
    boolean add(byte[]) -> a
    boolean remove(byte[]) -> b
    void removeAll() -> b
    void removeDupulicates() -> c
com.jcraft.jsch.Logger -> com.jcraft.jsch.Logger:
    boolean isEnabled(int) -> a
    void log(int,java.lang.String) -> a
com.jcraft.jsch.MAC -> com.jcraft.jsch.MAC:
    int getBlockSize() -> a
    void init(byte[]) -> a
    void update(byte[],int,int) -> a
    void update(int) -> a
    void doFinal(byte[],int) -> a
com.jcraft.jsch.OpenSSHConfig -> com.jcraft.jsch.OpenSSHConfig:
    java.util.Hashtable config -> c
    java.util.Vector hosts -> d
    java.util.Hashtable keymap -> e
    com.jcraft.jsch.ConfigRepository$Config getConfig(java.lang.String) -> a
    java.util.Hashtable access$000(com.jcraft.jsch.OpenSSHConfig) -> a
    java.util.Vector access$100(com.jcraft.jsch.OpenSSHConfig) -> b
    java.util.Hashtable access$200() -> a
com.jcraft.jsch.OpenSSHConfig$MyConfig -> com.jcraft.jsch.OpenSSHConfig$MyConfig:
    java.lang.String host -> a
    java.util.Vector _configs -> b
    com.jcraft.jsch.OpenSSHConfig this$0 -> c
    java.lang.String find(java.lang.String) -> c
    java.lang.String[] multiFind(java.lang.String) -> d
    java.lang.String getHostname() -> a
    java.lang.String getUser() -> b
    int getPort() -> c
    java.lang.String getValue(java.lang.String) -> a
    java.lang.String[] getValues(java.lang.String) -> b
com.jcraft.jsch.PBKDF -> com.jcraft.jsch.PBKDF:
    byte[] getKey(byte[],byte[],int,int) -> a
com.jcraft.jsch.Packet -> com.jcraft.jsch.Packet:
    com.jcraft.jsch.Random random -> c
    com.jcraft.jsch.Buffer buffer -> a
    byte[] ba4 -> b
    void setRandom(com.jcraft.jsch.Random) -> a
    void reset() -> a
    void padding(int) -> a
    int shift(int,int,int) -> a
    void unshift(byte,int,int,int) -> a
    com.jcraft.jsch.Buffer getBuffer() -> b
com.jcraft.jsch.PortWatcher -> com.jcraft.jsch.PortWatcher:
    java.util.Vector pool -> i
    java.net.InetAddress anyLocalAddress -> j
    com.jcraft.jsch.Session session -> a
    int lport -> b
    int rport -> c
    java.lang.String host -> d
    java.net.InetAddress boundaddress -> e
    java.lang.Runnable thread -> f
    java.net.ServerSocket ss -> g
    int connectTimeout -> h
    com.jcraft.jsch.PortWatcher getPort(com.jcraft.jsch.Session,java.lang.String,int) -> a
    java.lang.String normalize(java.lang.String) -> a
    com.jcraft.jsch.PortWatcher addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory) -> a
    void delPort(com.jcraft.jsch.Session) -> a
    void run() -> run
    void delete() -> a
    void setConnectTimeout(int) -> a
com.jcraft.jsch.Proxy -> com.jcraft.jsch.Proxy:
    void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int) -> a
    java.io.InputStream getInputStream() -> a
    java.io.OutputStream getOutputStream() -> b
    java.net.Socket getSocket() -> c
    void close() -> d
com.jcraft.jsch.ProxyHTTP -> com.jcraft.jsch.ProxyHTTP:
    int DEFAULTPORT -> a
    java.lang.String proxy_host -> b
    int proxy_port -> c
    java.io.InputStream in -> d
    java.io.OutputStream out -> e
    java.net.Socket socket -> f
    java.lang.String user -> g
    java.lang.String passwd -> h
    void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int) -> a
    java.io.InputStream getInputStream() -> a
    java.io.OutputStream getOutputStream() -> b
    java.net.Socket getSocket() -> c
    void close() -> d
com.jcraft.jsch.ProxySOCKS4 -> com.jcraft.jsch.ProxySOCKS4:
    int DEFAULTPORT -> a
    java.lang.String proxy_host -> b
    int proxy_port -> c
    java.io.InputStream in -> d
    java.io.OutputStream out -> e
    java.net.Socket socket -> f
    java.lang.String user -> g
    void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int) -> a
    java.io.InputStream getInputStream() -> a
    java.io.OutputStream getOutputStream() -> b
    java.net.Socket getSocket() -> c
    void close() -> d
com.jcraft.jsch.ProxySOCKS5 -> com.jcraft.jsch.ProxySOCKS5:
    int DEFAULTPORT -> a
    java.lang.String proxy_host -> b
    int proxy_port -> c
    java.io.InputStream in -> d
    java.io.OutputStream out -> e
    java.net.Socket socket -> f
    java.lang.String user -> g
    java.lang.String passwd -> h
    void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int) -> a
    java.io.InputStream getInputStream() -> a
    java.io.OutputStream getOutputStream() -> b
    java.net.Socket getSocket() -> c
    void close() -> d
    void fill(java.io.InputStream,byte[],int) -> a
com.jcraft.jsch.Random -> com.jcraft.jsch.Random:
    void fill(byte[],int,int) -> a
com.jcraft.jsch.Request -> com.jcraft.jsch.Request:
    boolean reply -> a
    com.jcraft.jsch.Session session -> b
    com.jcraft.jsch.Channel channel -> c
    void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel) -> a
    boolean waitForReply() -> a
    void setReply(boolean) -> a
    void write(com.jcraft.jsch.Packet) -> a
com.jcraft.jsch.RequestAgentForwarding -> com.jcraft.jsch.RequestAgentForwarding:
    void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel) -> a
com.jcraft.jsch.RequestEnv -> com.jcraft.jsch.RequestEnv:
    byte[] name -> a
    byte[] value -> b
    void setEnv(byte[],byte[]) -> a
    void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel) -> a
com.jcraft.jsch.RequestExec -> com.jcraft.jsch.RequestExec:
    byte[] command -> a
    void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel) -> a
com.jcraft.jsch.RequestPtyReq -> com.jcraft.jsch.RequestPtyReq:
    java.lang.String ttype -> a
    int tcol -> b
    int trow -> c
    int twp -> d
    int thp -> e
    byte[] terminal_mode -> f
    void setTType(java.lang.String) -> a
    void setTerminalMode(byte[]) -> a
    void setTSize(int,int,int,int) -> a
    void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel) -> a
com.jcraft.jsch.RequestSftp -> com.jcraft.jsch.RequestSftp:
    void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel) -> a
com.jcraft.jsch.RequestShell -> com.jcraft.jsch.RequestShell:
    void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel) -> a
com.jcraft.jsch.RequestSignal -> com.jcraft.jsch.RequestSignal:
    java.lang.String signal -> a
    void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel) -> a
com.jcraft.jsch.RequestSubsystem -> com.jcraft.jsch.RequestSubsystem:
    java.lang.String subsystem -> a
    void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel,java.lang.String,boolean) -> a
    void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel) -> a
com.jcraft.jsch.RequestWindowChange -> com.jcraft.jsch.RequestWindowChange:
    int width_columns -> a
    int height_rows -> b
    int width_pixels -> c
    int height_pixels -> d
    void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel) -> a
com.jcraft.jsch.RequestX11 -> com.jcraft.jsch.RequestX11:
    void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel) -> a
com.jcraft.jsch.ServerSocketFactory -> com.jcraft.jsch.ServerSocketFactory:
    java.net.ServerSocket createServerSocket(int,int,java.net.InetAddress) -> a
com.jcraft.jsch.Session -> com.jcraft.jsch.Session:
    byte[] V_S -> v
    byte[] V_C -> w
    byte[] I_C -> x
    byte[] I_S -> y
    byte[] session_id -> z
    byte[] IVc2s -> A
    byte[] IVs2c -> B
    byte[] Ec2s -> C
    byte[] Es2c -> D
    byte[] MACc2s -> E
    byte[] MACs2c -> F
    int seqi -> G
    int seqo -> H
    java.lang.String[] guess -> a
    com.jcraft.jsch.Cipher s2ccipher -> I
    com.jcraft.jsch.Cipher c2scipher -> J
    com.jcraft.jsch.MAC s2cmac -> K
    com.jcraft.jsch.MAC c2smac -> L
    byte[] s2cmac_result1 -> M
    byte[] s2cmac_result2 -> N
    com.jcraft.jsch.Compression deflater -> O
    com.jcraft.jsch.Compression inflater -> P
    com.jcraft.jsch.IO io -> Q
    java.net.Socket socket -> R
    int timeout -> S
    boolean isConnected -> T
    boolean isAuthed -> U
    java.lang.Thread connectThread -> V
    java.lang.Object lock -> W
    boolean x11_forwarding -> b
    boolean agent_forwarding -> c
    java.io.InputStream in -> d
    java.io.OutputStream out -> e
    com.jcraft.jsch.Random random -> f
    com.jcraft.jsch.Buffer buf -> g
    com.jcraft.jsch.Packet packet -> h
    com.jcraft.jsch.SocketFactory socket_factory -> i
    java.util.Hashtable config -> X
    com.jcraft.jsch.Proxy proxy -> Y
    com.jcraft.jsch.UserInfo userinfo -> Z
    java.lang.String hostKeyAlias -> aa
    int serverAliveInterval -> ab
    int serverAliveCountMax -> ac
    com.jcraft.jsch.IdentityRepository identityRepository -> ad
    com.jcraft.jsch.HostKeyRepository hostkeyRepository -> ae
    boolean daemon_thread -> j
    long kex_start_time -> af
    int max_auth_tries -> k
    int auth_failures -> l
    java.lang.String host -> m
    java.lang.String org_host -> n
    int port -> o
    java.lang.String username -> p
    byte[] password -> q
    com.jcraft.jsch.JSch jsch -> r
    boolean in_kex -> ag
    int[] uncompress_len -> s
    int[] compress_len -> t
    int s2ccipher_size -> ah
    int c2scipher_size -> ai
    java.lang.Runnable thread -> u
    com.jcraft.jsch.Session$GlobalRequestReply grr -> aj
    byte[] keepalivemsg -> ak
    byte[] nomoresessions -> al
    com.jcraft.jsch.HostKey hostkey -> am
    void connect() -> a
    void connect(int) -> a
    com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer) -> b
    void send_kexinit() -> l
    void send_newkeys() -> m
    void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange) -> a
    com.jcraft.jsch.Channel openChannel(java.lang.String) -> a
    void encode(com.jcraft.jsch.Packet) -> a
    com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer) -> a
    void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int) -> a
    byte[] getSessionId() -> b
    void receive_newkeys(com.jcraft.jsch.Buffer,com.jcraft.jsch.KeyExchange) -> a
    void updateKeys(com.jcraft.jsch.KeyExchange) -> a
    byte[] expandKey(com.jcraft.jsch.Buffer,byte[],byte[],byte[],com.jcraft.jsch.HASH,int) -> a
    void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int) -> a
    void write(com.jcraft.jsch.Packet) -> b
    void _write(com.jcraft.jsch.Packet) -> c
    void run() -> run
    void disconnect() -> c
    int setPortForwardingL(java.lang.String,int,java.lang.String,int) -> a
    int setPortForwardingL(java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory) -> a
    int setPortForwardingL(java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory,int) -> a
    com.jcraft.jsch.Session$Forwarding parseForwarding(java.lang.String) -> g
    int setPortForwardingL(java.lang.String) -> b
    int setPortForwardingR(java.lang.String) -> c
    int _setPortForwardingR(java.lang.String,int) -> a
    void initDeflater(java.lang.String) -> h
    void initInflater(java.lang.String) -> i
    void addChannel(com.jcraft.jsch.Channel) -> a
    com.jcraft.jsch.UserInfo getUserInfo() -> d
    void setPassword(byte[]) -> a
    void setConfig(java.util.Properties) -> a
    void setConfig(java.util.Hashtable) -> a
    void setConfig(java.lang.String,java.lang.String) -> a
    java.lang.String getConfig(java.lang.String) -> d
    boolean isConnected() -> e
    int getTimeout() -> f
    void setTimeout(int) -> b
    void sendKeepAliveMsg() -> g
    java.lang.String getHost() -> h
    java.lang.String getUserName() -> i
    void setHostKeyAlias(java.lang.String) -> e
    void setServerAliveInterval(int) -> c
    java.lang.String[] checkCiphers(java.lang.String) -> j
    boolean checkCipher(java.lang.String) -> f
    java.lang.String[] checkKexes(java.lang.String) -> k
    boolean checkKex(com.jcraft.jsch.Session,java.lang.String) -> a
    java.lang.String[] checkSignatures(java.lang.String) -> l
    void setIdentityRepository(com.jcraft.jsch.IdentityRepository) -> a
    com.jcraft.jsch.IdentityRepository getIdentityRepository() -> j
    void setHostKeyRepository(com.jcraft.jsch.HostKeyRepository) -> a
    com.jcraft.jsch.HostKeyRepository getHostKeyRepository() -> k
    void applyConfig() -> n
    void applyConfigChannel(com.jcraft.jsch.ChannelSession) -> a
    void requestPortForwarding() -> o
    void checkConfig(com.jcraft.jsch.ConfigRepository$Config,java.lang.String) -> a
com.jcraft.jsch.Session$1 -> com.jcraft.jsch.Session$1:
com.jcraft.jsch.Session$Forwarding -> com.jcraft.jsch.Session$Forwarding:
    java.lang.String bind_address -> a
    int port -> b
    java.lang.String host -> c
    int hostport -> d
    com.jcraft.jsch.Session this$0 -> e
com.jcraft.jsch.Session$GlobalRequestReply -> com.jcraft.jsch.Session$GlobalRequestReply:
    java.lang.Thread thread -> a
    int reply -> b
    int port -> c
    com.jcraft.jsch.Session this$0 -> d
    void setThread(java.lang.Thread) -> a
    java.lang.Thread getThread() -> a
    void setReply(int) -> a
    int getReply() -> b
    int getPort() -> c
    void setPort(int) -> b
com.jcraft.jsch.SftpATTRS -> com.jcraft.jsch.SftpATTRS:
    int flags -> a
    long size -> b
    int uid -> c
    int gid -> d
    int permissions -> e
    int atime -> f
    int mtime -> g
    java.lang.String[] extended -> h
    java.lang.String getPermissionsString() -> a
    java.lang.String getMtimeString() -> b
    com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer) -> a
    int length() -> c
    void dump(com.jcraft.jsch.Buffer) -> b
    boolean isType(int) -> a
    boolean isDir() -> d
    boolean isLink() -> e
    long getSize() -> f
    int getUId() -> g
    int getGId() -> h
    int getMTime() -> i
    java.lang.String toString() -> toString
com.jcraft.jsch.SftpException -> com.jcraft.jsch.SftpException:
    int id -> a
    java.lang.Throwable cause -> b
    java.lang.String toString() -> toString
    java.lang.Throwable getCause() -> getCause
com.jcraft.jsch.SftpProgressMonitor -> com.jcraft.jsch.SftpProgressMonitor:
    void init(int,java.lang.String,java.lang.String,long) -> a
    boolean count(long) -> a
    void end() -> a
com.jcraft.jsch.SftpStatVFS -> com.jcraft.jsch.SftpStatVFS:
    int flags -> a
    java.lang.String[] extended -> b
com.jcraft.jsch.Signature -> com.jcraft.jsch.Signature:
    void init() -> a
    void update(byte[]) -> a
    boolean verify(byte[]) -> b
    byte[] sign() -> b
com.jcraft.jsch.SignatureDSA -> com.jcraft.jsch.SignatureDSA:
    void setPubKey(byte[],byte[],byte[],byte[]) -> a
    void setPrvKey(byte[],byte[],byte[],byte[]) -> b
com.jcraft.jsch.SignatureECDSA -> com.jcraft.jsch.SignatureECDSA:
    void setPubKey(byte[],byte[]) -> a
    void setPrvKey(byte[]) -> c
com.jcraft.jsch.SignatureRSA -> com.jcraft.jsch.SignatureRSA:
    void setPubKey(byte[],byte[]) -> a
    void setPrvKey(byte[],byte[]) -> b
com.jcraft.jsch.SocketFactory -> com.jcraft.jsch.SocketFactory:
    java.net.Socket createSocket(java.lang.String,int) -> a
    java.io.InputStream getInputStream(java.net.Socket) -> a
    java.io.OutputStream getOutputStream(java.net.Socket) -> b
com.jcraft.jsch.UIKeyboardInteractive -> com.jcraft.jsch.UIKeyboardInteractive:
    java.lang.String[] promptKeyboardInteractive(java.lang.String,java.lang.String,java.lang.String,java.lang.String[],boolean[]) -> a
com.jcraft.jsch.UserAuth -> com.jcraft.jsch.UserAuth:
    com.jcraft.jsch.UserInfo userinfo -> a
    com.jcraft.jsch.Packet packet -> b
    com.jcraft.jsch.Buffer buf -> c
    java.lang.String username -> d
    boolean start(com.jcraft.jsch.Session) -> a
com.jcraft.jsch.UserAuthGSSAPIWithMIC -> com.jcraft.jsch.UserAuthGSSAPIWithMIC:
    byte[][] supported_oid -> e
    java.lang.String[] supported_method -> f
    boolean start(com.jcraft.jsch.Session) -> a
com.jcraft.jsch.UserAuthKeyboardInteractive -> com.jcraft.jsch.UserAuthKeyboardInteractive:
    boolean start(com.jcraft.jsch.Session) -> a
com.jcraft.jsch.UserAuthNone -> com.jcraft.jsch.UserAuthNone:
    java.lang.String methods -> e
    boolean start(com.jcraft.jsch.Session) -> a
    java.lang.String getMethods() -> a
com.jcraft.jsch.UserAuthPassword -> com.jcraft.jsch.UserAuthPassword:
    int SSH_MSG_USERAUTH_PASSWD_CHANGEREQ -> e
    boolean start(com.jcraft.jsch.Session) -> a
com.jcraft.jsch.UserAuthPublicKey -> com.jcraft.jsch.UserAuthPublicKey:
    boolean start(com.jcraft.jsch.Session) -> a
com.jcraft.jsch.UserInfo -> com.jcraft.jsch.UserInfo:
    java.lang.String getPassphrase() -> a
    java.lang.String getPassword() -> b
    boolean promptPassword(java.lang.String) -> a
    boolean promptPassphrase(java.lang.String) -> b
    boolean promptYesNo(java.lang.String) -> c
    void showMessage(java.lang.String) -> d
com.jcraft.jsch.Util -> com.jcraft.jsch.Util:
    byte[] b64 -> b
    java.lang.String[] chars -> c
    byte[] empty -> a
    byte val(byte) -> a
    byte[] fromBase64(byte[],int,int) -> a
    byte[] toBase64(byte[],int,int) -> b
    java.lang.String[] split(java.lang.String,java.lang.String) -> a
    boolean glob(byte[],byte[]) -> a
    boolean glob0(byte[],int,byte[],int) -> a
    boolean glob(byte[],int,byte[],int) -> b
    java.lang.String unquote(java.lang.String) -> a
    byte[] unquote(byte[]) -> a
    java.lang.String getFingerPrint(com.jcraft.jsch.HASH,byte[]) -> a
    boolean array_equals(byte[],byte[]) -> b
    java.net.Socket createSocket(java.lang.String,int,int) -> a
    byte[] str2byte(java.lang.String,java.lang.String) -> b
    byte[] str2byte(java.lang.String) -> b
    java.lang.String byte2str(byte[],java.lang.String) -> a
    java.lang.String byte2str(byte[],int,int,java.lang.String) -> a
    java.lang.String byte2str(byte[]) -> b
    java.lang.String byte2str(byte[],int,int) -> c
    java.lang.String toHex(byte[]) -> c
    void bzero(byte[]) -> d
    java.lang.String diffString(java.lang.String,java.lang.String[]) -> a
    java.lang.String checkTilde(java.lang.String) -> c
    int skipUTF8Char(byte) -> b
    byte[] fromFile(java.lang.String) -> d
com.jcraft.jsch.Util$1 -> com.jcraft.jsch.Util$1:
    java.net.Socket[] val$sockp -> a
    java.lang.String val$_host -> b
    int val$_port -> c
    java.lang.Exception[] val$ee -> d
    void run() -> run
com.jcraft.jsch.jce.AES128CBC -> com.jcraft.jsch.jce.AES128CBC:
    javax.crypto.Cipher cipher -> b
    java.lang.Class class$javax$crypto$Cipher -> a
    int getIVSize() -> a
    int getBlockSize() -> b
    void init(int,byte[],byte[]) -> a
    void update(byte[],int,int,byte[],int) -> a
    boolean isCBC() -> c
    java.lang.Class class$(java.lang.String) -> a
com.jcraft.jsch.jce.AES128CTR -> com.jcraft.jsch.jce.AES128CTR:
    javax.crypto.Cipher cipher -> b
    java.lang.Class class$javax$crypto$Cipher -> a
    int getIVSize() -> a
    int getBlockSize() -> b
    void init(int,byte[],byte[]) -> a
    void update(byte[],int,int,byte[],int) -> a
    boolean isCBC() -> c
    java.lang.Class class$(java.lang.String) -> a
com.jcraft.jsch.jce.AES192CBC -> com.jcraft.jsch.jce.AES192CBC:
    javax.crypto.Cipher cipher -> b
    java.lang.Class class$javax$crypto$Cipher -> a
    int getIVSize() -> a
    int getBlockSize() -> b
    void init(int,byte[],byte[]) -> a
    void update(byte[],int,int,byte[],int) -> a
    boolean isCBC() -> c
    java.lang.Class class$(java.lang.String) -> a
com.jcraft.jsch.jce.AES192CTR -> com.jcraft.jsch.jce.AES192CTR:
    javax.crypto.Cipher cipher -> b
    java.lang.Class class$javax$crypto$Cipher -> a
    int getIVSize() -> a
    int getBlockSize() -> b
    void init(int,byte[],byte[]) -> a
    void update(byte[],int,int,byte[],int) -> a
    boolean isCBC() -> c
    java.lang.Class class$(java.lang.String) -> a
com.jcraft.jsch.jce.AES256CBC -> com.jcraft.jsch.jce.AES256CBC:
    javax.crypto.Cipher cipher -> b
    java.lang.Class class$javax$crypto$Cipher -> a
    int getIVSize() -> a
    int getBlockSize() -> b
    void init(int,byte[],byte[]) -> a
    void update(byte[],int,int,byte[],int) -> a
    boolean isCBC() -> c
    java.lang.Class class$(java.lang.String) -> a
com.jcraft.jsch.jce.AES256CTR -> com.jcraft.jsch.jce.AES256CTR:
    javax.crypto.Cipher cipher -> b
    java.lang.Class class$javax$crypto$Cipher -> a
    int getIVSize() -> a
    int getBlockSize() -> b
    void init(int,byte[],byte[]) -> a
    void update(byte[],int,int,byte[],int) -> a
    boolean isCBC() -> c
    java.lang.Class class$(java.lang.String) -> a
com.jcraft.jsch.jce.ARCFOUR -> com.jcraft.jsch.jce.ARCFOUR:
    javax.crypto.Cipher cipher -> b
    java.lang.Class class$javax$crypto$Cipher -> a
    int getIVSize() -> a
    int getBlockSize() -> b
    void init(int,byte[],byte[]) -> a
    void update(byte[],int,int,byte[],int) -> a
    boolean isCBC() -> c
    java.lang.Class class$(java.lang.String) -> a
com.jcraft.jsch.jce.ARCFOUR128 -> com.jcraft.jsch.jce.ARCFOUR128:
    javax.crypto.Cipher cipher -> b
    java.lang.Class class$javax$crypto$Cipher -> a
    int getIVSize() -> a
    int getBlockSize() -> b
    void init(int,byte[],byte[]) -> a
    void update(byte[],int,int,byte[],int) -> a
    boolean isCBC() -> c
    java.lang.Class class$(java.lang.String) -> a
com.jcraft.jsch.jce.ARCFOUR256 -> com.jcraft.jsch.jce.ARCFOUR256:
    javax.crypto.Cipher cipher -> b
    java.lang.Class class$javax$crypto$Cipher -> a
    int getIVSize() -> a
    int getBlockSize() -> b
    void init(int,byte[],byte[]) -> a
    void update(byte[],int,int,byte[],int) -> a
    boolean isCBC() -> c
    java.lang.Class class$(java.lang.String) -> a
com.jcraft.jsch.jce.BlowfishCBC -> com.jcraft.jsch.jce.BlowfishCBC:
    javax.crypto.Cipher cipher -> b
    java.lang.Class class$javax$crypto$Cipher -> a
    int getIVSize() -> a
    int getBlockSize() -> b
    void init(int,byte[],byte[]) -> a
    void update(byte[],int,int,byte[],int) -> a
    boolean isCBC() -> c
    java.lang.Class class$(java.lang.String) -> a
com.jcraft.jsch.jce.DH -> com.jcraft.jsch.jce.DH:
    java.math.BigInteger p -> a
    java.math.BigInteger g -> b
    java.math.BigInteger e -> c
    byte[] e_array -> d
    java.math.BigInteger f -> e
    java.math.BigInteger K -> f
    byte[] K_array -> g
    java.security.KeyPairGenerator myKpairGen -> h
    javax.crypto.KeyAgreement myKeyAgree -> i
    void init() -> a
    byte[] getE() -> b
    byte[] getK() -> c
    void setP(byte[]) -> a
    void setG(byte[]) -> b
    void setF(byte[]) -> c
    void setP(java.math.BigInteger) -> a
    void setG(java.math.BigInteger) -> b
    void setF(java.math.BigInteger) -> c
    void checkRange() -> d
com.jcraft.jsch.jce.ECDH256 -> com.jcraft.jsch.jce.ECDH256:
com.jcraft.jsch.jce.ECDH384 -> com.jcraft.jsch.jce.ECDH384:
com.jcraft.jsch.jce.ECDH521 -> com.jcraft.jsch.jce.ECDH521:
com.jcraft.jsch.jce.ECDHN -> com.jcraft.jsch.jce.ECDHN:
    byte[] Q_array -> a
    java.security.interfaces.ECPublicKey publicKey -> b
    javax.crypto.KeyAgreement myKeyAgree -> c
    java.math.BigInteger two -> d
    java.math.BigInteger three -> e
    void init(int) -> a
    byte[] getQ() -> a
    byte[] getSecret(byte[],byte[]) -> a
    boolean validate(byte[],byte[]) -> b
    byte[] toPoint(byte[],byte[]) -> c
com.jcraft.jsch.jce.HMAC -> com.jcraft.jsch.jce.HMAC:
    java.lang.String name -> a
    int bsize -> b
    java.lang.String algorithm -> c
    javax.crypto.Mac mac -> d
    byte[] tmp -> e
    int getBlockSize() -> a
    void init(byte[]) -> a
    void update(int) -> a
    void update(byte[],int,int) -> a
    void doFinal(byte[],int) -> a
com.jcraft.jsch.jce.HMACMD5 -> com.jcraft.jsch.jce.HMACMD5:
com.jcraft.jsch.jce.HMACMD596 -> com.jcraft.jsch.jce.HMACMD596:
    byte[] _buf16 -> d
    int getBlockSize() -> a
    void doFinal(byte[],int) -> a
com.jcraft.jsch.jce.HMACSHA1 -> com.jcraft.jsch.jce.HMACSHA1:
com.jcraft.jsch.jce.HMACSHA196 -> com.jcraft.jsch.jce.HMACSHA196:
    byte[] _buf20 -> d
    int getBlockSize() -> a
    void doFinal(byte[],int) -> a
com.jcraft.jsch.jce.HMACSHA256 -> com.jcraft.jsch.jce.HMACSHA256:
com.jcraft.jsch.jce.HMACSHA512 -> com.jcraft.jsch.jce.HMACSHA512:
com.jcraft.jsch.jce.KeyPairGenDSA -> com.jcraft.jsch.jce.KeyPairGenDSA:
com.jcraft.jsch.jce.KeyPairGenECDSA -> com.jcraft.jsch.jce.KeyPairGenECDSA:
    byte[] d -> a
    byte[] r -> b
    byte[] s -> c
    java.security.interfaces.ECPublicKey pubKey -> d
    java.security.interfaces.ECPrivateKey prvKey -> e
    java.security.spec.ECParameterSpec params -> f
    void init(int) -> a
    byte[] getR() -> a
    byte[] getS() -> b
    java.security.interfaces.ECPublicKey getPublicKey() -> c
    java.security.interfaces.ECPrivateKey getPrivateKey() -> d
    byte[] insert0(byte[]) -> a
    void bzero(byte[]) -> b
com.jcraft.jsch.jce.KeyPairGenRSA -> com.jcraft.jsch.jce.KeyPairGenRSA:
com.jcraft.jsch.jce.MD5 -> com.jcraft.jsch.jce.MD5:
    java.security.MessageDigest md -> a
    int getBlockSize() -> b
    void init() -> a
    void update(byte[],int,int) -> a
    byte[] digest() -> c
com.jcraft.jsch.jce.PBKDF -> com.jcraft.jsch.jce.PBKDF:
    byte[] getKey(byte[],byte[],int,int) -> a
com.jcraft.jsch.jce.Random -> com.jcraft.jsch.jce.Random:
    byte[] tmp -> a
    java.security.SecureRandom random -> b
    void fill(byte[],int,int) -> a
com.jcraft.jsch.jce.SHA1 -> com.jcraft.jsch.jce.SHA1:
    java.security.MessageDigest md -> a
    int getBlockSize() -> b
    void init() -> a
    void update(byte[],int,int) -> a
    byte[] digest() -> c
com.jcraft.jsch.jce.SHA256 -> com.jcraft.jsch.jce.SHA256:
    java.security.MessageDigest md -> a
    int getBlockSize() -> b
    void init() -> a
    void update(byte[],int,int) -> a
    byte[] digest() -> c
com.jcraft.jsch.jce.SHA384 -> com.jcraft.jsch.jce.SHA384:
    java.security.MessageDigest md -> a
    int getBlockSize() -> b
    void init() -> a
    void update(byte[],int,int) -> a
    byte[] digest() -> c
com.jcraft.jsch.jce.SHA512 -> com.jcraft.jsch.jce.SHA512:
    java.security.MessageDigest md -> a
    int getBlockSize() -> b
    void init() -> a
    void update(byte[],int,int) -> a
    byte[] digest() -> c
com.jcraft.jsch.jce.SignatureDSA -> com.jcraft.jsch.jce.SignatureDSA:
    java.security.Signature signature -> a
    java.security.KeyFactory keyFactory -> b
    void init() -> a
    void setPubKey(byte[],byte[],byte[],byte[]) -> a
    void setPrvKey(byte[],byte[],byte[],byte[]) -> b
    byte[] sign() -> b
    void update(byte[]) -> a
    boolean verify(byte[]) -> b
com.jcraft.jsch.jce.SignatureECDSA -> com.jcraft.jsch.jce.SignatureECDSA:
    java.security.Signature signature -> a
    java.security.KeyFactory keyFactory -> b
    java.lang.Class class$java$security$spec$ECParameterSpec -> c
    void init() -> a
    void setPubKey(byte[],byte[]) -> a
    void setPrvKey(byte[]) -> c
    byte[] sign() -> b
    void update(byte[]) -> a
    boolean verify(byte[]) -> b
    byte[] insert0(byte[]) -> d
    byte[] chop0(byte[]) -> e
    void bzero(byte[]) -> f
    java.lang.Class class$(java.lang.String) -> a
com.jcraft.jsch.jce.SignatureRSA -> com.jcraft.jsch.jce.SignatureRSA:
    java.security.Signature signature -> a
    java.security.KeyFactory keyFactory -> b
    void init() -> a
    void setPubKey(byte[],byte[]) -> a
    void setPrvKey(byte[],byte[]) -> b
    byte[] sign() -> b
    void update(byte[]) -> a
    boolean verify(byte[]) -> b
com.jcraft.jsch.jce.TripleDESCBC -> com.jcraft.jsch.jce.TripleDESCBC:
    javax.crypto.Cipher cipher -> b
    java.lang.Class class$javax$crypto$Cipher -> a
    int getIVSize() -> a
    int getBlockSize() -> b
    void init(int,byte[],byte[]) -> a
    void update(byte[],int,int,byte[],int) -> a
    boolean isCBC() -> c
    java.lang.Class class$(java.lang.String) -> a
com.jcraft.jsch.jce.TripleDESCTR -> com.jcraft.jsch.jce.TripleDESCTR:
    javax.crypto.Cipher cipher -> b
    java.lang.Class class$javax$crypto$Cipher -> a
    int getIVSize() -> a
    int getBlockSize() -> b
    void init(int,byte[],byte[]) -> a
    void update(byte[],int,int,byte[],int) -> a
    boolean isCBC() -> c
    java.lang.Class class$(java.lang.String) -> a
com.jcraft.jsch.jcraft.Compression -> com.jcraft.jsch.jcraft.Compression:
    int buffer_margin -> a
    int type -> b
    com.jcraft.jzlib.ZStream stream -> c
    byte[] tmpbuf -> d
    byte[] inflated_buf -> e
    void init(int,int) -> a
    byte[] compress(byte[],int,int[]) -> a
    byte[] uncompress(byte[],int,int[]) -> b
com.jcraft.jsch.jcraft.HMAC -> com.jcraft.jsch.jcraft.HMAC:
    byte[] k_ipad -> a
    byte[] k_opad -> b
    java.security.MessageDigest md -> c
    int bsize -> d
    byte[] tmp -> e
    void setH(java.security.MessageDigest) -> a
    int getBlockSize() -> a
    void init(byte[]) -> a
    void update(int) -> a
    void update(byte[],int,int) -> a
    void doFinal(byte[],int) -> a
com.jcraft.jsch.jcraft.HMACMD5 -> com.jcraft.jsch.jcraft.HMACMD5:
com.jcraft.jsch.jcraft.HMACMD596 -> com.jcraft.jsch.jcraft.HMACMD596:
    byte[] _buf16 -> a
    int getBlockSize() -> a
    void doFinal(byte[],int) -> a
com.jcraft.jsch.jcraft.HMACSHA1 -> com.jcraft.jsch.jcraft.HMACSHA1:
com.jcraft.jsch.jcraft.HMACSHA196 -> com.jcraft.jsch.jcraft.HMACSHA196:
    byte[] _buf16 -> a
    int getBlockSize() -> a
    void doFinal(byte[],int) -> a
com.jcraft.jsch.jgss.GSSContextKrb5 -> com.jcraft.jsch.jgss.GSSContextKrb5:
    java.lang.String useSubjectCredsOnly -> a
    org.ietf.jgss.GSSContext context -> b
    void create(java.lang.String,java.lang.String) -> a
    boolean isEstablished() -> a
    byte[] init(byte[],int,int) -> a
    byte[] getMIC(byte[],int,int) -> b
    void dispose() -> b
    java.lang.String getSystemProperty(java.lang.String) -> a
    void setSystemProperty(java.lang.String,java.lang.String) -> b
de.aflx.sardine.DavResource -> de.aflx.sardine.DavResource:
    de.aflx.sardine.util.Logger log -> log
    java.lang.String DEFAULT_CONTENT_TYPE -> DEFAULT_CONTENT_TYPE
    long DEFAULT_CONTENT_LENGTH -> DEFAULT_CONTENT_LENGTH
    java.lang.String HTTPD_UNIX_DIRECTORY_CONTENT_TYPE -> HTTPD_UNIX_DIRECTORY_CONTENT_TYPE
    java.lang.String SEPARATOR -> SEPARATOR
    java.net.URI href -> href
    java.util.Date creation -> creation
    java.util.Date modified -> modified
    java.lang.String contentType -> contentType
    java.lang.String etag -> etag
    java.lang.Long contentLength -> contentLength
    java.util.Map customProps -> customProps
    java.lang.String getModifiedDate(de.aflx.sardine.model.Response) -> getModifiedDate
    de.aflx.sardine.model.Propstat getPropstat(de.aflx.sardine.model.Response) -> getPropstat
    java.lang.String getCreationDate(de.aflx.sardine.model.Response) -> getCreationDate
    java.lang.String getContentType(de.aflx.sardine.model.Response) -> getContentType
    long getContentLength(de.aflx.sardine.model.Response) -> getContentLength
    java.lang.String getEtag(de.aflx.sardine.model.Response) -> getEtag
    java.util.Map getCustomProps(de.aflx.sardine.model.Response) -> getCustomProps
    java.util.Date getCreation() -> getCreation
    java.util.Date getModified() -> getModified
    java.lang.String getContentType() -> getContentType
    java.lang.Long getContentLength() -> getContentLength
    java.lang.String getEtag() -> getEtag
    boolean isDirectory() -> isDirectory
    java.util.Map getCustomProps() -> getCustomProps
    java.util.Map getCustomPropsNS() -> getCustomPropsNS
    java.net.URI getHref() -> getHref
    java.lang.String getName() -> getName
    java.lang.String getPath() -> getPath
    java.lang.String toString() -> toString
de.aflx.sardine.Sardine -> de.aflx.sardine.Sardine:
    void abort() -> abort
    boolean isAborted() -> isAborted
    void setCredentials(java.lang.String,java.lang.String) -> setCredentials
    void setCredentials(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> setCredentials
    java.util.List getResources(java.lang.String) -> getResources
    java.util.List list(java.lang.String) -> list
    java.util.List list(java.lang.String,int) -> list
    void setCustomProps(java.lang.String,java.util.Map,java.util.List) -> setCustomProps
    java.util.List patch(java.lang.String,java.util.Map) -> patch
    java.util.List patch(java.lang.String,java.util.Map,java.util.List) -> patch
    de.aflx.sardine.impl.io.ConsumingInputStream get(java.lang.String) -> get
    de.aflx.sardine.impl.io.ConsumingInputStream get(java.lang.String,java.util.Map) -> get
    void put(java.lang.String,byte[]) -> put
    void putWithHeader(java.lang.String,byte[],java.util.Map) -> putWithHeader
    void put(java.lang.String,java.io.InputStream) -> put
    void put(java.lang.String,byte[],java.lang.String) -> put
    void put(java.lang.String,java.io.InputStream,java.lang.String) -> put
    void put(java.lang.String,java.io.InputStream,java.lang.String,boolean) -> put
    void put(java.lang.String,java.io.InputStream,java.util.Map) -> put
    void put(java.lang.String,java.io.InputStream,long) -> put
    void delete(java.lang.String) -> delete
    void createDirectory(java.lang.String) -> createDirectory
    void move(java.lang.String,java.lang.String) -> move
    void copy(java.lang.String,java.lang.String) -> copy
    boolean exists(java.lang.String) -> exists
    java.lang.String lock(java.lang.String) -> lock
    void unlock(java.lang.String,java.lang.String) -> unlock
    void enableCompression() -> enableCompression
    void disableCompression() -> disableCompression
    void enablePreemptiveAuthentication(java.lang.String) -> enablePreemptiveAuthentication
    void disablePreemptiveAuthentication() -> disablePreemptiveAuthentication
de.aflx.sardine.SardineFactory -> de.aflx.sardine.SardineFactory:
    de.aflx.sardine.Sardine begin() -> begin
    de.aflx.sardine.Sardine begin(java.lang.String,java.lang.String) -> begin
    de.aflx.sardine.Sardine begin(java.lang.String,java.lang.String,java.net.ProxySelector) -> begin
de.aflx.sardine.Version -> de.aflx.sardine.Version:
    java.lang.String getSpecification() -> getSpecification
    java.lang.String getImplementation() -> getImplementation
    void main(java.lang.String[]) -> main
de.aflx.sardine.impl.SardineException -> de.aflx.sardine.impl.SardineException:
    long serialVersionUID -> serialVersionUID
    java.lang.String responsePhrase -> responsePhrase
    java.lang.String getResponsePhrase() -> getResponsePhrase
    java.lang.String toString() -> toString
de.aflx.sardine.impl.SardineImpl -> de.aflx.sardine.impl.SardineImpl:
    de.aflx.sardine.util.Logger log -> log
    java.lang.String UTF_8 -> UTF_8
    ch.boye.httpclientandroidlib.client.methods.HttpRequestBase _currentRequest -> _currentRequest
    boolean _isAborted -> _isAborted
    ch.boye.httpclientandroidlib.impl.client.AbstractHttpClient client -> client
    ch.boye.httpclientandroidlib.protocol.HttpContext context -> context
    ch.boye.httpclientandroidlib.HttpRequestInterceptor preemptiveAuth -> preemptiveAuth
    void init(ch.boye.httpclientandroidlib.impl.client.AbstractHttpClient,java.lang.String,java.lang.String) -> init
    ch.boye.httpclientandroidlib.client.methods.HttpRequestBase getCurrentRequest() -> getCurrentRequest
    void abort() -> abort
    boolean isAborted() -> isAborted
    void setCredentials(java.lang.String,java.lang.String) -> setCredentials
    void setCredentials(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> setCredentials
    void enableCompression() -> enableCompression
    void disableCompression() -> disableCompression
    void enablePreemptiveAuthentication(java.lang.String) -> enablePreemptiveAuthentication
    void disablePreemptiveAuthentication() -> disablePreemptiveAuthentication
    java.util.List getResources(java.lang.String) -> getResources
    java.util.List list(java.lang.String) -> list
    java.util.List list(java.lang.String,int) -> list
    void setCustomProps(java.lang.String,java.util.Map,java.util.List) -> setCustomProps
    java.util.List patch(java.lang.String,java.util.Map) -> patch
    java.util.List patch(java.lang.String,java.util.Map,java.util.List) -> patch
    java.lang.String lock(java.lang.String) -> lock
    void unlock(java.lang.String,java.lang.String) -> unlock
    de.aflx.sardine.impl.io.ConsumingInputStream get(java.lang.String) -> get
    de.aflx.sardine.impl.io.ConsumingInputStream get(java.lang.String,java.util.Map) -> get
    void put(java.lang.String,byte[]) -> put
    void put(java.lang.String,byte[],java.lang.String) -> put
    void put(java.lang.String,java.io.InputStream) -> put
    void put(java.lang.String,java.io.InputStream,java.lang.String) -> put
    void put(java.lang.String,java.io.InputStream,java.lang.String,boolean) -> put
    void put(java.lang.String,java.io.InputStream,java.util.Map) -> put
    void put(java.lang.String,java.io.InputStream,long) -> put
    void putWithHeader(java.lang.String,byte[],java.util.Map) -> putWithHeader
    void put(java.lang.String,ch.boye.httpclientandroidlib.HttpEntity,java.lang.String,boolean) -> put
    void put(java.lang.String,ch.boye.httpclientandroidlib.HttpEntity,java.util.Map) -> put
    void delete(java.lang.String) -> delete
    void move(java.lang.String,java.lang.String) -> move
    void copy(java.lang.String,java.lang.String) -> copy
    void createDirectory(java.lang.String) -> createDirectory
    boolean exists(java.lang.String) -> exists
    java.lang.Object execute(ch.boye.httpclientandroidlib.client.methods.HttpRequestBase,ch.boye.httpclientandroidlib.client.ResponseHandler) -> execute
    ch.boye.httpclientandroidlib.HttpResponse execute(ch.boye.httpclientandroidlib.client.methods.HttpRequestBase) -> execute
    ch.boye.httpclientandroidlib.impl.client.AbstractHttpClient createDefaultClient(java.net.ProxySelector) -> createDefaultClient
    ch.boye.httpclientandroidlib.params.HttpParams createDefaultHttpParams() -> createDefaultHttpParams
    ch.boye.httpclientandroidlib.conn.scheme.SchemeRegistry createDefaultSchemeRegistry() -> createDefaultSchemeRegistry
    ch.boye.httpclientandroidlib.conn.scheme.PlainSocketFactory createDefaultSocketFactory() -> createDefaultSocketFactory
    ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory createDefaultSecureSocketFactory() -> createDefaultSecureSocketFactory
    ch.boye.httpclientandroidlib.conn.ClientConnectionManager createDefaultConnectionManager(ch.boye.httpclientandroidlib.conn.scheme.SchemeRegistry) -> createDefaultConnectionManager
    ch.boye.httpclientandroidlib.conn.routing.HttpRoutePlanner createDefaultRoutePlanner(ch.boye.httpclientandroidlib.conn.scheme.SchemeRegistry,java.net.ProxySelector) -> createDefaultRoutePlanner
de.aflx.sardine.impl.SardineImpl$1 -> de.aflx.sardine.impl.SardineImpl$1:
    de.aflx.sardine.impl.SardineImpl this$0 -> a
    void process(ch.boye.httpclientandroidlib.HttpRequest,ch.boye.httpclientandroidlib.protocol.HttpContext) -> a
de.aflx.sardine.impl.handler.ExistsResponseHandler -> de.aflx.sardine.impl.handler.ExistsResponseHandler:
    java.lang.Boolean handleResponse(ch.boye.httpclientandroidlib.HttpResponse) -> handleResponse
    java.lang.Object handleResponse(ch.boye.httpclientandroidlib.HttpResponse) -> handleResponse
de.aflx.sardine.impl.handler.LockResponseHandler -> de.aflx.sardine.impl.handler.LockResponseHandler:
    java.lang.String handleResponse(ch.boye.httpclientandroidlib.HttpResponse) -> handleResponse
    java.lang.String getToken(java.io.InputStream) -> getToken
    java.lang.Object handleResponse(ch.boye.httpclientandroidlib.HttpResponse) -> handleResponse
de.aflx.sardine.impl.handler.MultiStatusResponseHandler -> de.aflx.sardine.impl.handler.MultiStatusResponseHandler:
    de.aflx.sardine.model.Multistatus handleResponse(ch.boye.httpclientandroidlib.HttpResponse) -> handleResponse
    java.lang.String convertStreamToString(java.io.InputStream) -> convertStreamToString
    java.lang.Object handleResponse(ch.boye.httpclientandroidlib.HttpResponse) -> handleResponse
de.aflx.sardine.impl.handler.ValidatingResponseHandler -> de.aflx.sardine.impl.handler.ValidatingResponseHandler:
    void validateResponse(ch.boye.httpclientandroidlib.HttpResponse) -> validateResponse
de.aflx.sardine.impl.handler.VoidResponseHandler -> de.aflx.sardine.impl.handler.VoidResponseHandler:
    java.lang.Void handleResponse(ch.boye.httpclientandroidlib.HttpResponse) -> handleResponse
    java.lang.Object handleResponse(ch.boye.httpclientandroidlib.HttpResponse) -> handleResponse
de.aflx.sardine.impl.handler.XmlMapper -> de.aflx.sardine.impl.handler.XmlMapper:
    void fillObjectRecursive(java.lang.Object,org.jdom2.Element) -> fillObjectRecursive
    java.lang.String getSetterName(java.lang.String) -> getSetterName
    java.lang.String getgetterName(java.lang.String) -> getgetterName
    void invokeSetter(java.lang.Object,java.lang.reflect.Field,java.lang.Object) -> invokeSetter
de.aflx.sardine.impl.io.ConsumingInputStream -> de.aflx.sardine.impl.io.ConsumingInputStream:
    java.io.InputStream delegate -> delegate
    ch.boye.httpclientandroidlib.HttpResponse response -> response
    long getContentLength() -> getContentLength
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    long skip(long) -> skip
    int available() -> available
    void mark(int) -> mark
    void reset() -> reset
    boolean markSupported() -> markSupported
    int read() -> read
    void close() -> close
de.aflx.sardine.impl.methods.HttpCopy -> de.aflx.sardine.impl.methods.HttpCopy:
    java.lang.String METHOD_NAME -> METHOD_NAME
    java.lang.String getMethod() -> getMethod
de.aflx.sardine.impl.methods.HttpLock -> de.aflx.sardine.impl.methods.HttpLock:
    java.lang.String METHOD_NAME -> METHOD_NAME
    java.lang.String getMethod() -> getMethod
    void setDepth(java.lang.String) -> setDepth
    void setTimeout(int) -> setTimeout
    void setInfinite() -> setInfinite
de.aflx.sardine.impl.methods.HttpMkCol -> de.aflx.sardine.impl.methods.HttpMkCol:
    java.lang.String METHOD_NAME -> METHOD_NAME
    java.lang.String getMethod() -> getMethod
de.aflx.sardine.impl.methods.HttpMove -> de.aflx.sardine.impl.methods.HttpMove:
    java.lang.String METHOD_NAME -> METHOD_NAME
    java.lang.String getMethod() -> getMethod
de.aflx.sardine.impl.methods.HttpPropFind -> de.aflx.sardine.impl.methods.HttpPropFind:
    java.lang.String METHOD_NAME -> METHOD_NAME
    java.lang.String getMethod() -> getMethod
    void setDepth(java.lang.String) -> setDepth
de.aflx.sardine.impl.methods.HttpPropPatch -> de.aflx.sardine.impl.methods.HttpPropPatch:
    java.lang.String METHOD_NAME -> METHOD_NAME
    java.lang.String getMethod() -> getMethod
de.aflx.sardine.impl.methods.HttpUnlock -> de.aflx.sardine.impl.methods.HttpUnlock:
    java.lang.String METHOD_NAME -> METHOD_NAME
    java.lang.String getMethod() -> getMethod
de.aflx.sardine.model.Activelock -> de.aflx.sardine.model.Activelock:
    de.aflx.sardine.model.Lockscope lockscope -> lockscope
    de.aflx.sardine.model.Locktype locktype -> locktype
    java.lang.String depth -> depth
    de.aflx.sardine.model.Owner owner -> owner
    java.lang.String timeout -> timeout
    de.aflx.sardine.model.Locktoken locktoken -> locktoken
    de.aflx.sardine.model.Lockscope getLockscope() -> getLockscope
    void setLockscope(de.aflx.sardine.model.Lockscope) -> setLockscope
    de.aflx.sardine.model.Locktype getLocktype() -> getLocktype
    void setLocktype(de.aflx.sardine.model.Locktype) -> setLocktype
    java.lang.String getDepth() -> getDepth
    void setDepth(java.lang.String) -> setDepth
    de.aflx.sardine.model.Owner getOwner() -> getOwner
    void setOwner(de.aflx.sardine.model.Owner) -> setOwner
    java.lang.String getTimeout() -> getTimeout
    void setTimeout(java.lang.String) -> setTimeout
    de.aflx.sardine.model.Locktoken getLocktoken() -> getLocktoken
    void setLocktoken(de.aflx.sardine.model.Locktoken) -> setLocktoken
de.aflx.sardine.model.Allprop -> de.aflx.sardine.model.Allprop:
de.aflx.sardine.model.Collection -> de.aflx.sardine.model.Collection:
de.aflx.sardine.model.Creationdate -> de.aflx.sardine.model.Creationdate:
    java.util.List content -> content
    java.util.List getContent() -> getContent
de.aflx.sardine.model.Displayname -> de.aflx.sardine.model.Displayname:
    java.util.List content -> content
    java.util.List getContent() -> getContent
de.aflx.sardine.model.Error -> de.aflx.sardine.model.Error:
    java.lang.Object any -> any
    java.lang.Object getAny() -> getAny
    void setAny(java.lang.Object) -> setAny
de.aflx.sardine.model.Exclusive -> de.aflx.sardine.model.Exclusive:
de.aflx.sardine.model.Getcontentlanguage -> de.aflx.sardine.model.Getcontentlanguage:
    java.util.List content -> content
    java.util.List getContent() -> getContent
de.aflx.sardine.model.Getcontentlength -> de.aflx.sardine.model.Getcontentlength:
    java.util.List content -> content
    java.util.List getContent() -> getContent
de.aflx.sardine.model.Getcontenttype -> de.aflx.sardine.model.Getcontenttype:
    java.util.List content -> content
    java.util.List getContent() -> getContent
de.aflx.sardine.model.Getetag -> de.aflx.sardine.model.Getetag:
    java.util.List content -> content
    java.util.List getContent() -> getContent
de.aflx.sardine.model.Getlastmodified -> de.aflx.sardine.model.Getlastmodified:
    java.util.List content -> content
    java.util.List getContent() -> getContent
de.aflx.sardine.model.Keepalive -> de.aflx.sardine.model.Keepalive:
    java.util.List content -> content
    java.util.List getContent() -> getContent
de.aflx.sardine.model.Link -> de.aflx.sardine.model.Link:
    java.util.List src -> src
    java.util.List dst -> dst
    java.util.List getSrc() -> getSrc
    java.util.List getDst() -> getDst
de.aflx.sardine.model.Lockdiscovery -> de.aflx.sardine.model.Lockdiscovery:
de.aflx.sardine.model.Lockentry -> de.aflx.sardine.model.Lockentry:
    de.aflx.sardine.model.Lockscope lockscope -> lockscope
    de.aflx.sardine.model.Locktype locktype -> locktype
    de.aflx.sardine.model.Lockscope getLockscope() -> getLockscope
    void setLockscope(de.aflx.sardine.model.Lockscope) -> setLockscope
    de.aflx.sardine.model.Locktype getLocktype() -> getLocktype
    void setLocktype(de.aflx.sardine.model.Locktype) -> setLocktype
de.aflx.sardine.model.Lockinfo -> de.aflx.sardine.model.Lockinfo:
    de.aflx.sardine.model.Lockscope lockscope -> lockscope
    de.aflx.sardine.model.Locktype locktype -> locktype
    de.aflx.sardine.model.Owner owner -> owner
    de.aflx.sardine.model.Lockscope getLockscope() -> getLockscope
    void setLockscope(de.aflx.sardine.model.Lockscope) -> setLockscope
    de.aflx.sardine.model.Locktype getLocktype() -> getLocktype
    void setLocktype(de.aflx.sardine.model.Locktype) -> setLocktype
    de.aflx.sardine.model.Owner getOwner() -> getOwner
    void setOwner(de.aflx.sardine.model.Owner) -> setOwner
de.aflx.sardine.model.Lockscope -> de.aflx.sardine.model.Lockscope:
    de.aflx.sardine.model.Exclusive exclusive -> exclusive
    de.aflx.sardine.model.Shared shared -> shared
    de.aflx.sardine.model.Exclusive getExclusive() -> getExclusive
    void setExclusive(de.aflx.sardine.model.Exclusive) -> setExclusive
    de.aflx.sardine.model.Shared getShared() -> getShared
    void setShared(de.aflx.sardine.model.Shared) -> setShared
de.aflx.sardine.model.Locktoken -> de.aflx.sardine.model.Locktoken:
    java.util.List href -> href
    java.util.List getHref() -> getHref
de.aflx.sardine.model.Locktype -> de.aflx.sardine.model.Locktype:
    de.aflx.sardine.model.Write write -> write
    de.aflx.sardine.model.Write getWrite() -> getWrite
    void setWrite(de.aflx.sardine.model.Write) -> setWrite
de.aflx.sardine.model.Multistatus -> de.aflx.sardine.model.Multistatus:
    java.util.List response -> response
    java.lang.String responsedescription -> responsedescription
    java.util.List getResponse() -> getResponse
    java.lang.String getResponsedescription() -> getResponsedescription
    void setResponsedescription(java.lang.String) -> setResponsedescription
de.aflx.sardine.model.ObjectFactory -> de.aflx.sardine.model.ObjectFactory:
    de.aflx.sardine.util.QName _Status_QNAME -> _Status_QNAME
    de.aflx.sardine.util.QName _Dst_QNAME -> _Dst_QNAME
    de.aflx.sardine.util.QName _Src_QNAME -> _Src_QNAME
    de.aflx.sardine.util.QName _Timeout_QNAME -> _Timeout_QNAME
    de.aflx.sardine.util.QName _Depth_QNAME -> _Depth_QNAME
    de.aflx.sardine.util.QName _Responsedescription_QNAME -> _Responsedescription_QNAME
    de.aflx.sardine.util.QName _Href_QNAME -> _Href_QNAME
    de.aflx.sardine.model.Propfind createPropfind() -> createPropfind
    de.aflx.sardine.model.Keepalive createKeepalive() -> createKeepalive
    de.aflx.sardine.model.Supportedlock createSupportedlock() -> createSupportedlock
    de.aflx.sardine.model.Propertyupdate createPropertyupdate() -> createPropertyupdate
    de.aflx.sardine.model.Lockinfo createLockinfo() -> createLockinfo
    de.aflx.sardine.model.Getlastmodified createGetlastmodified() -> createGetlastmodified
    de.aflx.sardine.model.Exclusive createExclusive() -> createExclusive
    de.aflx.sardine.model.Getcontentlanguage createGetcontentlanguage() -> createGetcontentlanguage
    de.aflx.sardine.model.Locktoken createLocktoken() -> createLocktoken
    de.aflx.sardine.model.Propertybehavior createPropertybehavior() -> createPropertybehavior
    de.aflx.sardine.model.Propstat createPropstat() -> createPropstat
    de.aflx.sardine.model.Multistatus createMultistatus() -> createMultistatus
    de.aflx.sardine.model.Prop createProp() -> createProp
    de.aflx.sardine.model.Remove createRemove() -> createRemove
    de.aflx.sardine.model.Response createResponse() -> createResponse
    de.aflx.sardine.model.Omit createOmit() -> createOmit
    de.aflx.sardine.model.Shared createShared() -> createShared
    de.aflx.sardine.model.Lockentry createLockentry() -> createLockentry
    de.aflx.sardine.model.Collection createCollection() -> createCollection
    de.aflx.sardine.model.Locktype createLocktype() -> createLocktype
    de.aflx.sardine.model.Error createError() -> createError
    de.aflx.sardine.model.Getetag createGetetag() -> createGetetag
    de.aflx.sardine.model.Displayname createDisplayname() -> createDisplayname
    de.aflx.sardine.model.Getcontenttype createGetcontenttype() -> createGetcontenttype
    de.aflx.sardine.model.Allprop createAllprop() -> createAllprop
    de.aflx.sardine.model.Link createLink() -> createLink
    de.aflx.sardine.model.Owner createOwner() -> createOwner
    de.aflx.sardine.model.Lockscope createLockscope() -> createLockscope
    de.aflx.sardine.model.Set createSet() -> createSet
    de.aflx.sardine.model.Lockdiscovery createLockdiscovery() -> createLockdiscovery
    de.aflx.sardine.model.Write createWrite() -> createWrite
    de.aflx.sardine.model.Source createSource() -> createSource
    de.aflx.sardine.model.Activelock createActivelock() -> createActivelock
    de.aflx.sardine.model.Propname createPropname() -> createPropname
    de.aflx.sardine.model.Resourcetype createResourcetype() -> createResourcetype
    de.aflx.sardine.model.Getcontentlength createGetcontentlength() -> createGetcontentlength
    de.aflx.sardine.model.Creationdate createCreationdate() -> createCreationdate
de.aflx.sardine.model.Omit -> de.aflx.sardine.model.Omit:
de.aflx.sardine.model.Owner -> de.aflx.sardine.model.Owner:
    java.util.List content -> content
    java.util.List getContent() -> getContent
de.aflx.sardine.model.Prop -> de.aflx.sardine.model.Prop:
    de.aflx.sardine.model.Resourcetype resourcetype -> resourcetype
    java.lang.String creationdate -> creationdate
    java.lang.String getlastmodified -> getlastmodified
    java.lang.String getetag -> getetag
    java.lang.String getcontenttype -> getcontenttype
    java.lang.String getcontentlength -> getcontentlength
    de.aflx.sardine.model.Resourcetype getResourcetype() -> getResourcetype
    java.lang.String getCreationdate() -> getCreationdate
    java.lang.String getGetlastmodified() -> getGetlastmodified
    java.lang.String getGetetag() -> getGetetag
    java.lang.String getGetcontenttype() -> getGetcontenttype
    java.lang.String getGetcontentlength() -> getGetcontentlength
    void setGetcontentlength(java.lang.String) -> setGetcontentlength
    void setResourcetype(de.aflx.sardine.model.Resourcetype) -> setResourcetype
    void setCreationdate(java.lang.String) -> setCreationdate
    void setGetlastmodified(java.lang.String) -> setGetlastmodified
    void setGetetag(java.lang.String) -> setGetetag
    void setGetcontenttype(java.lang.String) -> setGetcontenttype
de.aflx.sardine.model.Propertybehavior -> de.aflx.sardine.model.Propertybehavior:
    de.aflx.sardine.model.Omit omit -> omit
    de.aflx.sardine.model.Keepalive keepalive -> keepalive
    de.aflx.sardine.model.Omit getOmit() -> getOmit
    void setOmit(de.aflx.sardine.model.Omit) -> setOmit
    de.aflx.sardine.model.Keepalive getKeepalive() -> getKeepalive
    void setKeepalive(de.aflx.sardine.model.Keepalive) -> setKeepalive
de.aflx.sardine.model.Propertyupdate -> de.aflx.sardine.model.Propertyupdate:
    java.util.List removeOrSet -> removeOrSet
    java.util.List getRemoveOrSet() -> getRemoveOrSet
de.aflx.sardine.model.Propfind -> de.aflx.sardine.model.Propfind:
    de.aflx.sardine.model.Allprop allprop -> allprop
    de.aflx.sardine.model.Propname propname -> propname
    de.aflx.sardine.model.Prop prop -> prop
    de.aflx.sardine.model.Allprop getAllprop() -> getAllprop
    void setAllprop(de.aflx.sardine.model.Allprop) -> setAllprop
    de.aflx.sardine.model.Propname getPropname() -> getPropname
    void setPropname(de.aflx.sardine.model.Propname) -> setPropname
    de.aflx.sardine.model.Prop getProp() -> getProp
    void setProp(de.aflx.sardine.model.Prop) -> setProp
de.aflx.sardine.model.Propname -> de.aflx.sardine.model.Propname:
de.aflx.sardine.model.Propstat -> de.aflx.sardine.model.Propstat:
    de.aflx.sardine.model.Prop prop -> prop
    java.lang.String status -> status
    de.aflx.sardine.model.Error error -> error
    java.lang.String responsedescription -> responsedescription
    de.aflx.sardine.model.Prop getProp() -> getProp
    void setProp(de.aflx.sardine.model.Prop) -> setProp
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> setStatus
    de.aflx.sardine.model.Error getError() -> getError
    void setError(de.aflx.sardine.model.Error) -> setError
    java.lang.String getResponsedescription() -> getResponsedescription
    void setResponsedescription(java.lang.String) -> setResponsedescription
de.aflx.sardine.model.Remove -> de.aflx.sardine.model.Remove:
    de.aflx.sardine.model.Prop prop -> prop
    de.aflx.sardine.model.Prop getProp() -> getProp
    void setProp(de.aflx.sardine.model.Prop) -> setProp
de.aflx.sardine.model.Resourcetype -> de.aflx.sardine.model.Resourcetype:
    de.aflx.sardine.model.Collection collection -> collection
    de.aflx.sardine.model.Collection getCollection() -> getCollection
    void setCollection(de.aflx.sardine.model.Collection) -> setCollection
de.aflx.sardine.model.Response -> de.aflx.sardine.model.Response:
    java.lang.String href -> href
    java.lang.String status -> status
    java.util.List propstat -> propstat
    de.aflx.sardine.model.Error error -> error
    java.lang.String responsedescription -> responsedescription
    java.lang.String getHref() -> getHref
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> setStatus
    de.aflx.sardine.model.Error getError() -> getError
    java.util.List getPropstat() -> getPropstat
    void setPropstat(java.util.List) -> setPropstat
    void setError(de.aflx.sardine.model.Error) -> setError
    java.lang.String getResponsedescription() -> getResponsedescription
    void setResponsedescription(java.lang.String) -> setResponsedescription
    void setHref(java.lang.String) -> setHref
de.aflx.sardine.model.Set -> de.aflx.sardine.model.Set:
    de.aflx.sardine.model.Prop prop -> prop
    de.aflx.sardine.model.Prop getProp() -> getProp
    void setProp(de.aflx.sardine.model.Prop) -> setProp
de.aflx.sardine.model.Shared -> de.aflx.sardine.model.Shared:
de.aflx.sardine.model.Source -> de.aflx.sardine.model.Source:
    java.util.List link -> link
    java.util.List getLink() -> getLink
de.aflx.sardine.model.Supportedlock -> de.aflx.sardine.model.Supportedlock:
de.aflx.sardine.model.Write -> de.aflx.sardine.model.Write:
de.aflx.sardine.util.Logger -> de.aflx.sardine.util.Logger:
    void warn(java.lang.String) -> warn
de.aflx.sardine.util.QName -> de.aflx.sardine.util.QName:
    long serialVersionUID -> serialVersionUID
    long defaultSerialVersionUID -> defaultSerialVersionUID
    long compatibleSerialVersionUID -> compatibleSerialVersionUID
    boolean useDefaultSerialVersionUID -> useDefaultSerialVersionUID
    java.lang.String namespaceURI -> namespaceURI
    java.lang.String localPart -> localPart
    java.lang.String prefix -> prefix
    java.lang.String getNamespaceURI() -> getNamespaceURI
    java.lang.String getLocalPart() -> getLocalPart
    java.lang.String getPrefix() -> getPrefix
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    de.aflx.sardine.util.QName valueOf(java.lang.String) -> valueOf
de.aflx.sardine.util.QName$1 -> de.aflx.sardine.util.QName$1:
    java.lang.Object run() -> run
de.aflx.sardine.util.SardineUtil -> de.aflx.sardine.util.SardineUtil:
    java.lang.String CUSTOM_NAMESPACE_PREFIX -> CUSTOM_NAMESPACE_PREFIX
    java.lang.String CUSTOM_NAMESPACE_URI -> CUSTOM_NAMESPACE_URI
    java.lang.String DEFAULT_NAMESPACE_PREFIX -> DEFAULT_NAMESPACE_PREFIX
    java.lang.String DEFAULT_NAMESPACE_URI -> DEFAULT_NAMESPACE_URI
    java.util.List DATETIME_FORMATS -> DATETIME_FORMATS
    java.util.Date parseDate(java.lang.String) -> parseDate
    org.w3c.dom.Document createDocument() -> createDocument
    java.util.Map toQName(java.util.Map) -> toQName
    java.util.List toQName(java.util.List) -> toQName
    de.aflx.sardine.util.QName createQNameWithCustomNamespace(java.lang.String) -> createQNameWithCustomNamespace
    de.aflx.sardine.util.QName createQNameWithDefaultNamespace(java.lang.String) -> createQNameWithDefaultNamespace
    org.w3c.dom.Element createElement(de.aflx.sardine.util.QName) -> createElement
de.aflx.sardine.util.SardineUtil$1 -> de.aflx.sardine.util.SardineUtil$1:
    java.text.SimpleDateFormat initialValue() -> a
    java.lang.Object initialValue() -> initialValue
de.aflx.sardine.util.SardineUtil$2 -> de.aflx.sardine.util.SardineUtil$2:
    java.text.SimpleDateFormat initialValue() -> a
    java.lang.Object initialValue() -> initialValue
de.aflx.sardine.util.SardineUtil$3 -> de.aflx.sardine.util.SardineUtil$3:
    java.text.SimpleDateFormat initialValue() -> a
    java.lang.Object initialValue() -> initialValue
de.aflx.sardine.util.SardineUtil$4 -> de.aflx.sardine.util.SardineUtil$4:
    java.text.SimpleDateFormat initialValue() -> a
    java.lang.Object initialValue() -> initialValue
de.aflx.sardine.util.SardineUtil$5 -> de.aflx.sardine.util.SardineUtil$5:
    java.text.SimpleDateFormat initialValue() -> a
    java.lang.Object initialValue() -> initialValue
de.aflx.sardine.util.SardineUtil$6 -> de.aflx.sardine.util.SardineUtil$6:
    java.text.SimpleDateFormat initialValue() -> a
    java.lang.Object initialValue() -> initialValue
de.aflx.sardine.util.SardineUtil$7 -> de.aflx.sardine.util.SardineUtil$7:
    java.text.SimpleDateFormat initialValue() -> a
    java.lang.Object initialValue() -> initialValue
fr.starn.FileSynchronizerAlarmReceiver -> fr.starn.FileSynchronizerAlarmReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
fr.starn.FileSynchronizerRule -> fr.starn.a:
    int id -> a
    java.lang.String volumeNameToSync -> b
    java.lang.String volumePassword -> c
    java.lang.String volumePathToSync -> d
    java.lang.String deleteSrcFileAfterSync -> e
    java.lang.String syncOnlyOnWifi -> f
    java.lang.String localPathToSync -> g
    int getId() -> a
    java.lang.String getVolumeNameToSync() -> b
    java.lang.String getLocalPathToSync() -> c
    java.lang.String getVolumePathToSync() -> d
    java.lang.String getVolumePassword() -> e
    java.lang.String getDeleteSrcFileAfterSync() -> f
    java.lang.String getSyncOnlyOnWifi() -> g
    boolean getSyncOnlyOnWifiBool() -> h
fr.starn.FileSynchronizerService -> fr.starn.FileSynchronizerService:
    java.util.List rules -> b
    fr.starn.FileSynchronizerService instance -> c
    boolean syncIsRunning -> d
    org.mrpdaemon.android.encdroidmc.EDApplication mApp -> a
    void onCreate() -> onCreate
    fr.starn.FileSynchronizerService getInstance() -> a
    void refreshRules(java.util.List) -> a
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    void launchRule(int) -> a
    fr.starn.FileSynchronizerRule getRuleFromId(int) -> b
    void sync(int) -> c
    fr.starn.FileSynchronizerRule getRuleById(int) -> d
    org.mrpdaemon.android.encdroidmc.EDVolume getVolumeFromName(java.lang.String) -> b
    void onDestroy() -> onDestroy
    void refreshNotifyBar(java.lang.String) -> a
    android.os.IBinder onBind(android.content.Intent) -> onBind
fr.starn.Password -> fr.starn.b:
    java.lang.String getSaltedHash(java.lang.String) -> a
    boolean check(java.lang.String,java.lang.String) -> a
    java.lang.String hash(java.lang.String,byte[]) -> a
fr.starn.PersistantInstanceManager -> fr.starn.c:
    java.util.Map encfsFiles -> a
    org.mrpdaemon.sec.encfs.EncFSFile getEncfsFile(java.lang.String) -> a
    void addEncfsFile(org.mrpdaemon.sec.encfs.EncFSFile) -> a
fr.starn.StartFileSynchronizerAtBootReceiver -> fr.starn.StartFileSynchronizerAtBootReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
fr.starn.ThumbnailManager -> fr.starn.d:
    byte[] dbFileContent -> a
    int filenameLengthInByte -> b
    int fileSizeLengthInByte -> c
    java.util.Map filenameToStartingIndexMap -> d
    boolean isEmpty() -> a
    java.util.Set getFilenameList() -> b
    int getFilenamePos(java.lang.String) -> c
    boolean contains(java.lang.String) -> a
    boolean addFile(java.lang.String,byte[]) -> a
    boolean save(java.io.OutputStream) -> a
    byte[] getFileContent(java.lang.String) -> b
    byte[] inputStreamToByteArray(java.io.InputStream) -> a
    byte[] intToByteArray(int) -> a
    int byteArrayToInt(byte[]) -> a
    byte[] copyByteArray(byte[],int) -> a
    byte[] concatByteArrays(byte[][]) -> a
fr.starn.fileProviderModules.FileProvider0 -> fr.starn.fileProviderModules.FileProvider0:
    org.mrpdaemon.sec.encfs.EncFSLocalFileProvider encFSLocalFileProvider -> encFSLocalFileProvider
    void initialize(java.lang.String) -> initialize
    java.lang.String getProviderName() -> getProviderName
    java.util.List getParamsToAsk() -> getParamsToAsk
    boolean copy(java.lang.String,java.lang.String) -> copy
    org.mrpdaemon.sec.encfs.EncFSFileInfo createFile(java.lang.String) -> createFile
    boolean delete(java.lang.String) -> delete
    boolean exists(java.lang.String) -> exists
    org.mrpdaemon.sec.encfs.EncFSFileInfo getFileInfo(java.lang.String) -> getFileInfo
    boolean isDirectory(java.lang.String) -> isDirectory
    java.util.List fsList(java.lang.String) -> fsList
    boolean mkdir(java.lang.String) -> mkdir
    boolean mkdirs(java.lang.String) -> mkdirs
    boolean move(java.lang.String,java.lang.String) -> move
    java.io.OutputStream fsUpload(java.lang.String,long) -> fsUpload
    void fsUpload(java.lang.String,java.io.PipedInputStream,long) -> fsUpload
    java.io.InputStream fsDownload(java.lang.String,long) -> fsDownload
    java.lang.String getUrlPrefix() -> getUrlPrefix
    int getID() -> getID
    java.lang.String getFilesystemRootPath() -> getFilesystemRootPath
fr.starn.fileProviderModules.FileProvider1 -> fr.starn.fileProviderModules.FileProvider1:
    org.mrpdaemon.sec.encfs.EncFSLocalFileProvider encFSLocalFileProvider -> encFSLocalFileProvider
    void initialize(java.lang.String) -> initialize
    java.lang.String getProviderName() -> getProviderName
    java.util.List getParamsToAsk() -> getParamsToAsk
    boolean copy(java.lang.String,java.lang.String) -> copy
    org.mrpdaemon.sec.encfs.EncFSFileInfo createFile(java.lang.String) -> createFile
    boolean delete(java.lang.String) -> delete
    boolean exists(java.lang.String) -> exists
    org.mrpdaemon.sec.encfs.EncFSFileInfo getFileInfo(java.lang.String) -> getFileInfo
    boolean isDirectory(java.lang.String) -> isDirectory
    java.util.List fsList(java.lang.String) -> fsList
    boolean mkdir(java.lang.String) -> mkdir
    boolean mkdirs(java.lang.String) -> mkdirs
    boolean move(java.lang.String,java.lang.String) -> move
    java.io.OutputStream fsUpload(java.lang.String,long) -> fsUpload
    void fsUpload(java.lang.String,java.io.PipedInputStream,long) -> fsUpload
    java.io.InputStream fsDownload(java.lang.String,long) -> fsDownload
    java.lang.String getUrlPrefix() -> getUrlPrefix
    int getID() -> getID
    java.lang.String getFilesystemRootPath() -> getFilesystemRootPath
fr.starn.fileProviderModules.FileProvider2 -> fr.starn.fileProviderModules.FileProvider2:
    de.aflx.sardine.util.Logger log -> log
    java.lang.String hostnameKey -> hostnameKey
    java.lang.String portKey -> portKey
    java.lang.String loginKey -> loginKey
    java.lang.String pwdKey -> pwdKey
    java.lang.String TAG -> TAG
    java.lang.String hostname -> hostname
    int port -> port
    it.sauronsoftware.ftp4j.FTPClient ftpClient -> ftpClient
    void initialize(java.lang.String) -> initialize
    it.sauronsoftware.ftp4j.FTPClient getFtpClient() -> getFtpClient
    boolean copy(java.lang.String,java.lang.String) -> copy
    org.mrpdaemon.sec.encfs.EncFSFileInfo createFile(java.lang.String) -> createFile
    boolean delete(java.lang.String) -> delete
    boolean exists(java.lang.String) -> exists
    void finalize() -> finalize
    org.mrpdaemon.sec.encfs.EncFSFileInfo getFileInfo(java.lang.String) -> getFileInfo
    boolean isDirectory(java.lang.String) -> isDirectory
    org.mrpdaemon.sec.encfs.EncFSFileInfo ftpResource2EncFSFileInfo(java.lang.String,it.sauronsoftware.ftp4j.FTPFile) -> ftpResource2EncFSFileInfo
    java.lang.String getURLWithoutSlash(java.lang.String) -> getURLWithoutSlash
    java.lang.String getParentPath(java.lang.String) -> getParentPath
    boolean mkdir(java.lang.String) -> mkdir
    boolean mkdirs(java.lang.String) -> mkdirs
    boolean move(java.lang.String,java.lang.String) -> move
    void fsUpload(java.lang.String,java.io.PipedInputStream,long) -> fsUpload
    java.lang.String getProviderName() -> getProviderName
    java.util.List getParamsToAsk() -> getParamsToAsk
    boolean allowRemoteCopy() -> allowRemoteCopy
    java.util.List fsList(java.lang.String) -> fsList
    void fsDownload(java.lang.String,java.io.OutputStream,long) -> fsDownload
    java.io.InputStream fsDownload(java.lang.String,long) -> fsDownload
    java.lang.String getUrlPrefix() -> getUrlPrefix
    void clearSession() -> clearSession
    int getID() -> getID
    java.lang.String getFilesystemRootPath() -> getFilesystemRootPath
fr.starn.fileProviderModules.FileProvider3 -> fr.starn.fileProviderModules.FileProvider3:
    java.lang.String hostnameKey -> hostnameKey
    java.lang.String loginKey -> loginKey
    java.lang.String pwdKey -> pwdKey
    jcifs.smb.NtlmPasswordAuthentication authentication -> authentication
    java.lang.String serverAdress -> serverAdress
    java.lang.String getProviderName() -> getProviderName
    void initialize(java.lang.String) -> initialize
    boolean isDirectory(java.lang.String) -> isDirectory
    boolean exists(java.lang.String) -> exists
    org.mrpdaemon.sec.encfs.EncFSFileInfo getFileInfo(java.lang.String) -> getFileInfo
    boolean move(java.lang.String,java.lang.String) -> move
    boolean delete(java.lang.String) -> delete
    boolean mkdir(java.lang.String) -> mkdir
    boolean mkdirs(java.lang.String) -> mkdirs
    org.mrpdaemon.sec.encfs.EncFSFileInfo createFile(java.lang.String) -> createFile
    boolean copy(java.lang.String,java.lang.String) -> copy
    java.util.List getParamsToAsk() -> getParamsToAsk
    org.mrpdaemon.sec.encfs.EncFSFileInfo SmbFile2EncFSFileInfo(jcifs.smb.SmbFile) -> SmbFile2EncFSFileInfo
    java.util.List fsList(java.lang.String) -> fsList
    void fsUpload(java.lang.String,java.io.PipedInputStream,long) -> fsUpload
    java.io.InputStream fsDownload(java.lang.String,long) -> fsDownload
    java.io.OutputStream fsUpload(java.lang.String,long) -> fsUpload
    java.lang.String getUrlPrefix() -> getUrlPrefix
    void clearSession() -> clearSession
    int getID() -> getID
    java.lang.String getFilesystemRootPath() -> getFilesystemRootPath
fr.starn.fileProviderModules.FileProvider4 -> fr.starn.fileProviderModules.FileProvider4:
    com.dropbox.client2.DropboxAPI api -> api
    void initialize(java.lang.String) -> initialize
    void handleDropboxException(com.dropbox.client2.exception.DropboxException) -> handleDropboxException
    boolean copy(java.lang.String,java.lang.String) -> copy
    org.mrpdaemon.sec.encfs.EncFSFileInfo createFile(java.lang.String) -> createFile
    boolean delete(java.lang.String) -> delete
    boolean exists(java.lang.String) -> exists
    org.mrpdaemon.sec.encfs.EncFSFileInfo entryToFileInfo(com.dropbox.client2.DropboxAPI$Entry) -> entryToFileInfo
    org.mrpdaemon.sec.encfs.EncFSFileInfo getFileInfo(java.lang.String) -> getFileInfo
    boolean isDirectory(java.lang.String) -> isDirectory
    java.util.List fsList(java.lang.String) -> fsList
    boolean mkdir(java.lang.String) -> mkdir
    boolean mkdirs(java.lang.String) -> mkdirs
    boolean move(java.lang.String,java.lang.String) -> move
    java.io.InputStream fsDownload(java.lang.String,long) -> fsDownload
    void fsUpload(java.lang.String,java.io.PipedInputStream,long) -> fsUpload
    java.lang.String getProviderName() -> getProviderName
    java.util.List getParamsToAsk() -> getParamsToAsk
    void link(android.app.Activity) -> link
    boolean onResume(android.app.Activity) -> onResume
    boolean isLinked(android.app.Activity) -> isLinked
    org.mrpdaemon.android.encdroidmc.tools.KeyValueBean getLoginPwd(android.app.Activity) -> getLoginPwd
    java.lang.String getUrlPrefix() -> getUrlPrefix
    int getID() -> getID
    java.lang.String getFilesystemRootPath() -> getFilesystemRootPath
fr.starn.fileProviderModules.FileProvider5 -> fr.starn.fileProviderModules.FileProvider5:
    void initialize(java.lang.String) -> initialize
    de.aflx.sardine.Sardine getSardine() -> getSardine
    java.lang.String getAbsolutePath(java.lang.String) -> getAbsolutePath
    java.util.List fsList(java.lang.String) -> fsList
    org.mrpdaemon.sec.encfs.EncFSFileInfo davResource2EncFSFileInfo(de.aflx.sardine.DavResource) -> davResource2EncFSFileInfo
    java.util.List getParamsToAsk() -> getParamsToAsk
    java.lang.String getProviderName() -> getProviderName
    int getID() -> getID
    java.lang.String getFilesystemRootPath() -> getFilesystemRootPath
fr.starn.fileProviderModules.FileProvider6 -> fr.starn.fileProviderModules.FileProvider6:
    java.lang.String hostnameKey -> hostnameKey
    java.lang.String loginKey -> loginKey
    java.lang.String pwdKey -> pwdKey
    java.lang.String serverAdressFull -> serverAdressFull
    java.lang.String userName -> userName
    java.lang.String pwd -> pwd
    com.jcraft.jsch.Session sshSession -> sshSession
    com.jcraft.jsch.ChannelSftp sftp -> sftp
    java.lang.String getProviderName() -> getProviderName
    com.jcraft.jsch.ChannelSftp getNewSession() -> getNewSession
    com.jcraft.jsch.ChannelSftp getSession() -> getSession
    void initialize(java.lang.String) -> initialize
    boolean isDirectory(java.lang.String) -> isDirectory
    boolean exists(java.lang.String) -> exists
    org.mrpdaemon.sec.encfs.EncFSFileInfo getFileInfo(java.lang.String) -> getFileInfo
    boolean move(java.lang.String,java.lang.String) -> move
    boolean delete(java.lang.String) -> delete
    boolean mkdir(java.lang.String) -> mkdir
    boolean mkdirs(java.lang.String) -> mkdirs
    org.mrpdaemon.sec.encfs.EncFSFileInfo createFile(java.lang.String) -> createFile
    boolean copy(java.lang.String,java.lang.String) -> copy
    boolean allowRemoteCopy() -> allowRemoteCopy
    java.util.List getParamsToAsk() -> getParamsToAsk
    org.mrpdaemon.sec.encfs.EncFSFileInfo LsEntry2EncFSFileInfo(java.lang.String,com.jcraft.jsch.ChannelSftp$LsEntry) -> LsEntry2EncFSFileInfo
    java.lang.String getParentPath(java.lang.String) -> getParentPath
    java.lang.String getURLWithoutSlash(java.lang.String) -> getURLWithoutSlash
    java.util.List fsList(java.lang.String) -> fsList
    void fsUpload(java.lang.String,java.io.PipedInputStream,long) -> fsUpload
    java.io.InputStream fsDownload(java.lang.String,long) -> fsDownload
    java.io.OutputStream fsUpload(java.lang.String,long) -> fsUpload
    java.lang.String getUrlPrefix() -> getUrlPrefix
    void clearSession() -> clearSession
    int getID() -> getID
    java.lang.String getFilesystemRootPath() -> getFilesystemRootPath
fr.starn.fileProviderModules.FileProvider7 -> fr.starn.fileProviderModules.FileProvider7:
    java.lang.String hostnameKey -> hostnameKey
    java.lang.String loginKey -> loginKey
    java.lang.String pwdKey -> pwdKey
    java.lang.String TAG -> TAG
    de.aflx.sardine.Sardine sardine_ -> sardine_
    java.lang.String connexionURL -> connexionURL
    de.aflx.sardine.Sardine getSardine() -> getSardine
    void initialize(java.lang.String) -> initialize
    boolean copy(java.lang.String,java.lang.String) -> copy
    org.mrpdaemon.sec.encfs.EncFSFileInfo createFile(java.lang.String) -> createFile
    boolean delete(java.lang.String) -> delete
    boolean exists(java.lang.String) -> exists
    org.mrpdaemon.sec.encfs.EncFSFileInfo getFileInfo(java.lang.String) -> getFileInfo
    boolean isDirectory(java.lang.String) -> isDirectory
    org.mrpdaemon.sec.encfs.EncFSFileInfo davResource2EncFSFileInfo(de.aflx.sardine.DavResource) -> davResource2EncFSFileInfo
    java.lang.String getParentPath(java.lang.String) -> getParentPath
    java.lang.String getURLWithSlash(java.lang.String) -> getURLWithSlash
    java.lang.String getURLWithoutSlash(java.lang.String) -> getURLWithoutSlash
    java.util.List fsList(java.lang.String) -> fsList
    boolean mkdir(java.lang.String) -> mkdir
    boolean mkdirs(java.lang.String) -> mkdirs
    boolean move(java.lang.String,java.lang.String) -> move
    java.io.InputStream fsDownload(java.lang.String,long) -> fsDownload
    ch.boye.httpclientandroidlib.impl.client.AbstractHttpClient wrapClient(ch.boye.httpclientandroidlib.client.HttpClient) -> wrapClient
    java.lang.String getProviderName() -> getProviderName
    java.util.List getParamsToAsk() -> getParamsToAsk
    void fsUpload(java.lang.String,java.io.PipedInputStream,long) -> fsUpload
    java.lang.String getUrlPrefix() -> getUrlPrefix
    void clearSession() -> clearSession
    int getID() -> getID
    java.lang.String getFilesystemRootPath() -> getFilesystemRootPath
fr.starn.fileProviderModules.X509AlwaysTrust -> fr.starn.fileProviderModules.X509AlwaysTrust:
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
fr.starn.webdavServer.HeaderManagement -> fr.starn.a.a:
    java.lang.String httpCode -> a
    java.util.List properties -> b
    boolean hearderAlreadySent -> c
    void addProperties(java.lang.String,java.lang.String) -> a
    void construct_http_header(java.io.OutputStream) -> a
fr.starn.webdavServer.HttpServer -> fr.starn.a.b:
    java.util.Map srcFile -> a
    fr.starn.webdavServer.HttpServer instance -> b
    fr.starn.webdavServer.HttpServer getInstance() -> a
    java.lang.String setFile(org.mrpdaemon.sec.encfs.EncFSFile) -> a
    void run() -> run
fr.starn.webdavServer.KeyValueBean -> fr.starn.a.c:
    java.lang.String key -> a
    java.lang.String value -> b
    java.lang.String getKey() -> a
    void setKey(java.lang.String) -> a
    java.lang.String getValue() -> b
    void setValue(java.lang.String) -> b
fr.starn.webdavServer.RequestHandler -> fr.starn.a.d:
    fr.starn.webdavServer.WebdavServerContext ctx -> a
    java.util.Map srcFiles -> b
    void run() -> run
    void http_handler(fr.starn.webdavServer.WebdavServerContext) -> a
fr.starn.webdavServer.WebdavServerContext -> fr.starn.a.e:
    java.lang.String clientAdress -> b
    java.lang.String serverAdress -> c
    int serverPort -> d
    boolean ssl -> a
    java.io.InputStream inputFromClient -> e
    java.io.OutputStream outputFromServer -> f
    java.util.Map clientHttpParams -> g
    java.lang.String[] command -> h
    void close() -> a
    int getServerPort() -> b
    java.util.Map getClientHttpParams() -> c
    java.lang.String[] getCommand() -> d
    java.io.OutputStream getOutputFromServer() -> e
    java.lang.String getURL() -> f
fr.starn.webdavServer.XMLHelper -> fr.starn.a.f:
    java.lang.String getStringFromURL(java.lang.String) -> a
it.sauronsoftware.ftp4j.FTPAbortedException -> b.a.a.a:
it.sauronsoftware.ftp4j.FTPClient -> b.a.a.b:
    java.text.DateFormat MDTM_DATE_FORMAT -> a
    java.util.regex.Pattern PASV_PATTERN -> b
    java.util.regex.Pattern PWD_PATTERN -> c
    it.sauronsoftware.ftp4j.FTPConnector connector -> d
    javax.net.ssl.SSLSocketFactory sslSocketFactory -> e
    java.util.ArrayList communicationListeners -> f
    java.util.ArrayList listParsers -> g
    it.sauronsoftware.ftp4j.FTPTextualExtensionRecognizer textualExtensionRecognizer -> h
    it.sauronsoftware.ftp4j.FTPListParser parser -> i
    java.lang.String host -> j
    int port -> k
    int security -> l
    java.lang.String username -> m
    java.lang.String password -> n
    boolean connected -> o
    boolean authenticated -> p
    boolean passive -> q
    int type -> r
    int mlsdPolicy -> s
    long autoNoopTimeout -> t
    it.sauronsoftware.ftp4j.FTPClient$AutoNoopTimer autoNoopTimer -> u
    long nextAutoNoopTime -> v
    boolean restSupported -> w
    java.lang.String charset -> x
    boolean compressionEnabled -> y
    boolean utf8Supported -> z
    boolean mlsdSupported -> A
    boolean modezSupported -> B
    boolean modezEnabled -> C
    boolean dataChannelEncrypted -> D
    boolean ongoingDataTransfer -> E
    java.io.InputStream dataTransferInputStream -> F
    java.io.OutputStream dataTransferOutputStream -> G
    boolean aborted -> H
    boolean consumeAborCommandReply -> I
    java.lang.Object lock -> J
    java.lang.Object abortLock -> K
    it.sauronsoftware.ftp4j.FTPCommunicationChannel communication -> L
    java.net.Socket ssl(java.net.Socket,java.lang.String,int) -> a
    void setPassive(boolean) -> a
    void setType(int) -> a
    it.sauronsoftware.ftp4j.FTPCommunicationListener[] getCommunicationListeners() -> a
    void addListParser(it.sauronsoftware.ftp4j.FTPListParser) -> a
    it.sauronsoftware.ftp4j.FTPListParser[] getListParsers() -> b
    java.lang.String[] connect(java.lang.String,int) -> a
    void disconnect(boolean) -> b
    void login(java.lang.String,java.lang.String) -> a
    void login(java.lang.String,java.lang.String,java.lang.String) -> a
    void postLoginOperations() -> e
    void noop() -> c
    java.lang.String currentDirectory() -> d
    void rename(java.lang.String,java.lang.String) -> b
    void deleteFile(java.lang.String) -> a
    void deleteDirectory(java.lang.String) -> b
    void createDirectory(java.lang.String) -> c
    it.sauronsoftware.ftp4j.FTPFile[] list(java.lang.String) -> d
    void upload(java.lang.String,java.io.InputStream,long,long,it.sauronsoftware.ftp4j.FTPDataTransferListener) -> a
    void download(java.lang.String,java.io.OutputStream,long,it.sauronsoftware.ftp4j.FTPDataTransferListener) -> a
    int detectType(java.lang.String) -> e
    it.sauronsoftware.ftp4j.FTPDataTransferConnectionProvider openDataTransferChannel() -> f
    it.sauronsoftware.ftp4j.FTPDataTransferConnectionProvider openActiveDataTransferChannel() -> g
    it.sauronsoftware.ftp4j.FTPDataTransferConnectionProvider openPassiveDataTransferChannel() -> h
    java.lang.String pickCharset() -> i
    int[] pickLocalAddress() -> j
    int[] pickForcedLocalAddress() -> k
    int[] pickAutoDetectedLocalAddress() -> l
    java.lang.String toString() -> toString
    void startAutoNoopTimer() -> m
    void stopAutoNoopTimer() -> n
    void touchAutoNoopTimer() -> o
    boolean access$000(it.sauronsoftware.ftp4j.FTPClient) -> a
    java.net.Socket access$100(it.sauronsoftware.ftp4j.FTPClient,java.net.Socket,java.lang.String,int) -> a
    it.sauronsoftware.ftp4j.FTPConnector access$200(it.sauronsoftware.ftp4j.FTPClient) -> b
    java.lang.String access$300(it.sauronsoftware.ftp4j.FTPClient) -> c
    java.lang.Object access$500(it.sauronsoftware.ftp4j.FTPClient) -> d
    long access$600(it.sauronsoftware.ftp4j.FTPClient) -> e
    long access$700(it.sauronsoftware.ftp4j.FTPClient) -> f
    long access$602(it.sauronsoftware.ftp4j.FTPClient,long) -> a
it.sauronsoftware.ftp4j.FTPClient$1 -> b.a.a.c:
    it.sauronsoftware.ftp4j.FTPClient this$0 -> a
    java.net.Socket openDataTransferConnection() -> a
it.sauronsoftware.ftp4j.FTPClient$2 -> b.a.a.d:
    java.lang.String val$pasvHost -> a
    int val$pasvPort -> b
    it.sauronsoftware.ftp4j.FTPClient this$0 -> c
    java.net.Socket openDataTransferConnection() -> a
    void dispose() -> b
it.sauronsoftware.ftp4j.FTPClient$AutoNoopTimer -> b.a.a.e:
    it.sauronsoftware.ftp4j.FTPClient this$0 -> a
    void run() -> run
it.sauronsoftware.ftp4j.FTPCommunicationChannel -> b.a.a.f:
    java.util.ArrayList communicationListeners -> a
    java.net.Socket connection -> b
    java.lang.String charsetName -> c
    it.sauronsoftware.ftp4j.NVTASCIIReader reader -> d
    it.sauronsoftware.ftp4j.NVTASCIIWriter writer -> e
    void addCommunicationListener(it.sauronsoftware.ftp4j.FTPCommunicationListener) -> a
    void close() -> a
    java.lang.String read() -> c
    void sendFTPCommand(java.lang.String) -> a
    it.sauronsoftware.ftp4j.FTPReply readFTPReply() -> b
    void changeCharset(java.lang.String) -> b
    void ssl(javax.net.ssl.SSLSocketFactory) -> a
it.sauronsoftware.ftp4j.FTPCommunicationListener -> b.a.a.g:
    void sent(java.lang.String) -> a
    void received(java.lang.String) -> b
it.sauronsoftware.ftp4j.FTPConnector -> b.a.a.h:
    int connectionTimeout -> a
    int readTimeout -> b
    int closeTimeout -> c
    boolean useSuggestedAddressForDataConnections -> d
    java.net.Socket connectingCommunicationChannelSocket -> e
    boolean getUseSuggestedAddressForDataConnections() -> a
    java.net.Socket tcpConnectForCommunicationChannel(java.lang.String,int) -> a
    java.net.Socket tcpConnectForDataTransferChannel(java.lang.String,int) -> b
    java.net.Socket connectForCommunicationChannel(java.lang.String,int) -> c
    java.net.Socket connectForDataTransferChannel(java.lang.String,int) -> d
it.sauronsoftware.ftp4j.FTPDataTransferConnectionProvider -> b.a.a.i:
    java.net.Socket openDataTransferConnection() -> a
    void dispose() -> b
it.sauronsoftware.ftp4j.FTPDataTransferException -> b.a.a.j:
it.sauronsoftware.ftp4j.FTPDataTransferListener -> b.a.a.k:
    void started() -> a
    void transferred(int) -> a
    void completed() -> b
    void aborted() -> c
    void failed() -> d
it.sauronsoftware.ftp4j.FTPDataTransferServer -> b.a.a.l:
    java.net.ServerSocket serverSocket -> a
    java.net.Socket socket -> b
    java.io.IOException exception -> c
    java.lang.Thread thread -> d
    int getPort() -> c
    void run() -> run
    void dispose() -> b
    java.net.Socket openDataTransferConnection() -> a
it.sauronsoftware.ftp4j.FTPException -> b.a.a.m:
    int code -> a
    java.lang.String message -> b
    java.lang.String getMessage() -> getMessage
    java.lang.String toString() -> toString
it.sauronsoftware.ftp4j.FTPFile -> b.a.a.n:
    java.lang.String name -> a
    java.lang.String link -> b
    java.util.Date modifiedDate -> c
    long size -> d
    int type -> e
    java.util.Date getModifiedDate() -> a
    void setModifiedDate(java.util.Date) -> a
    java.lang.String getName() -> b
    void setName(java.lang.String) -> a
    int getType() -> c
    void setType(int) -> a
    long getSize() -> d
    void setSize(long) -> a
    void setLink(java.lang.String) -> b
    java.lang.String toString() -> toString
it.sauronsoftware.ftp4j.FTPIllegalReplyException -> b.a.a.o:
it.sauronsoftware.ftp4j.FTPListParseException -> b.a.a.p:
it.sauronsoftware.ftp4j.FTPListParser -> b.a.a.q:
    it.sauronsoftware.ftp4j.FTPFile[] parse(java.lang.String[]) -> a
it.sauronsoftware.ftp4j.FTPReply -> b.a.a.r:
    int code -> a
    java.lang.String[] messages -> b
    int getCode() -> a
    boolean isSuccessCode() -> b
    java.lang.String[] getMessages() -> c
    java.lang.String toString() -> toString
it.sauronsoftware.ftp4j.FTPTextualExtensionRecognizer -> b.a.a.s:
    boolean isTextualExt(java.lang.String) -> a
it.sauronsoftware.ftp4j.NVTASCIIReader -> b.a.a.t:
    java.lang.String SYSTEM_LINE_SEPARATOR -> a
    java.io.InputStream stream -> b
    java.io.Reader reader -> c
    void close() -> close
    int read(char[],int,int) -> read
    void changeCharset(java.lang.String) -> a
    java.lang.String readLine() -> a
it.sauronsoftware.ftp4j.NVTASCIIWriter -> b.a.a.u:
    java.io.OutputStream stream -> a
    java.io.Writer writer -> b
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void changeCharset(java.lang.String) -> a
    void writeLine(java.lang.String) -> b
it.sauronsoftware.ftp4j.connectors.DirectConnector -> b.a.a.a.a:
    java.net.Socket connectForCommunicationChannel(java.lang.String,int) -> c
    java.net.Socket connectForDataTransferChannel(java.lang.String,int) -> d
it.sauronsoftware.ftp4j.extrecognizers.DefaultTextualExtensionRecognizer -> b.a.a.b.a:
    java.lang.Object lock -> a
    it.sauronsoftware.ftp4j.extrecognizers.DefaultTextualExtensionRecognizer instance -> b
    it.sauronsoftware.ftp4j.extrecognizers.DefaultTextualExtensionRecognizer getInstance() -> a
it.sauronsoftware.ftp4j.extrecognizers.ParametricTextualExtensionRecognizer -> b.a.a.b.b:
    java.util.ArrayList exts -> a
    void addExtension(java.lang.String) -> b
    boolean isTextualExt(java.lang.String) -> a
it.sauronsoftware.ftp4j.listparsers.DOSListParser -> b.a.a.c.a:
    java.util.regex.Pattern PATTERN -> a
    java.text.DateFormat DATE_FORMAT -> b
    it.sauronsoftware.ftp4j.FTPFile[] parse(java.lang.String[]) -> a
it.sauronsoftware.ftp4j.listparsers.EPLFListParser -> b.a.a.c.b:
    it.sauronsoftware.ftp4j.FTPFile[] parse(java.lang.String[]) -> a
it.sauronsoftware.ftp4j.listparsers.MLSDListParser -> b.a.a.c.c:
    java.text.DateFormat MLSD_DATE_FORMAT_1 -> a
    java.text.DateFormat MLSD_DATE_FORMAT_2 -> b
    it.sauronsoftware.ftp4j.FTPFile[] parse(java.lang.String[]) -> a
    it.sauronsoftware.ftp4j.FTPFile parseLine(java.lang.String) -> a
it.sauronsoftware.ftp4j.listparsers.NetWareListParser -> b.a.a.c.d:
    java.util.regex.Pattern PATTERN -> a
    java.text.DateFormat DATE_FORMAT -> b
    it.sauronsoftware.ftp4j.FTPFile[] parse(java.lang.String[]) -> a
it.sauronsoftware.ftp4j.listparsers.UnixListParser -> b.a.a.c.e:
    java.util.regex.Pattern PATTERN -> a
    java.text.DateFormat DATE_FORMAT -> b
    it.sauronsoftware.ftp4j.FTPFile[] parse(java.lang.String[]) -> a
jcifs.Config -> c.a:
    java.util.Properties prp -> a
    jcifs.util.LogStream log -> b
    void load(java.io.InputStream) -> a
    java.lang.String getProperty(java.lang.String,java.lang.String) -> a
    java.lang.String getProperty(java.lang.String) -> a
    int getInt(java.lang.String,int) -> a
    long getLong(java.lang.String,long) -> a
    java.net.InetAddress getInetAddress(java.lang.String,java.net.InetAddress) -> a
    boolean getBoolean(java.lang.String,boolean) -> a
    java.net.InetAddress[] getInetAddressArray(java.lang.String,java.lang.String,java.net.InetAddress[]) -> a
jcifs.UniAddress -> c.b:
    int[] resolveOrder -> c
    java.net.InetAddress baddr -> d
    jcifs.util.LogStream log -> e
    java.lang.Object addr -> a
    java.lang.String calledName -> b
    jcifs.netbios.NbtAddress lookupServerOrWorkgroup(java.lang.String,java.net.InetAddress) -> a
    jcifs.UniAddress getByName(java.lang.String) -> a
    boolean isDotQuadIP(java.lang.String) -> b
    boolean isValidDnsName(java.lang.String) -> c
    jcifs.UniAddress getByName(java.lang.String,boolean) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String firstCalledName() -> a
    java.lang.String nextCalledName() -> b
    java.lang.Object getAddress() -> c
    java.lang.String getHostName() -> d
    java.lang.String getHostAddress() -> e
    java.lang.String toString() -> toString
jcifs.UniAddress$QueryThread -> c.c:
    jcifs.UniAddress$Sem sem -> a
    java.lang.String host -> b
    java.lang.String scope -> c
    int type -> d
    jcifs.netbios.NbtAddress ans -> e
    java.net.InetAddress svr -> f
    java.net.UnknownHostException uhe -> g
    void run() -> run
jcifs.UniAddress$Sem -> c.d:
    int count -> a
jcifs.netbios.Lmhosts -> c.a.a:
    java.lang.String FILENAME -> a
    java.util.Hashtable TAB -> b
    long lastModified -> c
    int alt -> d
    jcifs.util.LogStream log -> e
    jcifs.netbios.NbtAddress getByName(java.lang.String) -> a
    jcifs.netbios.NbtAddress getByName(jcifs.netbios.Name) -> a
    void populate(java.io.Reader) -> a
jcifs.netbios.Name -> c.a.b:
    java.lang.String DEFAULT_SCOPE -> f
    java.lang.String OEM_ENCODING -> a
    java.lang.String name -> b
    java.lang.String scope -> c
    int hexCode -> d
    int srcHashCode -> e
    int writeWireFormat(byte[],int) -> a
    int readWireFormat(byte[],int) -> b
    int writeScopeWireFormat(byte[],int) -> c
    int readScopeWireFormat(byte[],int) -> d
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
jcifs.netbios.NameQueryRequest -> c.a.c:
    int writeBodyWireFormat(byte[],int) -> a
    int readBodyWireFormat(byte[],int) -> b
    int readRDataWireFormat(byte[],int) -> c
    java.lang.String toString() -> toString
jcifs.netbios.NameQueryResponse -> c.a.d:
    int writeBodyWireFormat(byte[],int) -> a
    int readBodyWireFormat(byte[],int) -> b
    int readRDataWireFormat(byte[],int) -> c
    java.lang.String toString() -> toString
jcifs.netbios.NameServiceClient -> c.a.e:
    int SND_BUF_SIZE -> c
    int RCV_BUF_SIZE -> d
    int SO_TIMEOUT -> e
    int RETRY_COUNT -> f
    int RETRY_TIMEOUT -> g
    int LPORT -> h
    java.net.InetAddress LADDR -> i
    java.lang.String RO -> j
    jcifs.util.LogStream log -> k
    java.lang.Object LOCK -> l
    int lport -> m
    int closeTimeout -> n
    byte[] snd_buf -> o
    byte[] rcv_buf -> p
    java.net.DatagramSocket socket -> q
    java.net.DatagramPacket in -> r
    java.net.DatagramPacket out -> s
    java.util.HashMap responseTable -> t
    java.lang.Thread thread -> u
    int nextNameTrnId -> v
    int[] resolveOrder -> w
    java.net.InetAddress laddr -> a
    java.net.InetAddress baddr -> b
    int getNextNameTrnId() -> a
    void ensureOpen(int) -> a
    void tryClose() -> b
    void run() -> run
    void send(jcifs.netbios.NameServicePacket,jcifs.netbios.NameServicePacket,int) -> a
    jcifs.netbios.NbtAddress getByName(jcifs.netbios.Name,java.net.InetAddress) -> a
    jcifs.netbios.NbtAddress[] getNodeStatus(jcifs.netbios.NbtAddress) -> a
jcifs.netbios.NameServicePacket -> c.a.f:
    int addrIndex -> a
    jcifs.netbios.NbtAddress[] addrEntry -> b
    int nameTrnId -> c
    int opCode -> d
    int resultCode -> e
    int questionCount -> f
    int answerCount -> g
    int authorityCount -> h
    int additionalCount -> i
    boolean received -> j
    boolean isResponse -> k
    boolean isAuthAnswer -> l
    boolean isTruncated -> m
    boolean isRecurDesired -> n
    boolean isRecurAvailable -> o
    boolean isBroadcast -> p
    jcifs.netbios.Name questionName -> q
    jcifs.netbios.Name recordName -> r
    int questionType -> s
    int questionClass -> t
    int recordType -> u
    int recordClass -> v
    int ttl -> w
    int rDataLength -> x
    java.net.InetAddress addr -> y
    void writeInt2(int,byte[],int) -> a
    int readInt2(byte[],int) -> d
    int readInt4(byte[],int) -> e
    int readNameTrnId(byte[],int) -> f
    int writeWireFormat(byte[],int) -> g
    int readWireFormat(byte[],int) -> h
    int writeHeaderWireFormat(byte[],int) -> i
    int readHeaderWireFormat(byte[],int) -> j
    int writeQuestionSectionWireFormat(byte[],int) -> k
    int readQuestionSectionWireFormat(byte[],int) -> l
    int readResourceRecordWireFormat(byte[],int) -> m
    int writeBodyWireFormat(byte[],int) -> a
    int readBodyWireFormat(byte[],int) -> b
    int readRDataWireFormat(byte[],int) -> c
    java.lang.String toString() -> toString
jcifs.netbios.NbtAddress -> c.a.g:
    java.net.InetAddress[] NBNS -> a
    jcifs.netbios.NameServiceClient CLIENT -> q
    int CACHE_POLICY -> r
    int nbnsIndex -> s
    java.util.HashMap ADDRESS_CACHE -> t
    java.util.HashMap LOOKUP_TABLE -> u
    jcifs.netbios.Name UNKNOWN_NAME -> b
    jcifs.netbios.NbtAddress UNKNOWN_ADDRESS -> c
    byte[] UNKNOWN_MAC_ADDRESS -> d
    jcifs.netbios.NbtAddress localhost -> e
    jcifs.netbios.Name hostName -> f
    int address -> g
    int nodeType -> h
    boolean groupName -> i
    boolean isBeingDeleted -> j
    boolean isInConflict -> k
    boolean isActive -> l
    boolean isPermanent -> m
    boolean isDataFromNodeStatus -> n
    byte[] macAddress -> o
    java.lang.String calledName -> p
    void cacheAddress(jcifs.netbios.Name,jcifs.netbios.NbtAddress) -> a
    void cacheAddress(jcifs.netbios.Name,jcifs.netbios.NbtAddress,long) -> a
    void cacheAddressArray(jcifs.netbios.NbtAddress[]) -> a
    jcifs.netbios.NbtAddress getCachedAddress(jcifs.netbios.Name) -> a
    jcifs.netbios.NbtAddress doNameQuery(jcifs.netbios.Name,java.net.InetAddress) -> a
    java.lang.Object checkLookupTable(jcifs.netbios.Name) -> b
    void updateLookupTable(jcifs.netbios.Name) -> c
    jcifs.netbios.NbtAddress getLocalHost() -> a
    jcifs.netbios.NbtAddress getByName(java.lang.String) -> a
    jcifs.netbios.NbtAddress getByName(java.lang.String,int,java.lang.String) -> a
    jcifs.netbios.NbtAddress getByName(java.lang.String,int,java.lang.String,java.net.InetAddress) -> a
    jcifs.netbios.NbtAddress[] getAllByAddress(jcifs.netbios.NbtAddress) -> a
    java.net.InetAddress getWINSAddress() -> b
    boolean isWINS(java.net.InetAddress) -> a
    java.net.InetAddress switchWINS() -> c
    java.lang.String firstCalledName() -> d
    java.lang.String nextCalledName() -> e
    void checkData() -> f
    java.lang.String getHostName() -> g
    java.net.InetAddress getInetAddress() -> h
    java.lang.String getHostAddress() -> i
    int getNameType() -> j
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
jcifs.netbios.NbtAddress$CacheEntry -> c.a.h:
    jcifs.netbios.Name hostName -> a
    jcifs.netbios.NbtAddress address -> b
    long expiration -> c
jcifs.netbios.NbtException -> c.a.i:
    int errorClass -> a
    int errorCode -> b
    java.lang.String getErrorString(int,int) -> a
    java.lang.String toString() -> toString
jcifs.netbios.NbtSocket -> c.a.j:
    jcifs.util.LogStream log -> a
    jcifs.netbios.NbtAddress address -> b
    jcifs.netbios.Name calledName -> c
    int soTimeout -> d
    java.io.InputStream getInputStream() -> getInputStream
    java.io.OutputStream getOutputStream() -> getOutputStream
    int getPort() -> getPort
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getLocalPort() -> getLocalPort
    java.lang.String toString() -> toString
    void connect() -> a
    void close() -> close
jcifs.netbios.NodeStatusRequest -> c.a.k:
    int writeBodyWireFormat(byte[],int) -> a
    int readBodyWireFormat(byte[],int) -> b
    int readRDataWireFormat(byte[],int) -> c
    java.lang.String toString() -> toString
jcifs.netbios.NodeStatusResponse -> c.a.l:
    jcifs.netbios.NbtAddress queryAddress -> A
    int numberOfNames -> B
    byte[] macAddress -> C
    byte[] stats -> D
    jcifs.netbios.NbtAddress[] addressArray -> z
    int writeBodyWireFormat(byte[],int) -> a
    int readBodyWireFormat(byte[],int) -> b
    int readRDataWireFormat(byte[],int) -> c
    int readNodeNameArray(byte[],int) -> n
    java.lang.String toString() -> toString
jcifs.netbios.SessionRequestPacket -> c.a.m:
    jcifs.netbios.Name calledName -> c
    jcifs.netbios.Name callingName -> d
    int writeTrailerWireFormat(byte[],int) -> a
jcifs.netbios.SessionServicePacket -> c.a.n:
    int type -> a
    int length -> b
    void writeInt2(int,byte[],int) -> a
    int readLength(byte[],int) -> b
    int readn(java.io.InputStream,byte[],int,int) -> a
    int readPacketType(java.io.InputStream,byte[],int) -> a
    int writeWireFormat(byte[],int) -> c
    int writeHeaderWireFormat(byte[],int) -> d
    int writeTrailerWireFormat(byte[],int) -> a
jcifs.netbios.SocketInputStream -> c.a.o:
    java.io.InputStream in -> a
    int tot -> b
    int bip -> c
    int n -> d
    byte[] header -> e
    byte[] tmp -> f
    int read() -> read
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    long skip(long) -> skip
    int available() -> available
    void close() -> close
jcifs.netbios.SocketOutputStream -> c.a.p:
    void write(byte[],int,int) -> write
jcifs.smb.AllocInfo -> c.b.a:
    long getCapacity() -> a
jcifs.smb.AndXServerMessageBlock -> c.b.b:
    byte andxCommand -> b
    int andxOffset -> c
    jcifs.smb.ServerMessageBlock andx -> a
    int readBytesDirectWireFormat(java.io.InputStream,int,byte[],int) -> a
    int getBatchLimit(byte) -> a
    int writeWireFormat(byte[],int) -> a
    int readWireFormat(java.io.InputStream,byte[],int) -> a
    int writeAndXWireFormat(byte[],int) -> b
    int readAndXWireFormat(java.io.InputStream,byte[],int) -> b
    java.lang.String toString() -> toString
jcifs.smb.BufferCache -> c.b.c:
    int MAX_BUFFERS -> a
    java.lang.Object[] cache -> b
    int numBuffers -> c
    int freeBuffers -> d
    byte[] getBuffer() -> a
    void releaseBuffer(byte[]) -> a
jcifs.smb.DfsReferral -> c.b.d:
    java.lang.String path -> a
    java.lang.String node -> b
    java.lang.String server -> c
    java.lang.String share -> d
    java.lang.String nodepath -> e
    boolean resolveHashes -> f
    java.lang.String toString() -> toString
jcifs.smb.DosError -> c.b.e:
    int[][] DOS_ERROR_CODES -> g
    java.lang.String[] DOS_ERROR_MESSAGES -> h
jcifs.smb.DosFileFilter -> c.b.f:
    java.lang.String wildcard -> a
    int attributes -> b
    boolean accept(jcifs.smb.SmbFile) -> a
jcifs.smb.FileEntry -> c.b.g:
    java.lang.String getName() -> a
    int getAttributes() -> b
    long createTime() -> c
    long lastModified() -> d
    long length() -> e
jcifs.smb.Handler -> c.b.h:
    java.net.URLStreamHandler SMB_HANDLER -> a
    java.lang.String unescape(java.lang.String) -> a
    int getDefaultPort() -> getDefaultPort
    java.net.URLConnection openConnection(java.net.URL) -> openConnection
    void parseURL(java.net.URL,java.lang.String,int,int) -> parseURL
jcifs.smb.Info -> c.b.i:
    int getAttributes() -> a
    long getCreateTime() -> b
    long getLastWriteTime() -> c
    long getSize() -> d
jcifs.smb.NetServerEnum2 -> c.b.j:
    java.lang.String[] DESCR -> a
    java.lang.String domain -> b
    java.lang.String lastName -> c
    int serverTypes -> d
    void reset(int,java.lang.String) -> a
    int writeSetupWireFormat(byte[],int) -> b
    int writeParametersWireFormat(byte[],int) -> c
    int writeDataWireFormat(byte[],int) -> d
    java.lang.String toString() -> toString
jcifs.smb.NetServerEnum2Response -> c.b.k:
    int converter -> L
    int totalAvailableEntries -> M
    java.lang.String lastName -> a
    int readParametersWireFormat(byte[],int,int) -> a
    int readDataWireFormat(byte[],int,int) -> b
    java.lang.String toString() -> toString
jcifs.smb.NetServerEnum2Response$ServerInfo1 -> c.b.l:
    java.lang.String name -> a
    int versionMajor -> b
    int versionMinor -> c
    int type -> d
    java.lang.String commentOrMasterBrowser -> e
    jcifs.smb.NetServerEnum2Response this$0 -> f
    java.lang.String getName() -> a
    int getAttributes() -> b
    long createTime() -> c
    long lastModified() -> d
    long length() -> e
    java.lang.String toString() -> toString
jcifs.smb.NetShareEnum -> c.b.m:
    int writeSetupWireFormat(byte[],int) -> b
    int writeParametersWireFormat(byte[],int) -> c
    int writeDataWireFormat(byte[],int) -> d
    java.lang.String toString() -> toString
jcifs.smb.NetShareEnumResponse -> c.b.n:
    int converter -> a
    int totalAvailableEntries -> L
    int readParametersWireFormat(byte[],int,int) -> a
    int readDataWireFormat(byte[],int,int) -> b
    java.lang.String toString() -> toString
jcifs.smb.NetShareEnumResponse$ShareInfo1 -> c.b.o:
    java.lang.String netName -> a
    int type -> b
    java.lang.String remark -> c
    jcifs.smb.NetShareEnumResponse this$0 -> d
    java.lang.String getName() -> a
    int getAttributes() -> b
    long createTime() -> c
    long lastModified() -> d
    long length() -> e
    java.lang.String toString() -> toString
jcifs.smb.NtStatus -> c.b.p:
    int[] NT_STATUS_CODES -> a_
    java.lang.String[] NT_STATUS_MESSAGES -> b_
jcifs.smb.NtlmAuthenticator -> c.b.q:
    jcifs.smb.NtlmAuthenticator auth -> a
    java.lang.String url -> b
    jcifs.smb.SmbAuthException sae -> c
    jcifs.smb.NtlmPasswordAuthentication requestNtlmPasswordAuthentication(java.lang.String,jcifs.smb.SmbAuthException) -> a
    jcifs.smb.NtlmPasswordAuthentication getNtlmPasswordAuthentication() -> a
jcifs.smb.NtlmPasswordAuthentication -> c.b.r:
    int LM_COMPATIBILITY -> n
    java.lang.String DEFAULT_DOMAIN -> a
    java.lang.String DEFAULT_USERNAME -> o
    java.lang.String DEFAULT_PASSWORD -> b
    java.util.Random RANDOM -> p
    jcifs.util.LogStream log -> q
    byte[] S8 -> r
    jcifs.smb.NtlmPasswordAuthentication NULL -> c
    jcifs.smb.NtlmPasswordAuthentication GUEST -> d
    jcifs.smb.NtlmPasswordAuthentication DEFAULT -> e
    java.lang.String domain -> f
    java.lang.String username -> g
    java.lang.String password -> h
    byte[] ansiHash -> i
    byte[] unicodeHash -> j
    boolean hashesExternal -> k
    byte[] clientChallenge -> l
    byte[] challenge -> m
    void E(byte[],byte[],byte[]) -> a
    byte[] getPreNTLMResponse(java.lang.String,byte[]) -> a
    byte[] getNTLMResponse(java.lang.String,byte[]) -> b
    byte[] getLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[]) -> a
    java.lang.String getPassword() -> a
    java.lang.String getName() -> getName
    byte[] getAnsiHash(byte[]) -> a
    byte[] getUnicodeHash(byte[]) -> b
    void getUserSessionKey(byte[],byte[],int) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
jcifs.smb.ServerMessageBlock -> c.b.s:
    int PID -> e
    java.util.TimeZone TZ -> f
    boolean USE_BATCHING -> g
    java.lang.String OEM_ENCODING -> h
    jcifs.util.LogStream log -> i
    byte[] header -> j
    byte command -> k
    byte flags -> l
    int headerStart -> m
    int length -> n
    int batchLevel -> o
    int errorCode -> p
    int flags2 -> q
    int tid -> r
    int pid -> s
    int uid -> t
    int mid -> u
    int wordCount -> v
    int byteCount -> w
    boolean useUnicode -> x
    boolean received -> y
    long responseTimeout -> z
    int signSeq -> A
    boolean verifyFailed -> B
    jcifs.smb.NtlmPasswordAuthentication auth -> C
    java.lang.String path -> D
    jcifs.smb.SigningDigest digest -> E
    jcifs.smb.ServerMessageBlock response -> F
    void writeInt2(long,byte[],int) -> a
    void writeInt4(long,byte[],int) -> b
    int readInt2(byte[],int) -> e
    int readInt4(byte[],int) -> f
    long readInt8(byte[],int) -> g
    void writeInt8(long,byte[],int) -> c
    long readTime(byte[],int) -> h
    void writeTime(long,byte[],int) -> d
    long readUTime(byte[],int) -> i
    void writeUTime(long,byte[],int) -> e
    int writeString(java.lang.String,byte[],int) -> a
    int writeString(java.lang.String,byte[],int,boolean) -> a
    java.lang.String readString(byte[],int) -> j
    java.lang.String readString(byte[],int,int,boolean) -> a
    int stringWireLength(java.lang.String,int) -> a
    int readStringLength(byte[],int,int) -> c
    int writeWireFormat(byte[],int) -> a
    int readWireFormat(java.io.InputStream,byte[],int) -> a
    int writeHeaderWireFormat(byte[],int) -> k
    int readHeaderWireFormat(byte[],int) -> l
    boolean isResponse() -> e
    int writeParameterWordsWireFormat(byte[],int) -> m
    int writeBytesWireFormat(byte[],int) -> n
    int readParameterWordsWireFormat(byte[],int) -> o
    int readBytesWireFormat(byte[],int) -> p
    java.lang.String toString() -> toString
jcifs.smb.SigningDigest -> c.b.t:
    int LM_COMPATIBILITY -> b
    jcifs.util.LogStream log -> a
    java.security.MessageDigest digest -> c
    byte[] macSigningKey -> d
    int updates -> e
    int signSequence -> f
    void update(byte[],int,int) -> a
    byte[] digest() -> a
    void sign(byte[],int,int,jcifs.smb.ServerMessageBlock,jcifs.smb.ServerMessageBlock) -> a
    boolean verify(byte[],int,jcifs.smb.ServerMessageBlock) -> a
jcifs.smb.SmbAuthException -> c.b.u:
jcifs.smb.SmbComBlankResponse -> c.b.v:
    int writeParameterWordsWireFormat(byte[],int) -> m
    int writeBytesWireFormat(byte[],int) -> n
    int readParameterWordsWireFormat(byte[],int) -> o
    int readBytesWireFormat(byte[],int) -> p
    java.lang.String toString() -> toString
jcifs.smb.SmbComClose -> c.b.w:
    int fid -> a
    long lastWriteTime -> b
    int writeParameterWordsWireFormat(byte[],int) -> m
    int writeBytesWireFormat(byte[],int) -> n
    int readParameterWordsWireFormat(byte[],int) -> o
    int readBytesWireFormat(byte[],int) -> p
    java.lang.String toString() -> toString
jcifs.smb.SmbComCreateDirectory -> c.b.x:
    int writeParameterWordsWireFormat(byte[],int) -> m
    int writeBytesWireFormat(byte[],int) -> n
    int readParameterWordsWireFormat(byte[],int) -> o
    int readBytesWireFormat(byte[],int) -> p
    java.lang.String toString() -> toString
jcifs.smb.SmbComDelete -> c.b.y:
    int searchAttributes -> a
    java.lang.String fileName -> b
    int writeParameterWordsWireFormat(byte[],int) -> m
    int writeBytesWireFormat(byte[],int) -> n
    int readParameterWordsWireFormat(byte[],int) -> o
    int readBytesWireFormat(byte[],int) -> p
    java.lang.String toString() -> toString
jcifs.smb.SmbComDeleteDirectory -> c.b.z:
    int writeParameterWordsWireFormat(byte[],int) -> m
    int writeBytesWireFormat(byte[],int) -> n
    int readParameterWordsWireFormat(byte[],int) -> o
    int readBytesWireFormat(byte[],int) -> p
    java.lang.String toString() -> toString
jcifs.smb.SmbComFindClose2 -> c.b.A:
    int sid -> a
    int writeParameterWordsWireFormat(byte[],int) -> m
    int writeBytesWireFormat(byte[],int) -> n
    int readParameterWordsWireFormat(byte[],int) -> o
    int readBytesWireFormat(byte[],int) -> p
    java.lang.String toString() -> toString
jcifs.smb.SmbComLogoffAndX -> c.b.B:
    int writeParameterWordsWireFormat(byte[],int) -> m
    int writeBytesWireFormat(byte[],int) -> n
    int readParameterWordsWireFormat(byte[],int) -> o
    int readBytesWireFormat(byte[],int) -> p
    int readBytesDirectWireFormat(java.io.InputStream,int,byte[],int) -> a
    java.lang.String toString() -> toString
jcifs.smb.SmbComNTCreateAndX -> c.b.C:
    int flags -> b
    int rootDirectoryFid -> c
    int desiredAccess -> d
    int extFileAttributes -> G
    int shareAccess -> H
    int createDisposition -> I
    int createOptions -> J
    int impersonationLevel -> K
    long allocationSize -> L
    byte securityFlags -> M
    int namelen_index -> N
    int writeParameterWordsWireFormat(byte[],int) -> m
    int writeBytesWireFormat(byte[],int) -> n
    int readParameterWordsWireFormat(byte[],int) -> o
    int readBytesWireFormat(byte[],int) -> p
    int readBytesDirectWireFormat(java.io.InputStream,int,byte[],int) -> a
    java.lang.String toString() -> toString
jcifs.smb.SmbComNTCreateAndXResponse -> c.b.D:
    byte oplockLevel -> b
    int fid -> c
    int createAction -> d
    int extFileAttributes -> G
    int fileType -> H
    int deviceState -> I
    long creationTime -> J
    long lastAccessTime -> K
    long lastWriteTime -> L
    long changeTime -> M
    long allocationSize -> N
    long endOfFile -> O
    boolean directory -> P
    int writeParameterWordsWireFormat(byte[],int) -> m
    int writeBytesWireFormat(byte[],int) -> n
    int readParameterWordsWireFormat(byte[],int) -> o
    int readBytesWireFormat(byte[],int) -> p
    int readBytesDirectWireFormat(java.io.InputStream,int,byte[],int) -> a
    java.lang.String toString() -> toString
jcifs.smb.SmbComNegotiate -> c.b.E:
    int writeParameterWordsWireFormat(byte[],int) -> m
    int writeBytesWireFormat(byte[],int) -> n
    int readParameterWordsWireFormat(byte[],int) -> o
    int readBytesWireFormat(byte[],int) -> p
    java.lang.String toString() -> toString
jcifs.smb.SmbComNegotiateResponse -> c.b.F:
    int dialectIndex -> a
    int securityMode -> b
    int security -> c
    int maxMpxCount -> d
    int maxNumberVcs -> G
    int maxBufferSize -> H
    int maxRawSize -> I
    int sessionKey -> J
    int capabilities -> K
    int serverTimeZone -> L
    int encryptionKeyLength -> M
    boolean encryptedPasswords -> N
    boolean signaturesEnabled -> O
    boolean signaturesRequired -> P
    long serverTime -> Q
    byte[] encryptionKey -> R
    java.lang.String oemDomainName -> S
    int writeParameterWordsWireFormat(byte[],int) -> m
    int writeBytesWireFormat(byte[],int) -> n
    int readParameterWordsWireFormat(byte[],int) -> o
    int readBytesWireFormat(byte[],int) -> p
    java.lang.String toString() -> toString
jcifs.smb.SmbComOpenAndX -> c.b.G:
    int BATCH_LIMIT -> K
    int flags -> b
    int desiredAccess -> c
    int searchAttributes -> d
    int fileAttributes -> G
    int creationTime -> H
    int openFunction -> I
    int allocationSize -> J
    int getBatchLimit(byte) -> a
    int writeParameterWordsWireFormat(byte[],int) -> m
    int writeBytesWireFormat(byte[],int) -> n
    int readParameterWordsWireFormat(byte[],int) -> o
    int readBytesWireFormat(byte[],int) -> p
    int readBytesDirectWireFormat(java.io.InputStream,int,byte[],int) -> a
    java.lang.String toString() -> toString
jcifs.smb.SmbComOpenAndXResponse -> c.b.H:
    int fid -> b
    int fileAttributes -> c
    int dataSize -> d
    int grantedAccess -> G
    int fileType -> H
    int deviceState -> I
    int action -> J
    int serverFid -> K
    long lastWriteTime -> L
    int writeParameterWordsWireFormat(byte[],int) -> m
    int writeBytesWireFormat(byte[],int) -> n
    int readParameterWordsWireFormat(byte[],int) -> o
    int readBytesWireFormat(byte[],int) -> p
    int readBytesDirectWireFormat(java.io.InputStream,int,byte[],int) -> a
    java.lang.String toString() -> toString
jcifs.smb.SmbComQueryInformation -> c.b.I:
    int writeParameterWordsWireFormat(byte[],int) -> m
    int writeBytesWireFormat(byte[],int) -> n
    int readParameterWordsWireFormat(byte[],int) -> o
    int readBytesWireFormat(byte[],int) -> p
    java.lang.String toString() -> toString
jcifs.smb.SmbComQueryInformationResponse -> c.b.J:
    int fileAttributes -> a
    long lastWriteTime -> b
    long serverTimeZoneOffset -> c
    int fileSize -> d
    int getAttributes() -> a
    long getCreateTime() -> b
    long getLastWriteTime() -> c
    long getSize() -> d
    int writeParameterWordsWireFormat(byte[],int) -> m
    int writeBytesWireFormat(byte[],int) -> n
    int readParameterWordsWireFormat(byte[],int) -> o
    int readBytesWireFormat(byte[],int) -> p
    java.lang.String toString() -> toString
jcifs.smb.SmbComReadAndX -> c.b.K:
    int BATCH_LIMIT -> b
    long offset -> c
    int fid -> d
    int maxCount -> G
    int minCount -> H
    int openTimeout -> I
    int remaining -> J
    void setParam(int,long,int) -> a
    int getBatchLimit(byte) -> a
    int writeParameterWordsWireFormat(byte[],int) -> m
    int writeBytesWireFormat(byte[],int) -> n
    int readParameterWordsWireFormat(byte[],int) -> o
    int readBytesWireFormat(byte[],int) -> p
    int readBytesDirectWireFormat(java.io.InputStream,int,byte[],int) -> a
    java.lang.String toString() -> toString
jcifs.smb.SmbComReadAndXResponse -> c.b.L:
    int dataCompactionMode -> G
    int dataOffset -> H
    byte[] b -> b
    int dataLength -> c
    int off -> d
    void setParam(byte[],int) -> c
    int writeParameterWordsWireFormat(byte[],int) -> m
    int writeBytesWireFormat(byte[],int) -> n
    int readParameterWordsWireFormat(byte[],int) -> o
    int readBytesWireFormat(byte[],int) -> p
    int readBytesDirectWireFormat(java.io.InputStream,int,byte[],int) -> a
    java.lang.String toString() -> toString
jcifs.smb.SmbComRename -> c.b.M:
    int searchAttributes -> a
    java.lang.String oldFileName -> b
    java.lang.String newFileName -> c
    int writeParameterWordsWireFormat(byte[],int) -> m
    int writeBytesWireFormat(byte[],int) -> n
    int readParameterWordsWireFormat(byte[],int) -> o
    int readBytesWireFormat(byte[],int) -> p
    java.lang.String toString() -> toString
jcifs.smb.SmbComSessionSetupAndX -> c.b.N:
    int BATCH_LIMIT -> d
    boolean DISABLE_PLAIN_TEXT_PASSWORDS -> G
    byte[] accountPassword -> H
    byte[] unicodePassword -> I
    int passwordLength -> J
    int unicodePasswordLength -> K
    int sessionKey -> L
    java.lang.String accountName -> M
    java.lang.String primaryDomain -> N
    jcifs.smb.SmbSession session -> b
    jcifs.smb.NtlmPasswordAuthentication auth -> c
    int getBatchLimit(byte) -> a
    int writeParameterWordsWireFormat(byte[],int) -> m
    int writeBytesWireFormat(byte[],int) -> n
    int readParameterWordsWireFormat(byte[],int) -> o
    int readBytesWireFormat(byte[],int) -> p
    int readBytesDirectWireFormat(java.io.InputStream,int,byte[],int) -> a
    java.lang.String toString() -> toString
jcifs.smb.SmbComSessionSetupAndXResponse -> c.b.O:
    java.lang.String nativeOs -> c
    java.lang.String nativeLanMan -> d
    java.lang.String primaryDomain -> G
    boolean isLoggedInAsGuest -> b
    int writeParameterWordsWireFormat(byte[],int) -> m
    int writeBytesWireFormat(byte[],int) -> n
    int readParameterWordsWireFormat(byte[],int) -> o
    int readBytesWireFormat(byte[],int) -> p
    int readBytesDirectWireFormat(java.io.InputStream,int,byte[],int) -> a
    java.lang.String toString() -> toString
jcifs.smb.SmbComTransaction -> c.b.P:
    int DEFAULT_MAX_DATA_COUNT -> a
    int flags -> b
    int parameterCount -> c
    int parameterOffset -> d
    int parameterDisplacement -> R
    int dataCount -> S
    int dataOffset -> T
    int dataDisplacement -> U
    int pad -> V
    int pad1 -> W
    boolean hasMore -> X
    boolean isPrimary -> Y
    int bufParameterOffset -> Z
    int bufDataOffset -> aa
    int totalParameterCount -> G
    int totalDataCount -> H
    int maxParameterCount -> I
    int maxDataCount -> J
    byte maxSetupCount -> K
    int timeout -> L
    int setupCount -> M
    byte subCommand -> N
    java.lang.String name -> O
    int maxBufferSize -> P
    byte[] txn_buf -> Q
    void reset() -> a
    void reset(int,java.lang.String) -> a
    boolean hasMoreElements() -> hasMoreElements
    java.lang.Object nextElement() -> nextElement
    int writeParameterWordsWireFormat(byte[],int) -> m
    int writeBytesWireFormat(byte[],int) -> n
    int readParameterWordsWireFormat(byte[],int) -> o
    int readBytesWireFormat(byte[],int) -> p
    int writeSetupWireFormat(byte[],int) -> b
    int writeParametersWireFormat(byte[],int) -> c
    int writeDataWireFormat(byte[],int) -> d
    java.lang.String toString() -> toString
jcifs.smb.SmbComTransactionResponse -> c.b.Q:
    int totalParameterCount -> a
    int totalDataCount -> L
    int parameterCount -> M
    int parameterOffset -> N
    int parameterDisplacement -> O
    int dataOffset -> P
    int dataDisplacement -> Q
    int setupCount -> R
    int pad -> S
    int pad1 -> T
    boolean parametersDone -> U
    boolean dataDone -> V
    int bufParameterStart -> W
    int bufDataStart -> X
    int dataCount -> b
    byte subCommand -> c
    boolean hasMore -> d
    boolean isPrimary -> G
    byte[] txn_buf -> H
    int status -> I
    int numEntries -> J
    jcifs.smb.FileEntry[] results -> K
    void reset() -> a
    boolean hasMoreElements() -> hasMoreElements
    java.lang.Object nextElement() -> nextElement
    int writeParameterWordsWireFormat(byte[],int) -> m
    int writeBytesWireFormat(byte[],int) -> n
    int readParameterWordsWireFormat(byte[],int) -> o
    int readBytesWireFormat(byte[],int) -> p
    int readParametersWireFormat(byte[],int,int) -> a
    int readDataWireFormat(byte[],int,int) -> b
    java.lang.String toString() -> toString
jcifs.smb.SmbComTreeConnectAndX -> c.b.R:
    boolean DISABLE_PLAIN_TEXT_PASSWORDS -> b
    jcifs.smb.SmbSession session -> c
    boolean disconnectTid -> d
    java.lang.String path -> G
    java.lang.String service -> H
    byte[] password -> I
    int passwordLength -> J
    byte[] batchLimits -> K
    int getBatchLimit(byte) -> a
    int writeParameterWordsWireFormat(byte[],int) -> m
    int writeBytesWireFormat(byte[],int) -> n
    int readParameterWordsWireFormat(byte[],int) -> o
    int readBytesWireFormat(byte[],int) -> p
    int readBytesDirectWireFormat(java.io.InputStream,int,byte[],int) -> a
    java.lang.String toString() -> toString
jcifs.smb.SmbComTreeConnectAndXResponse -> c.b.S:
    boolean supportSearchBits -> b
    boolean shareIsInDfs -> c
    java.lang.String service -> d
    java.lang.String nativeFileSystem -> G
    int writeParameterWordsWireFormat(byte[],int) -> m
    int writeBytesWireFormat(byte[],int) -> n
    int readParameterWordsWireFormat(byte[],int) -> o
    int readBytesWireFormat(byte[],int) -> p
    int readBytesDirectWireFormat(java.io.InputStream,int,byte[],int) -> a
    java.lang.String toString() -> toString
jcifs.smb.SmbComTreeDisconnect -> c.b.T:
    int writeParameterWordsWireFormat(byte[],int) -> m
    int writeBytesWireFormat(byte[],int) -> n
    int readParameterWordsWireFormat(byte[],int) -> o
    int readBytesWireFormat(byte[],int) -> p
    java.lang.String toString() -> toString
jcifs.smb.SmbComWrite -> c.b.U:
    int fid -> a
    int count -> b
    int offset -> c
    int remaining -> d
    int off -> G
    byte[] b -> H
    void setParam(int,long,int,byte[],int,int) -> a
    int writeParameterWordsWireFormat(byte[],int) -> m
    int writeBytesWireFormat(byte[],int) -> n
    int readParameterWordsWireFormat(byte[],int) -> o
    int readBytesWireFormat(byte[],int) -> p
    java.lang.String toString() -> toString
jcifs.smb.SmbComWriteAndX -> c.b.V:
    int READ_ANDX_BATCH_LIMIT -> b
    int CLOSE_BATCH_LIMIT -> c
    int fid -> d
    int writeMode -> G
    int remaining -> H
    int dataLength -> I
    int dataOffset -> J
    int off -> K
    byte[] b -> L
    long offset -> M
    void setParam(int,long,int,byte[],int,int) -> a
    int getBatchLimit(byte) -> a
    int writeParameterWordsWireFormat(byte[],int) -> m
    int writeBytesWireFormat(byte[],int) -> n
    int readParameterWordsWireFormat(byte[],int) -> o
    int readBytesWireFormat(byte[],int) -> p
    int readBytesDirectWireFormat(java.io.InputStream,int,byte[],int) -> a
    java.lang.String toString() -> toString
jcifs.smb.SmbComWriteAndXResponse -> c.b.W:
    long count -> b
    int writeParameterWordsWireFormat(byte[],int) -> m
    int writeBytesWireFormat(byte[],int) -> n
    int readParameterWordsWireFormat(byte[],int) -> o
    int readBytesWireFormat(byte[],int) -> p
    int readBytesDirectWireFormat(java.io.InputStream,int,byte[],int) -> a
    java.lang.String toString() -> toString
jcifs.smb.SmbComWriteResponse -> c.b.X:
    long count -> a
    int writeParameterWordsWireFormat(byte[],int) -> m
    int writeBytesWireFormat(byte[],int) -> n
    int readParameterWordsWireFormat(byte[],int) -> o
    int readBytesWireFormat(byte[],int) -> p
    java.lang.String toString() -> toString
jcifs.smb.SmbException -> c.b.Y:
    int status -> a
    java.lang.Throwable rootCause -> b
    java.lang.String getMessageByCode(int) -> a
    int getStatusByCode(int) -> b
    java.lang.String getMessageByWinerrCode(int) -> c
    int getNtStatus() -> a
    java.lang.String toString() -> toString
jcifs.smb.SmbFile -> c.b.Z:
    int HASH_DOT -> a
    int HASH_DOT_DOT -> b
    jcifs.util.LogStream log -> c
    long attrExpirationPeriod -> d
    java.lang.String canon -> j
    java.lang.String share -> k
    long createTime -> l
    long lastModified -> m
    int attributes -> n
    long attrExpiration -> o
    long size -> p
    long sizeExpiration -> q
    jcifs.smb.NtlmPasswordAuthentication auth -> r
    boolean isExists -> s
    int shareAccess -> t
    jcifs.smb.SmbComBlankResponse blank_resp -> u
    jcifs.smb.DfsReferral dfsReferral -> v
    jcifs.smb.SmbTree tree -> e
    java.lang.String unc -> f
    int fid -> g
    int type -> h
    boolean opened -> i
    jcifs.smb.SmbComBlankResponse blank_resp() -> w
    void sendTransaction(jcifs.smb.SmbComTransaction,jcifs.smb.SmbComTransactionResponse) -> a
    void send(jcifs.smb.ServerMessageBlock,jcifs.smb.ServerMessageBlock) -> a
    java.lang.String queryLookup(java.lang.String,java.lang.String) -> a
    jcifs.UniAddress getAddress() -> a
    void connect0() -> b
    void connect() -> connect
    boolean isConnected() -> c
    int open0(int,int,int) -> a
    void open(int,int,int) -> b
    boolean isOpen() -> d
    void close(int,long) -> a
    void close(long) -> a
    void close() -> e
    java.lang.String getName() -> f
    java.lang.String getParent() -> g
    java.lang.String getUncPath0() -> h
    java.lang.String getServer() -> i
    int getType() -> j
    boolean isWorkgroup0() -> k
    jcifs.smb.Info queryPath(java.lang.String,int) -> a
    boolean exists() -> l
    boolean isDirectory() -> m
    long lastModified() -> n
    jcifs.smb.SmbFile[] listFiles() -> o
    jcifs.smb.SmbFile[] listFiles(java.lang.String,int,jcifs.smb.SmbFilenameFilter,jcifs.smb.SmbFileFilter) -> a
    void doNetEnum(java.util.ArrayList,boolean,java.lang.String,int,jcifs.smb.SmbFilenameFilter,jcifs.smb.SmbFileFilter) -> a
    void doFindFirstNext(java.util.ArrayList,boolean,java.lang.String,int,jcifs.smb.SmbFilenameFilter,jcifs.smb.SmbFileFilter) -> b
    void renameTo(jcifs.smb.SmbFile) -> a
    void copyTo0(jcifs.smb.SmbFile,byte[][],int,jcifs.smb.SmbFile$WriterThread,jcifs.smb.SmbComReadAndX,jcifs.smb.SmbComReadAndXResponse) -> a
    void copyTo(jcifs.smb.SmbFile) -> b
    void delete() -> p
    void delete(java.lang.String) -> a
    long length() -> q
    void mkdir() -> r
    void mkdirs() -> s
    void createNewFile() -> t
    void setPathInformation(int,long,long) -> a
    int getAttributes() -> u
    void setAttributes(int) -> a
    void setReadWrite() -> v
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    int getContentLength() -> getContentLength
    long getDate() -> getDate
    long getLastModified() -> getLastModified
    java.io.InputStream getInputStream() -> getInputStream
    java.io.OutputStream getOutputStream() -> getOutputStream
jcifs.smb.SmbFile$WriterThread -> c.b.aa:
    byte[] b -> a
    int n -> b
    int off -> c
    boolean ready -> d
    jcifs.smb.SmbFile dest -> e
    jcifs.smb.SmbException e -> f
    boolean useNTSmbs -> g
    jcifs.smb.SmbComWriteAndX reqx -> h
    jcifs.smb.SmbComWrite req -> i
    jcifs.smb.ServerMessageBlock resp -> j
    jcifs.smb.SmbFile this$0 -> k
    void write(byte[],int,jcifs.smb.SmbFile,int) -> a
    void run() -> run
jcifs.smb.SmbFileFilter -> c.b.ab:
    boolean accept(jcifs.smb.SmbFile) -> a
jcifs.smb.SmbFileInputStream -> c.b.ac:
    long fp -> b
    int readSize -> c
    int openFlags -> d
    byte[] tmp -> e
    jcifs.smb.SmbFile file -> a
    void close() -> close
    int read() -> read
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    int available() -> available
    long skip(long) -> skip
jcifs.smb.SmbFileOutputStream -> c.b.ad:
    jcifs.smb.SmbFile file -> a
    boolean append -> b
    boolean useNTSmbs -> c
    int openFlags -> d
    int writeSize -> e
    long fp -> f
    byte[] tmp -> g
    jcifs.smb.SmbComWriteAndX reqx -> h
    jcifs.smb.SmbComWriteAndXResponse rspx -> i
    jcifs.smb.SmbComWrite req -> j
    jcifs.smb.SmbComWriteResponse rsp -> k
    void close() -> close
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
jcifs.smb.SmbFilenameFilter -> c.b.ae:
    boolean accept(jcifs.smb.SmbFile,java.lang.String) -> a
jcifs.smb.SmbNamedPipe -> c.b.af:
    int pipeType -> j
jcifs.smb.SmbSession -> c.b.ag:
    java.lang.String LOGON_SHARE -> e
    int LOOKUP_RESP_LIMIT -> f
    java.lang.String DOMAIN -> g
    java.lang.String USERNAME -> h
    int CACHE_POLICY -> i
    jcifs.netbios.NbtAddress[] dc_list -> a
    int uid -> j
    java.util.Vector trees -> k
    boolean sessionSetup -> l
    jcifs.UniAddress address -> m
    int port -> n
    int localPort -> o
    java.net.InetAddress localAddr -> p
    jcifs.smb.SmbTransport transport -> b
    jcifs.smb.NtlmPasswordAuthentication auth -> c
    long expiration -> d
    jcifs.smb.SmbTree getSmbTree(java.lang.String,java.lang.String) -> a
    boolean matches(jcifs.smb.NtlmPasswordAuthentication) -> a
    jcifs.smb.SmbTransport transport() -> a
    void sendTransaction(jcifs.smb.SmbComTransaction,jcifs.smb.SmbComTransactionResponse) -> a
    void send(jcifs.smb.ServerMessageBlock,jcifs.smb.ServerMessageBlock) -> a
    void sessionSetup(jcifs.smb.ServerMessageBlock,jcifs.smb.ServerMessageBlock) -> b
    void logoff(boolean) -> a
    java.lang.String toString() -> toString
jcifs.smb.SmbTransport -> c.b.ah:
    java.net.InetAddress LADDR -> r
    int LPORT -> s
    int MAX_MPX_COUNT -> t
    int SND_BUF_SIZE -> u
    int RCV_BUF_SIZE -> v
    boolean USE_UNICODE -> w
    boolean FORCE_UNICODE -> x
    boolean USE_NTSTATUS -> y
    boolean SIGNPREF -> z
    boolean USE_NTSMBS -> A
    int DEFAULT_FLAGS2 -> B
    int DEFAULT_CAPABILITIES -> C
    int FLAGS2 -> D
    int CAPABILITIES -> E
    boolean TCP_NODELAY -> F
    int RESPONSE_TIMEOUT -> G
    java.util.LinkedList CONNECTIONS -> H
    int[] MAGIC -> I
    byte[] snd_buf -> J
    byte[] rcv_buf -> K
    int state -> L
    jcifs.netbios.NbtSocket socket -> M
    java.util.HashMap responseTable -> N
    java.io.InputStream in -> O
    java.io.OutputStream out -> P
    int localPort -> Q
    java.net.InetAddress localAddr -> R
    java.lang.Thread thread -> S
    java.lang.Object outLock -> T
    jcifs.UniAddress address -> U
    int port -> V
    java.util.LinkedList referrals -> W
    jcifs.smb.SmbTransport$Mid[] mids -> X
    short mid_next -> Y
    java.io.IOException socketException -> Z
    long sessionExpiration -> aa
    int SSN_LIMIT -> a
    int SO_TIMEOUT -> b
    java.lang.String NATIVE_OS -> c
    java.lang.String NATIVE_LANMAN -> d
    jcifs.util.LogStream log -> e
    jcifs.smb.SmbTransport NULL_TRANSPORT -> f
    int flags2 -> g
    int maxMpxCount -> h
    int snd_buf_size -> i
    int rcv_buf_size -> j
    int capabilities -> k
    int sessionKey -> l
    boolean useUnicode -> m
    java.lang.String tconHostName -> n
    jcifs.smb.SmbTransport$ServerData server -> o
    jcifs.smb.SigningDigest digest -> p
    java.util.LinkedList sessions -> q
    jcifs.smb.SmbTransport getSmbTransport(jcifs.UniAddress,int) -> a
    jcifs.smb.SmbTransport getSmbTransport(jcifs.UniAddress,int,java.net.InetAddress,int) -> a
    jcifs.smb.SmbSession getSmbSession(jcifs.smb.NtlmPasswordAuthentication) -> a
    boolean matches(jcifs.UniAddress,int,java.net.InetAddress,int) -> b
    boolean hasCapability(int) -> a
    boolean isSignatureSetupRequired(jcifs.smb.NtlmPasswordAuthentication) -> b
    void tryClose(boolean) -> a
    void start() -> a
    void run() -> run
    jcifs.smb.DfsReferral getDfsReferral(jcifs.smb.NtlmPasswordAuthentication,java.lang.String) -> a
    jcifs.smb.DfsReferral lookupReferral(java.lang.String) -> a
    void send(jcifs.smb.ServerMessageBlock,jcifs.smb.ServerMessageBlock) -> a
    void sendTransaction(jcifs.smb.SmbComTransaction,jcifs.smb.SmbComTransactionResponse) -> a
    void negotiate0() -> b
    void negotiate() -> c
    java.lang.String toString() -> toString
    jcifs.smb.SmbTransport$Mid aquireMid() -> d
    void releaseMid(jcifs.smb.SmbTransport$Mid) -> a
jcifs.smb.SmbTransport$Mid -> c.b.ai:
    short mid -> a
    jcifs.smb.SmbTransport this$0 -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
jcifs.smb.SmbTransport$ServerData -> c.b.aj:
    int maxMpxCount -> a
    int maxBufferSize -> b
    int sessionKey -> c
    int capabilities -> d
    java.lang.String oemDomainName -> e
    int securityMode -> f
    int security -> g
    boolean encryptedPasswords -> h
    boolean signaturesEnabled -> i
    boolean signaturesRequired -> j
    int maxNumberVcs -> k
    int maxRawSize -> l
    long serverTime -> m
    int serverTimeZone -> n
    int encryptionKeyLength -> o
    byte[] encryptionKey -> p
    jcifs.smb.SmbTransport this$0 -> q
jcifs.smb.SmbTree -> c.b.ak:
    java.lang.String DEFAULT_SERVICE -> e
    int tid -> f
    java.lang.String share -> g
    java.lang.String service -> a
    jcifs.smb.SmbSession session -> b
    boolean treeConnected -> c
    boolean inDfs -> d
    boolean matches(java.lang.String,java.lang.String) -> a
    void sendTransaction(jcifs.smb.SmbComTransaction,jcifs.smb.SmbComTransactionResponse) -> a
    void send(jcifs.smb.ServerMessageBlock,jcifs.smb.ServerMessageBlock) -> a
    void treeConnect(jcifs.smb.ServerMessageBlock,jcifs.smb.ServerMessageBlock) -> b
    void treeDisconnect(boolean) -> a
    java.lang.String toString() -> toString
jcifs.smb.Trans2FindFirst2 -> c.b.al:
    int searchAttributes -> c
    int flags -> d
    int informationLevel -> R
    int searchStorageType -> S
    java.lang.String wildcard -> T
    int LIST_SIZE -> a
    int LIST_COUNT -> b
    int writeSetupWireFormat(byte[],int) -> b
    int writeParametersWireFormat(byte[],int) -> c
    int writeDataWireFormat(byte[],int) -> d
    java.lang.String toString() -> toString
jcifs.smb.Trans2FindFirst2Response -> c.b.am:
    int sid -> a
    boolean isEndOfSearch -> L
    int eaErrorOffset -> M
    int lastNameOffset -> N
    int lastNameBufferIndex -> O
    java.lang.String lastName -> P
    int resumeKey -> Q
    java.lang.String readString(byte[],int,int) -> d
    int readParametersWireFormat(byte[],int,int) -> a
    int readDataWireFormat(byte[],int,int) -> b
    java.lang.String toString() -> toString
jcifs.smb.Trans2FindFirst2Response$SmbFindFileBothDirectoryInfo -> c.b.an:
    int nextEntryOffset -> a
    int fileIndex -> b
    long creationTime -> c
    long lastAccessTime -> d
    long lastWriteTime -> e
    long changeTime -> f
    long endOfFile -> g
    long allocationSize -> h
    int extFileAttributes -> i
    int fileNameLength -> j
    int eaSize -> k
    int shortNameLength -> l
    java.lang.String shortName -> m
    java.lang.String filename -> n
    jcifs.smb.Trans2FindFirst2Response this$0 -> o
    java.lang.String getName() -> a
    int getAttributes() -> b
    long createTime() -> c
    long lastModified() -> d
    long length() -> e
    java.lang.String toString() -> toString
jcifs.smb.Trans2FindNext2 -> c.b.ao:
    int sid -> a
    int informationLevel -> b
    int resumeKey -> c
    int flags -> d
    java.lang.String filename -> R
    void reset(int,java.lang.String) -> a
    int writeSetupWireFormat(byte[],int) -> b
    int writeParametersWireFormat(byte[],int) -> c
    int writeDataWireFormat(byte[],int) -> d
    java.lang.String toString() -> toString
jcifs.smb.Trans2GetDfsReferral -> c.b.ap:
    int maxReferralLevel -> a
    int writeSetupWireFormat(byte[],int) -> b
    int writeParametersWireFormat(byte[],int) -> c
    int writeDataWireFormat(byte[],int) -> d
    java.lang.String toString() -> toString
jcifs.smb.Trans2GetDfsReferralResponse -> c.b.aq:
    int pathConsumed -> a
    int numReferrals -> L
    int flags -> M
    jcifs.smb.Trans2GetDfsReferralResponse$Referral referral -> N
    int readParametersWireFormat(byte[],int,int) -> a
    int readDataWireFormat(byte[],int,int) -> b
    java.lang.String toString() -> toString
jcifs.smb.Trans2GetDfsReferralResponse$Referral -> c.b.ar:
    int version -> b
    int size -> c
    int serverType -> d
    int flags -> e
    int proximity -> f
    int ttl -> g
    int pathOffset -> h
    int altPathOffset -> i
    int nodeOffset -> j
    java.lang.String path -> k
    java.lang.String altPath -> l
    java.lang.String node -> a
    jcifs.smb.Trans2GetDfsReferralResponse this$0 -> m
    int readWireFormat(byte[],int,int) -> a
    java.lang.String toString() -> toString
    java.lang.String access$000(jcifs.smb.Trans2GetDfsReferralResponse$Referral) -> a
jcifs.smb.Trans2QueryFSInformation -> c.b.as:
    int informationLevel -> a
    int writeSetupWireFormat(byte[],int) -> b
    int writeParametersWireFormat(byte[],int) -> c
    int writeDataWireFormat(byte[],int) -> d
    java.lang.String toString() -> toString
jcifs.smb.Trans2QueryFSInformationResponse -> c.b.at:
    int informationLevel -> L
    jcifs.smb.AllocInfo info -> a
    int readParametersWireFormat(byte[],int,int) -> a
    int readDataWireFormat(byte[],int,int) -> b
    int readSmbInfoAllocationWireFormat(byte[],int) -> b
    int readSmbQueryFSSizeInfoWireFormat(byte[],int) -> c
    java.lang.String toString() -> toString
jcifs.smb.Trans2QueryFSInformationResponse$SmbInfoAllocation -> c.b.au:
    long alloc -> a
    long free -> b
    int sectPerAlloc -> c
    int bytesPerSect -> d
    jcifs.smb.Trans2QueryFSInformationResponse this$0 -> e
    long getCapacity() -> a
    java.lang.String toString() -> toString
jcifs.smb.Trans2QueryPathInformation -> c.b.av:
    int informationLevel -> a
    int writeSetupWireFormat(byte[],int) -> b
    int writeParametersWireFormat(byte[],int) -> c
    int writeDataWireFormat(byte[],int) -> d
    java.lang.String toString() -> toString
jcifs.smb.Trans2QueryPathInformationResponse -> c.b.aw:
    int informationLevel -> L
    jcifs.smb.Info info -> a
    int readParametersWireFormat(byte[],int,int) -> a
    int readDataWireFormat(byte[],int,int) -> b
    int readSmbQueryFileStandardInfoWireFormat(byte[],int) -> b
    int readSmbQueryFileBasicInfoWireFormat(byte[],int) -> c
    java.lang.String toString() -> toString
jcifs.smb.Trans2QueryPathInformationResponse$SmbQueryFileBasicInfo -> c.b.ax:
    long createTime -> a
    long lastAccessTime -> b
    long lastWriteTime -> c
    long changeTime -> d
    int attributes -> e
    jcifs.smb.Trans2QueryPathInformationResponse this$0 -> f
    int getAttributes() -> a
    long getCreateTime() -> b
    long getLastWriteTime() -> c
    long getSize() -> d
    java.lang.String toString() -> toString
jcifs.smb.Trans2QueryPathInformationResponse$SmbQueryFileStandardInfo -> c.b.ay:
    long allocationSize -> a
    long endOfFile -> b
    int numberOfLinks -> c
    boolean deletePending -> d
    boolean directory -> e
    jcifs.smb.Trans2QueryPathInformationResponse this$0 -> f
    int getAttributes() -> a
    long getCreateTime() -> b
    long getLastWriteTime() -> c
    long getSize() -> d
    java.lang.String toString() -> toString
jcifs.smb.Trans2SetFileInformation -> c.b.az:
    int fid -> a
    int attributes -> b
    long createTime -> c
    long lastWriteTime -> d
    int writeSetupWireFormat(byte[],int) -> b
    int writeParametersWireFormat(byte[],int) -> c
    int writeDataWireFormat(byte[],int) -> d
    java.lang.String toString() -> toString
jcifs.smb.Trans2SetFileInformationResponse -> c.b.aA:
    int readParametersWireFormat(byte[],int,int) -> a
    int readDataWireFormat(byte[],int,int) -> b
    java.lang.String toString() -> toString
jcifs.smb.TransPeekNamedPipe -> c.b.aB:
    int fid -> a
    int writeSetupWireFormat(byte[],int) -> b
    int writeParametersWireFormat(byte[],int) -> c
    int writeDataWireFormat(byte[],int) -> d
    java.lang.String toString() -> toString
jcifs.smb.TransPeekNamedPipeResponse -> c.b.aC:
    jcifs.smb.SmbNamedPipe pipe -> M
    int head -> N
    int status -> a
    int available -> L
    int readParametersWireFormat(byte[],int,int) -> a
    int readDataWireFormat(byte[],int,int) -> b
    java.lang.String toString() -> toString
jcifs.smb.TransWaitNamedPipe -> c.b.aD:
    int writeSetupWireFormat(byte[],int) -> b
    int writeParametersWireFormat(byte[],int) -> c
    int writeDataWireFormat(byte[],int) -> d
    java.lang.String toString() -> toString
jcifs.smb.TransWaitNamedPipeResponse -> c.b.aE:
    int readParametersWireFormat(byte[],int,int) -> a
    int readDataWireFormat(byte[],int,int) -> b
    java.lang.String toString() -> toString
jcifs.smb.WinError -> c.b.aF:
    int[] WINERR_CODES -> c_
    java.lang.String[] WINERR_MESSAGES -> d_
jcifs.util.DES -> c.c.a:
    int[] encryptKeys -> a
    int[] decryptKeys -> b
    int[] tempInts -> c
    byte[] bytebit -> d
    int[] bigbyte -> e
    byte[] pc1 -> f
    int[] totrot -> g
    byte[] pc2 -> h
    int[] SP1 -> i
    int[] SP2 -> j
    int[] SP3 -> k
    int[] SP4 -> l
    int[] SP5 -> m
    int[] SP6 -> n
    int[] SP7 -> o
    int[] SP8 -> p
    void makeSMBKey(byte[],byte[]) -> a
    void setKey(byte[]) -> a
    void deskey(byte[],boolean,int[]) -> a
    void cookey(int[],int[]) -> a
    void encrypt(byte[],int,byte[],int) -> a
    void des(int[],int[],int[]) -> a
    void encrypt(byte[],byte[]) -> b
    void squashBytesToInts(byte[],int,int[],int,int) -> a
    void spreadIntsToBytes(int[],int,byte[],int,int) -> a
jcifs.util.HMACT64 -> c.c.b:
    java.security.MessageDigest md5 -> a
    byte[] ipad -> b
    byte[] opad -> c
    java.lang.Object clone() -> clone
    byte[] engineDigest() -> engineDigest
    int engineDigest(byte[],int,int) -> engineDigest
    int engineGetDigestLength() -> engineGetDigestLength
    void engineReset() -> engineReset
    void engineUpdate(byte) -> engineUpdate
    void engineUpdate(byte[],int,int) -> engineUpdate
jcifs.util.Hexdump -> c.c.c:
    java.lang.String NL -> b
    int NL_LENGTH -> c
    char[] SPACE_CHARS -> d
    char[] HEX_DIGITS -> a
    void hexdump(java.io.PrintStream,byte[],int,int) -> a
    java.lang.String toHexString(int,int) -> a
    java.lang.String toHexString(byte[],int,int) -> a
    void toHexChars(int,char[],int,int) -> a
jcifs.util.LogStream -> c.c.d:
    jcifs.util.LogStream inst -> b
    int level -> a
    void setLevel(int) -> a
    void setInstance(java.io.PrintStream) -> a
    jcifs.util.LogStream getInstance() -> a
jcifs.util.MD4 -> c.c.e:
    int[] context -> a
    long count -> b
    byte[] buffer -> c
    int[] X -> d
    java.lang.Object clone() -> clone
    void engineReset() -> engineReset
    void engineUpdate(byte) -> engineUpdate
    void engineUpdate(byte[],int,int) -> engineUpdate
    byte[] engineDigest() -> engineDigest
    void transform(byte[],int) -> a
    int FF(int,int,int,int,int,int) -> a
    int GG(int,int,int,int,int,int) -> b
    int HH(int,int,int,int,int,int) -> c
org.apache.http.entity.mime.FormBodyPart -> org.apache.http.entity.mime.FormBodyPart:
org.apache.http.entity.mime.HttpMultipart -> org.apache.http.entity.mime.HttpMultipart:
    org.apache.james.mime4j.util.ByteArrayBuffer CR_LF -> a
    org.apache.james.mime4j.util.ByteArrayBuffer TWO_DASHES -> b
    org.apache.http.entity.mime.HttpMultipartMode mode -> c
    org.apache.james.mime4j.util.ByteArrayBuffer encode(java.nio.charset.Charset,java.lang.String) -> a
    void writeBytes(org.apache.james.mime4j.util.ByteArrayBuffer,java.io.OutputStream) -> a
    void writeBytes(org.apache.james.mime4j.util.ByteSequence,java.io.OutputStream) -> a
    void setMode(org.apache.http.entity.mime.HttpMultipartMode) -> a
    java.nio.charset.Charset getCharset() -> a
    java.lang.String getBoundary() -> b
    void doWriteTo(org.apache.http.entity.mime.HttpMultipartMode,java.io.OutputStream,boolean) -> a
    void writeTo(java.io.OutputStream) -> a
    long getTotalLength() -> c
org.apache.http.entity.mime.HttpMultipart$1 -> org.apache.http.entity.mime.HttpMultipart$1:
    int[] $SwitchMap$org$apache$http$entity$mime$HttpMultipartMode -> a
org.apache.http.entity.mime.HttpMultipartMode -> org.apache.http.entity.mime.HttpMultipartMode:
    org.apache.http.entity.mime.HttpMultipartMode STRICT -> a
    org.apache.http.entity.mime.HttpMultipartMode BROWSER_COMPATIBLE -> b
    org.apache.http.entity.mime.HttpMultipartMode[] $VALUES -> c
    org.apache.http.entity.mime.HttpMultipartMode[] values() -> values
    org.apache.http.entity.mime.HttpMultipartMode valueOf(java.lang.String) -> valueOf
org.apache.http.entity.mime.MIME -> org.apache.http.entity.mime.MIME:
    java.nio.charset.Charset DEFAULT_CHARSET -> a
org.apache.http.entity.mime.MinimalField -> org.apache.http.entity.mime.MinimalField:
    java.lang.String name -> a
    java.lang.String value -> b
    java.lang.String toString() -> toString
org.apache.http.entity.mime.MultipartEntity -> org.apache.http.entity.mime.MultipartEntity:
    char[] MULTIPART_CHARS -> a
    org.apache.james.mime4j.message.Message message -> b
    org.apache.http.entity.mime.HttpMultipart multipart -> c
    org.apache.http.Header contentType -> d
    long length -> e
    boolean dirty -> f
    java.lang.String generateContentType(java.lang.String,java.nio.charset.Charset) -> a
    boolean isRepeatable() -> isRepeatable
    boolean isChunked() -> isChunked
    boolean isStreaming() -> isStreaming
    long getContentLength() -> getContentLength
    org.apache.http.Header getContentType() -> getContentType
    org.apache.http.Header getContentEncoding() -> getContentEncoding
    void consumeContent() -> consumeContent
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
org.apache.http.entity.mime.UnexpectedMimeException -> org.apache.http.entity.mime.UnexpectedMimeException:
org.apache.http.entity.mime.content.AbstractContentBody -> org.apache.http.entity.mime.content.AbstractContentBody:
org.apache.http.entity.mime.content.ContentBody -> org.apache.http.entity.mime.content.ContentBody:
org.apache.http.entity.mime.content.FileBody -> org.apache.http.entity.mime.content.FileBody:
org.apache.http.entity.mime.content.InputStreamBody -> org.apache.http.entity.mime.content.InputStreamBody:
org.apache.http.entity.mime.content.StringBody -> org.apache.http.entity.mime.content.StringBody:
org.jdom2.Attribute -> org.a.a:
    org.jdom2.AttributeType UNDECLARED_TYPE -> a
    org.jdom2.AttributeType CDATA_TYPE -> b
    org.jdom2.AttributeType ID_TYPE -> c
    org.jdom2.AttributeType IDREF_TYPE -> d
    org.jdom2.AttributeType IDREFS_TYPE -> e
    org.jdom2.AttributeType ENTITY_TYPE -> f
    org.jdom2.AttributeType ENTITIES_TYPE -> g
    org.jdom2.AttributeType NMTOKEN_TYPE -> h
    org.jdom2.AttributeType NMTOKENS_TYPE -> i
    org.jdom2.AttributeType NOTATION_TYPE -> j
    org.jdom2.AttributeType ENUMERATED_TYPE -> k
    java.lang.String name -> l
    org.jdom2.Namespace namespace -> m
    java.lang.String value -> n
    org.jdom2.AttributeType type -> o
    boolean specified -> p
    org.jdom2.Element parent -> q
    org.jdom2.Element getParent() -> a
    java.lang.String getName() -> b
    org.jdom2.Attribute setName(java.lang.String) -> a
    java.lang.String getQualifiedName() -> c
    java.lang.String getNamespaceURI() -> d
    org.jdom2.Namespace getNamespace() -> e
    org.jdom2.Attribute setNamespace(org.jdom2.Namespace) -> a
    org.jdom2.Attribute setValue(java.lang.String) -> b
    org.jdom2.Attribute setAttributeType(org.jdom2.AttributeType) -> a
    void setSpecified(boolean) -> a
    java.lang.String toString() -> toString
    org.jdom2.Attribute clone() -> f
    org.jdom2.Attribute setParent(org.jdom2.Element) -> a
    org.jdom2.CloneBase clone() -> g
    java.lang.Object clone() -> clone
org.jdom2.AttributeList -> org.a.b:
    org.jdom2.Attribute[] attributeData -> a
    int size -> b
    org.jdom2.Element parent -> c
    boolean add(org.jdom2.Attribute) -> a
    void add(int,org.jdom2.Attribute) -> a
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(int,java.util.Collection) -> addAll
    void clear() -> clear
    void ensureCapacity(int) -> c
    org.jdom2.Attribute get(int) -> a
    int indexOf(java.lang.String,org.jdom2.Namespace) -> a
    org.jdom2.Attribute remove(int) -> b
    org.jdom2.Attribute set(int,org.jdom2.Attribute) -> b
    int indexOfDuplicate(org.jdom2.Attribute) -> b
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.String toString() -> toString
    java.lang.Object remove(int) -> remove
    void add(int,java.lang.Object) -> add
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
    boolean add(java.lang.Object) -> add
    int access$100(org.jdom2.AttributeList) -> a
    int access$200(org.jdom2.AttributeList) -> b
    int access$300(org.jdom2.AttributeList) -> c
    org.jdom2.Attribute[] access$400(org.jdom2.AttributeList) -> d
    int access$500(org.jdom2.AttributeList) -> e
    int access$600(org.jdom2.AttributeList) -> f
org.jdom2.AttributeList$1 -> org.a.b$1:
org.jdom2.AttributeList$ALIterator -> org.a.c:
    int expect -> b
    int cursor -> c
    boolean canremove -> d
    org.jdom2.AttributeList this$0 -> a
    boolean hasNext() -> hasNext
    org.jdom2.Attribute next() -> a
    void remove() -> remove
    java.lang.Object next() -> next
org.jdom2.AttributeType -> org.a.d:
    org.jdom2.AttributeType UNDECLARED -> a
    org.jdom2.AttributeType CDATA -> b
    org.jdom2.AttributeType ID -> c
    org.jdom2.AttributeType IDREF -> d
    org.jdom2.AttributeType IDREFS -> e
    org.jdom2.AttributeType ENTITY -> f
    org.jdom2.AttributeType ENTITIES -> g
    org.jdom2.AttributeType NMTOKEN -> h
    org.jdom2.AttributeType NMTOKENS -> i
    org.jdom2.AttributeType NOTATION -> j
    org.jdom2.AttributeType ENUMERATION -> k
    org.jdom2.AttributeType[] $VALUES -> l
    org.jdom2.AttributeType[] values() -> values
    org.jdom2.AttributeType valueOf(java.lang.String) -> valueOf
    org.jdom2.AttributeType getAttributeType(java.lang.String) -> a
org.jdom2.CDATA -> org.a.e:
    org.jdom2.CDATA setText(java.lang.String) -> a
    java.lang.String toString() -> toString
    org.jdom2.CDATA clone() -> a
    org.jdom2.CDATA setParent(org.jdom2.Parent) -> a
    org.jdom2.Text setParent(org.jdom2.Parent) -> b
    org.jdom2.Text clone() -> b
    org.jdom2.Text setText(java.lang.String) -> b
    org.jdom2.Content clone() -> c
    org.jdom2.Content setParent(org.jdom2.Parent) -> c
    org.jdom2.CloneBase clone() -> g
    java.lang.Object clone() -> clone
org.jdom2.CloneBase -> org.a.f:
    org.jdom2.CloneBase clone() -> g
    java.lang.Object clone() -> clone
org.jdom2.Comment -> org.a.g:
    java.lang.String text -> a
    java.lang.String getText() -> a
    org.jdom2.Comment setText(java.lang.String) -> a
    org.jdom2.Comment clone() -> b
    org.jdom2.Comment setParent(org.jdom2.Parent) -> a
    java.lang.String toString() -> toString
    org.jdom2.Content clone() -> c
    org.jdom2.Content setParent(org.jdom2.Parent) -> c
    org.jdom2.CloneBase clone() -> g
    java.lang.Object clone() -> clone
org.jdom2.Content -> org.a.h:
    org.jdom2.Parent parent -> b
    org.jdom2.Content$CType ctype -> c
    org.jdom2.Parent getParent() -> d
    org.jdom2.Element getParentElement() -> e
    org.jdom2.Content setParent(org.jdom2.Parent) -> c
    org.jdom2.Content clone() -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.util.List getNamespacesInScope() -> f
    org.jdom2.CloneBase clone() -> g
    java.lang.Object clone() -> clone
org.jdom2.Content$CType -> org.a.i:
    org.jdom2.Content$CType Comment -> a
    org.jdom2.Content$CType Element -> b
    org.jdom2.Content$CType ProcessingInstruction -> c
    org.jdom2.Content$CType EntityRef -> d
    org.jdom2.Content$CType Text -> e
    org.jdom2.Content$CType CDATA -> f
    org.jdom2.Content$CType DocType -> g
    org.jdom2.Content$CType[] $VALUES -> h
    org.jdom2.Content$CType[] values() -> values
    org.jdom2.Content$CType valueOf(java.lang.String) -> valueOf
org.jdom2.ContentList -> org.a.j:
    org.jdom2.Content[] elementData -> a
    int size -> b
    int sizeModCount -> c
    int dataModiCount -> d
    org.jdom2.Parent parent -> e
    void setModCount(int,int) -> a
    int getModCount() -> c
    void incModCount() -> d
    void incDataModOnly() -> e
    int getDataModCount() -> f
    void checkIndex(int,boolean) -> a
    void checkPreConditions(org.jdom2.Content,int,boolean) -> a
    void add(int,org.jdom2.Content) -> a
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(int,java.util.Collection) -> addAll
    void clear() -> clear
    void ensureCapacity(int) -> a
    org.jdom2.Content get(int) -> b
    java.util.List getView(org.jdom2.filter.Filter) -> a
    int indexOfFirstElement() -> a
    int indexOfDocType() -> b
    org.jdom2.Content remove(int) -> c
    void removeParent(org.jdom2.Content) -> a
    org.jdom2.Content set(int,org.jdom2.Content) -> b
    int size() -> size
    java.util.Iterator iterator() -> iterator
    java.util.ListIterator listIterator() -> listIterator
    java.util.ListIterator listIterator(int) -> listIterator
    java.lang.String toString() -> toString
    java.lang.Object remove(int) -> remove
    void add(int,java.lang.Object) -> add
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
    int access$100(org.jdom2.ContentList) -> a
    int access$200(org.jdom2.ContentList) -> b
    org.jdom2.Content[] access$300(org.jdom2.ContentList) -> c
    void access$400(org.jdom2.ContentList,int,boolean) -> a
    int access$500(org.jdom2.ContentList) -> d
    void access$600(org.jdom2.ContentList,int,int) -> a
org.jdom2.ContentList$1 -> org.a.j$1:
org.jdom2.ContentList$CLIterator -> org.a.k:
    int expect -> b
    int cursor -> c
    boolean canremove -> d
    org.jdom2.ContentList this$0 -> a
    boolean hasNext() -> hasNext
    org.jdom2.Content next() -> a
    void remove() -> remove
    java.lang.Object next() -> next
org.jdom2.ContentList$CLListIterator -> org.a.l:
    boolean forward -> b
    boolean canremove -> c
    boolean canset -> d
    int expectedmod -> e
    int cursor -> f
    org.jdom2.ContentList this$0 -> a
    void checkConcurrent() -> c
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    org.jdom2.Content next() -> a
    org.jdom2.Content previous() -> b
    void add(org.jdom2.Content) -> a
    void remove() -> remove
    void set(org.jdom2.Content) -> b
    void add(java.lang.Object) -> add
    void set(java.lang.Object) -> set
    java.lang.Object previous() -> previous
    java.lang.Object next() -> next
org.jdom2.ContentList$FilterList -> org.a.m:
    org.jdom2.filter.Filter filter -> a
    int[] backingpos -> b
    int backingsize -> c
    int xdata -> d
    org.jdom2.ContentList this$0 -> e
    boolean isEmpty() -> isEmpty
    int resync(int) -> c
    void add(int,org.jdom2.Content) -> a
    boolean addAll(int,java.util.Collection) -> addAll
    org.jdom2.Content get(int) -> a
    java.util.Iterator iterator() -> iterator
    java.util.ListIterator listIterator() -> listIterator
    java.util.ListIterator listIterator(int) -> listIterator
    org.jdom2.Content remove(int) -> b
    org.jdom2.Content set(int,org.jdom2.Content) -> b
    int size() -> size
    java.lang.Object remove(int) -> remove
    void add(int,java.lang.Object) -> add
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
    int access$800(org.jdom2.ContentList$FilterList,int) -> a
org.jdom2.ContentList$FilterListIterator -> org.a.n:
    org.jdom2.ContentList$FilterList filterlist -> b
    boolean forward -> c
    boolean canremove -> d
    boolean canset -> e
    int expectedmod -> f
    int cursor -> g
    org.jdom2.ContentList this$0 -> a
    void checkConcurrent() -> c
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    org.jdom2.Content next() -> a
    org.jdom2.Content previous() -> b
    void add(org.jdom2.Content) -> a
    void remove() -> remove
    void set(org.jdom2.Content) -> b
    void add(java.lang.Object) -> add
    void set(java.lang.Object) -> set
    java.lang.Object previous() -> previous
    java.lang.Object next() -> next
org.jdom2.DefaultJDOMFactory -> org.a.o:
    org.jdom2.Attribute attribute(java.lang.String,java.lang.String,org.jdom2.AttributeType,org.jdom2.Namespace) -> a
    org.jdom2.CDATA cdata(java.lang.String) -> a
    org.jdom2.CDATA cdata(int,int,java.lang.String) -> a
    org.jdom2.Text text(java.lang.String) -> b
    org.jdom2.Text text(int,int,java.lang.String) -> b
    org.jdom2.Comment comment(java.lang.String) -> c
    org.jdom2.Comment comment(int,int,java.lang.String) -> c
    org.jdom2.DocType docType(java.lang.String,java.lang.String,java.lang.String) -> a
    org.jdom2.DocType docType(int,int,java.lang.String,java.lang.String,java.lang.String) -> a
    org.jdom2.Document document(org.jdom2.Element) -> a
    org.jdom2.Element element(java.lang.String,org.jdom2.Namespace) -> a
    org.jdom2.Element element(int,int,java.lang.String,org.jdom2.Namespace) -> a
    org.jdom2.ProcessingInstruction processingInstruction(java.lang.String,java.lang.String) -> a
    org.jdom2.ProcessingInstruction processingInstruction(int,int,java.lang.String,java.lang.String) -> a
    org.jdom2.EntityRef entityRef(java.lang.String) -> d
    org.jdom2.EntityRef entityRef(int,int,java.lang.String) -> d
    org.jdom2.EntityRef entityRef(java.lang.String,java.lang.String,java.lang.String) -> b
    org.jdom2.EntityRef entityRef(int,int,java.lang.String,java.lang.String,java.lang.String) -> b
    void addContent(org.jdom2.Parent,org.jdom2.Content) -> a
    void setAttribute(org.jdom2.Element,org.jdom2.Attribute) -> a
    void setRoot(org.jdom2.Document,org.jdom2.Element) -> a
org.jdom2.DocType -> org.a.p:
    java.lang.String elementName -> a
    java.lang.String publicID -> d
    java.lang.String systemID -> e
    java.lang.String internalSubset -> f
    java.lang.String getElementName() -> a
    org.jdom2.DocType setElementName(java.lang.String) -> a
    java.lang.String getPublicID() -> b
    org.jdom2.DocType setPublicID(java.lang.String) -> b
    java.lang.String getSystemID() -> h
    org.jdom2.DocType setSystemID(java.lang.String) -> c
    void setInternalSubset(java.lang.String) -> d
    java.lang.String getInternalSubset() -> i
    java.lang.String toString() -> toString
    org.jdom2.DocType clone() -> j
    org.jdom2.DocType setParent(org.jdom2.Parent) -> a
    org.jdom2.Document getParent() -> k
    org.jdom2.Content clone() -> c
    org.jdom2.Content setParent(org.jdom2.Parent) -> c
    org.jdom2.Parent getParent() -> d
    org.jdom2.CloneBase clone() -> g
    java.lang.Object clone() -> clone
org.jdom2.Document -> org.a.q:
    org.jdom2.ContentList content -> a
    java.lang.String baseURI -> b
    java.util.HashMap propertyMap -> c
    boolean hasRootElement() -> a
    org.jdom2.Element getRootElement() -> b
    org.jdom2.Document setRootElement(org.jdom2.Element) -> a
    org.jdom2.DocType getDocType() -> c
    org.jdom2.Document setDocType(org.jdom2.DocType) -> a
    org.jdom2.Document addContent(org.jdom2.Content) -> a
    void setBaseURI(java.lang.String) -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    org.jdom2.Document clone() -> e
    org.jdom2.Parent getParent() -> d
    void canContainContent(org.jdom2.Content,int,boolean) -> a
    org.jdom2.CloneBase clone() -> g
    java.lang.Object clone() -> clone
org.jdom2.Element -> org.a.r:
    java.lang.String name -> a
    org.jdom2.Namespace namespace -> d
    java.util.List additionalNamespaces -> e
    org.jdom2.AttributeList attributes -> f
    org.jdom2.ContentList content -> g
    java.lang.String getName() -> a
    org.jdom2.Element setName(java.lang.String) -> a
    org.jdom2.Namespace getNamespace() -> b
    org.jdom2.Element setNamespace(org.jdom2.Namespace) -> a
    java.lang.String getNamespacePrefix() -> h
    java.lang.String getNamespaceURI() -> i
    java.lang.String getQualifiedName() -> j
    boolean addNamespaceDeclaration(org.jdom2.Namespace) -> b
    java.util.List getAdditionalNamespaces() -> k
    java.lang.String getText() -> l
    org.jdom2.Element addContent(org.jdom2.Content) -> a
    boolean isAncestor(org.jdom2.Element) -> a
    boolean hasAttributes() -> m
    boolean hasAdditionalNamespaces() -> n
    org.jdom2.AttributeList getAttributeList() -> o
    java.util.List getAttributes() -> p
    org.jdom2.Element setAttribute(org.jdom2.Attribute) -> a
    java.lang.String toString() -> toString
    org.jdom2.Element clone() -> q
    java.util.List getChildren() -> r
    java.util.List getNamespacesInScope() -> f
    void canContainContent(org.jdom2.Content,int,boolean) -> a
    org.jdom2.Content clone() -> c
    org.jdom2.CloneBase clone() -> g
    java.lang.Object clone() -> clone
org.jdom2.EntityRef -> org.a.s:
    java.lang.String name -> a
    java.lang.String publicID -> d
    java.lang.String systemID -> e
    org.jdom2.EntityRef setName(java.lang.String) -> a
    org.jdom2.EntityRef setPublicID(java.lang.String) -> b
    org.jdom2.EntityRef setSystemID(java.lang.String) -> c
    java.lang.String toString() -> toString
    org.jdom2.EntityRef setParent(org.jdom2.Parent) -> a
    org.jdom2.Element getParent() -> a
    org.jdom2.EntityRef clone() -> b
    org.jdom2.Content clone() -> c
    org.jdom2.Content setParent(org.jdom2.Parent) -> c
    org.jdom2.Parent getParent() -> d
    org.jdom2.CloneBase clone() -> g
    java.lang.Object clone() -> clone
org.jdom2.IllegalAddException -> org.a.t:
org.jdom2.IllegalDataException -> org.a.u:
org.jdom2.IllegalNameException -> org.a.v:
org.jdom2.IllegalTargetException -> org.a.w:
org.jdom2.JDOMException -> org.a.x:
org.jdom2.JDOMFactory -> org.a.y:
    org.jdom2.Attribute attribute(java.lang.String,java.lang.String,org.jdom2.AttributeType,org.jdom2.Namespace) -> a
    org.jdom2.CDATA cdata(java.lang.String) -> a
    org.jdom2.CDATA cdata(int,int,java.lang.String) -> a
    org.jdom2.Text text(int,int,java.lang.String) -> b
    org.jdom2.Text text(java.lang.String) -> b
    org.jdom2.Comment comment(java.lang.String) -> c
    org.jdom2.Comment comment(int,int,java.lang.String) -> c
    org.jdom2.DocType docType(java.lang.String,java.lang.String,java.lang.String) -> a
    org.jdom2.DocType docType(int,int,java.lang.String,java.lang.String,java.lang.String) -> a
    org.jdom2.Document document(org.jdom2.Element) -> a
    org.jdom2.Element element(java.lang.String,org.jdom2.Namespace) -> a
    org.jdom2.Element element(int,int,java.lang.String,org.jdom2.Namespace) -> a
    org.jdom2.ProcessingInstruction processingInstruction(java.lang.String,java.lang.String) -> a
    org.jdom2.ProcessingInstruction processingInstruction(int,int,java.lang.String,java.lang.String) -> a
    org.jdom2.EntityRef entityRef(java.lang.String) -> d
    org.jdom2.EntityRef entityRef(java.lang.String,java.lang.String,java.lang.String) -> b
    org.jdom2.EntityRef entityRef(int,int,java.lang.String) -> d
    org.jdom2.EntityRef entityRef(int,int,java.lang.String,java.lang.String,java.lang.String) -> b
    void addContent(org.jdom2.Parent,org.jdom2.Content) -> a
    void setAttribute(org.jdom2.Element,org.jdom2.Attribute) -> a
    void setRoot(org.jdom2.Document,org.jdom2.Element) -> a
org.jdom2.Namespace -> org.a.z:
    java.util.concurrent.ConcurrentMap namespacemap -> c
    org.jdom2.Namespace NO_NAMESPACE -> a
    org.jdom2.Namespace XML_NAMESPACE -> b
    java.lang.String prefix -> d
    java.lang.String uri -> e
    org.jdom2.Namespace getNamespace(java.lang.String,java.lang.String) -> a
    java.lang.String getPrefix() -> a
    java.lang.String getURI() -> b
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
org.jdom2.Parent -> org.a.A:
    org.jdom2.Parent getParent() -> d
    void canContainContent(org.jdom2.Content,int,boolean) -> a
org.jdom2.ProcessingInstruction -> org.a.B:
    java.lang.String target -> a
    java.lang.String rawData -> d
    java.util.Map mapData -> e
    org.jdom2.ProcessingInstruction setTarget(java.lang.String) -> a
    java.lang.String getTarget() -> a
    java.lang.String getData() -> b
    org.jdom2.ProcessingInstruction setData(java.lang.String) -> b
    java.util.Map parseData(java.lang.String) -> c
    int[] extractQuotedString(java.lang.String) -> d
    java.lang.String toString() -> toString
    org.jdom2.ProcessingInstruction clone() -> h
    org.jdom2.ProcessingInstruction setParent(org.jdom2.Parent) -> a
    org.jdom2.Content clone() -> c
    org.jdom2.Content setParent(org.jdom2.Parent) -> c
    org.jdom2.CloneBase clone() -> g
    java.lang.Object clone() -> clone
org.jdom2.Text -> org.a.C:
    java.lang.String value -> a
    java.lang.String getText() -> h
    org.jdom2.Text setText(java.lang.String) -> b
    java.lang.String toString() -> toString
    org.jdom2.Text clone() -> b
    org.jdom2.Text setParent(org.jdom2.Parent) -> b
    org.jdom2.Element getParent() -> i
    org.jdom2.Content clone() -> c
    org.jdom2.Content setParent(org.jdom2.Parent) -> c
    org.jdom2.Parent getParent() -> d
    org.jdom2.CloneBase clone() -> g
    java.lang.Object clone() -> clone
org.jdom2.Verifier -> org.a.D:
    byte[] VALCONST -> a
    int[] LENCONST -> b
    byte[] CHARFLAGS -> c
    byte[] buildBitFlags() -> a
    java.lang.String checkJDOMName(java.lang.String) -> m
    java.lang.String checkElementName(java.lang.String) -> a
    java.lang.String checkAttributeName(java.lang.String) -> b
    java.lang.String checkCharacterData(java.lang.String) -> c
    java.lang.String checkCDATASection(java.lang.String) -> d
    java.lang.String checkNamespacePrefix(java.lang.String) -> e
    java.lang.String checkNamespaceURI(java.lang.String) -> f
    java.lang.String checkNamespaceCollision(org.jdom2.Namespace,org.jdom2.Namespace) -> a
    java.lang.String checkNamespaceCollision(org.jdom2.Attribute,org.jdom2.Element) -> a
    java.lang.String checkNamespaceCollision(org.jdom2.Attribute,org.jdom2.Element,int) -> a
    java.lang.String checkNamespaceCollision(org.jdom2.Namespace,org.jdom2.Element) -> a
    java.lang.String checkNamespaceCollision(org.jdom2.Namespace,org.jdom2.Element,int) -> a
    java.lang.String checkNamespaceCollision(org.jdom2.Namespace,org.jdom2.Attribute) -> a
    java.lang.String checkNamespaceCollision(org.jdom2.Namespace,java.util.List) -> a
    java.lang.String checkNamespaceCollision(org.jdom2.Namespace,java.util.List,int) -> a
    java.lang.String checkProcessingInstructionTarget(java.lang.String) -> g
    java.lang.String checkProcessingInstructionData(java.lang.String) -> h
    java.lang.String checkCommentData(java.lang.String) -> i
    int decodeSurrogatePair(char,char) -> a
    boolean isXMLPublicIDCharacter(char) -> a
    java.lang.String checkPublicID(java.lang.String) -> j
    java.lang.String checkSystemLiteral(java.lang.String) -> k
    java.lang.String checkXMLName(java.lang.String) -> l
    boolean isHighSurrogate(char) -> b
    boolean isLowSurrogate(char) -> c
    boolean isXMLCharacter(int) -> a
    boolean isXMLNameCharacter(char) -> d
    boolean isXMLNameStartCharacter(char) -> e
    boolean isXMLWhitespace(char) -> f
org.jdom2.filter.AbstractFilter -> org.a.a.a:
    boolean matches(java.lang.Object) -> a
org.jdom2.filter.ElementFilter -> org.a.a.b:
    java.lang.String name -> a
    org.jdom2.Namespace namespace -> b
    org.jdom2.Element filter(java.lang.Object) -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object filter(java.lang.Object) -> c
org.jdom2.filter.Filter -> org.a.a.c:
    java.lang.Object filter(java.lang.Object) -> c
    boolean matches(java.lang.Object) -> a
org.jdom2.input.JDOMParseException -> org.a.b.a:
    org.jdom2.Document partialDocument -> a
org.jdom2.input.SAXBuilder -> org.a.b.b:
    org.jdom2.input.sax.SAXHandlerFactory DEFAULTSAXHANDLERFAC -> a
    org.jdom2.JDOMFactory DEFAULTJDOMFAC -> b
    org.jdom2.input.sax.XMLReaderJDOMFactory readerfac -> c
    org.jdom2.input.sax.SAXHandlerFactory handlerfac -> d
    org.jdom2.JDOMFactory jdomfac -> e
    java.util.HashMap features -> f
    java.util.HashMap properties -> g
    org.xml.sax.ErrorHandler saxErrorHandler -> h
    org.xml.sax.EntityResolver saxEntityResolver -> i
    org.xml.sax.DTDHandler saxDTDHandler -> j
    org.xml.sax.XMLFilter saxXMLFilter -> k
    boolean expand -> l
    boolean ignoringWhite -> m
    boolean ignoringBoundaryWhite -> n
    boolean reuseParser -> o
    org.jdom2.input.sax.SAXEngine engine -> p
    org.jdom2.input.sax.SAXEngine buildEngine() -> a
    org.xml.sax.XMLReader createParser() -> b
    org.jdom2.input.sax.SAXEngine getEngine() -> c
    void configureParser(org.xml.sax.XMLReader,org.jdom2.input.sax.SAXHandler) -> a
    void internalSetFeature(org.xml.sax.XMLReader,java.lang.String,boolean,java.lang.String) -> a
    void internalSetProperty(org.xml.sax.XMLReader,java.lang.String,java.lang.Object,java.lang.String) -> a
    org.jdom2.Document build(java.io.InputStream) -> a
org.jdom2.input.sax.BuilderErrorHandler -> org.a.b.a.a:
    void warning(org.xml.sax.SAXParseException) -> warning
    void error(org.xml.sax.SAXParseException) -> error
    void fatalError(org.xml.sax.SAXParseException) -> fatalError
org.jdom2.input.sax.DefaultSAXHandlerFactory -> org.a.b.a.b:
    org.jdom2.input.sax.SAXHandler createSAXHandler(org.jdom2.JDOMFactory) -> a
org.jdom2.input.sax.DefaultSAXHandlerFactory$DefaultSAXHandler -> org.a.b.a.c:
org.jdom2.input.sax.SAXBuilderEngine -> org.a.b.a.d:
    org.xml.sax.XMLReader saxParser -> a
    org.jdom2.input.sax.SAXHandler saxHandler -> b
    boolean validating -> c
    org.jdom2.Document build(org.xml.sax.InputSource) -> a
    org.jdom2.Document build(java.io.InputStream) -> a
org.jdom2.input.sax.SAXEngine -> org.a.b.a.e:
    org.jdom2.Document build(java.io.InputStream) -> a
org.jdom2.input.sax.SAXHandler -> org.a.b.a.f:
    org.jdom2.JDOMFactory factory -> a
    java.util.List declaredNamespaces -> b
    java.lang.StringBuilder internalSubset -> c
    org.jdom2.input.sax.TextBuffer textBuffer -> d
    java.util.Map externalEntities -> e
    org.jdom2.Document currentDocument -> f
    org.jdom2.Element currentElement -> g
    org.xml.sax.Locator currentLocator -> h
    boolean atRoot -> i
    boolean inDTD -> j
    boolean inInternalSubset -> k
    boolean previousCDATA -> l
    boolean inCDATA -> m
    boolean expand -> n
    boolean suppress -> o
    int entityDepth -> p
    boolean ignoringWhite -> q
    boolean ignoringBoundaryWhite -> r
    int lastline -> s
    int lastcol -> t
    void resetSubCLass() -> a
    void reset() -> b
    org.jdom2.Document getDocument() -> c
    void setExpandEntities(boolean) -> a
    void setIgnoringElementContentWhitespace(boolean) -> b
    void setIgnoringBoundaryWhitespace(boolean) -> c
    void startDocument() -> startDocument
    void externalEntityDecl(java.lang.String,java.lang.String,java.lang.String) -> externalEntityDecl
    void attributeDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> attributeDecl
    void elementDecl(java.lang.String,java.lang.String) -> elementDecl
    void internalEntityDecl(java.lang.String,java.lang.String) -> internalEntityDecl
    void processingInstruction(java.lang.String,java.lang.String) -> processingInstruction
    void skippedEntity(java.lang.String) -> skippedEntity
    void startPrefixMapping(java.lang.String,java.lang.String) -> startPrefixMapping
    void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    void transferNamespaces(org.jdom2.Element) -> a
    void characters(char[],int,int) -> characters
    void ignorableWhitespace(char[],int,int) -> ignorableWhitespace
    void flushCharacters() -> d
    void flushCharacters(java.lang.String) -> a
    void endElement(java.lang.String,java.lang.String,java.lang.String) -> endElement
    void startDTD(java.lang.String,java.lang.String,java.lang.String) -> startDTD
    void endDTD() -> endDTD
    void startEntity(java.lang.String) -> startEntity
    void endEntity(java.lang.String) -> endEntity
    void startCDATA() -> startCDATA
    void endCDATA() -> endCDATA
    void comment(char[],int,int) -> comment
    void notationDecl(java.lang.String,java.lang.String,java.lang.String) -> notationDecl
    void unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> unparsedEntityDecl
    void appendExternalId(java.lang.String,java.lang.String) -> a
    org.jdom2.Element getCurrentElement() -> e
    void setDocumentLocator(org.xml.sax.Locator) -> setDocumentLocator
org.jdom2.input.sax.SAXHandlerFactory -> org.a.b.a.g:
    org.jdom2.input.sax.SAXHandler createSAXHandler(org.jdom2.JDOMFactory) -> a
org.jdom2.input.sax.TextBuffer -> org.a.b.a.h:
    char[] array -> a
    int arraySize -> b
    void append(char[],int,int) -> a
    void clear() -> a
    boolean isAllWhitespace() -> b
    java.lang.String toString() -> toString
org.jdom2.input.sax.XMLReaderJDOMFactory -> org.a.b.a.i:
    org.xml.sax.XMLReader createXMLReader() -> a
    boolean isValidating() -> b
org.jdom2.input.sax.XMLReaders -> org.a.b.a.j:
    org.jdom2.input.sax.XMLReaders NONVALIDATING -> a
    org.jdom2.input.sax.XMLReaders DTDVALIDATING -> b
    org.jdom2.input.sax.XMLReaders XSDVALIDATING -> c
    javax.xml.parsers.SAXParserFactory jaxpfactory -> d
    java.lang.Exception failcause -> e
    boolean validates -> f
    org.jdom2.input.sax.XMLReaders[] $VALUES -> g
    org.jdom2.input.sax.XMLReaders[] values() -> values
    org.jdom2.input.sax.XMLReaders valueOf(java.lang.String) -> valueOf
    org.xml.sax.XMLReader createXMLReader() -> a
    boolean isValidating() -> b
org.jdom2.internal.ArrayCopy -> org.a.c.a:
    java.lang.Object[] copyOf(java.lang.Object[],int) -> a
    char[] copyOf(char[],int) -> a
    int[] copyOf(int[],int) -> a
org.jdom2.internal.SystemProperty -> org.a.c.b:
    java.lang.String get(java.lang.String,java.lang.String) -> a
org.jdom2.output.EscapeStrategy -> org.a.d.a:
org.jdom2.output.Format -> org.a.d.b:
    org.jdom2.output.EscapeStrategy UTFEscapeStrategy -> k
    org.jdom2.output.EscapeStrategy Bits8EscapeStrategy -> l
    org.jdom2.output.EscapeStrategy Bits7EscapeStrategy -> m
    org.jdom2.output.EscapeStrategy DefaultEscapeStrategy -> n
    java.lang.String STANDARD_LINE_SEPARATOR -> o
    java.lang.String indent -> a
    java.lang.String lineSeparator -> b
    java.lang.String encoding -> c
    boolean omitDeclaration -> d
    boolean omitEncoding -> e
    boolean specifiedAttributesOnly -> f
    boolean expandEmptyElements -> g
    boolean ignoreTrAXEscapingPIs -> h
    org.jdom2.output.Format$TextMode mode -> i
    org.jdom2.output.EscapeStrategy escapeStrategy -> j
    org.jdom2.output.Format getRawFormat() -> a
    org.jdom2.output.EscapeStrategy chooseStrategy(java.lang.String) -> b
    org.jdom2.output.EscapeStrategy getEscapeStrategy() -> b
    java.lang.String getLineSeparator() -> c
    boolean getOmitEncoding() -> d
    boolean getOmitDeclaration() -> e
    boolean getExpandEmptyElements() -> f
    boolean getIgnoreTrAXEscapingPIs() -> g
    org.jdom2.output.Format$TextMode getTextMode() -> h
    java.lang.String getIndent() -> i
    org.jdom2.output.Format setEncoding(java.lang.String) -> a
    java.lang.String getEncoding() -> j
    boolean isSpecifiedAttributesOnly() -> k
    org.jdom2.output.Format clone() -> l
    java.lang.Object clone() -> clone
org.jdom2.output.Format$1 -> org.a.d.b$1:
org.jdom2.output.Format$DefaultCharsetEscapeStrategy -> org.a.d.c:
    java.nio.charset.CharsetEncoder encoder -> a
org.jdom2.output.Format$EscapeStrategy7Bits -> org.a.d.d:
org.jdom2.output.Format$EscapeStrategy8Bits -> org.a.d.e:
org.jdom2.output.Format$EscapeStrategyUTF -> org.a.d.f:
org.jdom2.output.Format$TextMode -> org.a.d.g:
    org.jdom2.output.Format$TextMode PRESERVE -> a
    org.jdom2.output.Format$TextMode TRIM -> b
    org.jdom2.output.Format$TextMode NORMALIZE -> c
    org.jdom2.output.Format$TextMode TRIM_FULL_WHITE -> d
    org.jdom2.output.Format$TextMode[] $VALUES -> e
    org.jdom2.output.Format$TextMode[] values() -> values
    org.jdom2.output.Format$TextMode valueOf(java.lang.String) -> valueOf
org.jdom2.output.LineSeparator -> org.a.d.h:
    org.jdom2.output.LineSeparator CRNL -> a
    org.jdom2.output.LineSeparator NL -> b
    org.jdom2.output.LineSeparator CR -> c
    org.jdom2.output.LineSeparator DOS -> d
    org.jdom2.output.LineSeparator UNIX -> e
    org.jdom2.output.LineSeparator SYSTEM -> f
    org.jdom2.output.LineSeparator NONE -> g
    org.jdom2.output.LineSeparator DEFAULT -> h
    java.lang.String value -> i
    org.jdom2.output.LineSeparator[] $VALUES -> j
    org.jdom2.output.LineSeparator[] values() -> values
    org.jdom2.output.LineSeparator valueOf(java.lang.String) -> valueOf
    java.lang.String getDefaultLineSeparator() -> b
    java.lang.String value() -> a
org.jdom2.output.XMLOutputter -> org.a.d.i:
    org.jdom2.output.XMLOutputter$DefaultXMLProcessor DEFAULTPROCESSOR -> a
    org.jdom2.output.Format myFormat -> b
    org.jdom2.output.support.XMLOutputProcessor myProcessor -> c
    java.lang.String outputString(org.jdom2.DocType) -> a
    java.lang.String outputString(org.jdom2.Comment) -> a
    java.lang.String outputString(org.jdom2.ProcessingInstruction) -> a
    void output(org.jdom2.DocType,java.io.Writer) -> a
    void output(org.jdom2.Comment,java.io.Writer) -> a
    void output(org.jdom2.ProcessingInstruction,java.io.Writer) -> a
    org.jdom2.output.XMLOutputter clone() -> a
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.jdom2.output.XMLOutputter$1 -> org.a.d.i$1:
org.jdom2.output.XMLOutputter$DefaultXMLProcessor -> org.a.d.j:
org.jdom2.output.support.AbstractOutputProcessor -> org.a.d.a.a:
org.jdom2.output.support.AbstractXMLOutputProcessor -> org.a.d.a.b:
    void process(java.io.Writer,org.jdom2.output.Format,org.jdom2.DocType) -> a
    void process(java.io.Writer,org.jdom2.output.Format,org.jdom2.Comment) -> a
    void process(java.io.Writer,org.jdom2.output.Format,org.jdom2.ProcessingInstruction) -> a
    void write(java.io.Writer,java.lang.String) -> a
    void printDocType(java.io.Writer,org.jdom2.output.support.FormatStack,org.jdom2.DocType) -> a
    void printProcessingInstruction(java.io.Writer,org.jdom2.output.support.FormatStack,org.jdom2.ProcessingInstruction) -> a
    void printComment(java.io.Writer,org.jdom2.output.support.FormatStack,org.jdom2.Comment) -> a
org.jdom2.output.support.FormatStack -> org.a.d.a.c:
    int capacity -> a
    int depth -> b
    org.jdom2.output.Format$TextMode defaultMode -> c
    java.lang.String indent -> d
    java.lang.String encoding -> e
    java.lang.String lineSeparator -> f
    boolean omitDeclaration -> g
    boolean omitEncoding -> h
    boolean expandEmptyElements -> i
    boolean specifiedAttributesOnly -> j
    org.jdom2.output.EscapeStrategy escapeStrategy -> k
    java.lang.String[] levelIndent -> l
    java.lang.String[] levelEOL -> m
    java.lang.String[] levelEOLIndent -> n
    java.lang.String[] termEOLIndent -> o
    boolean[] ignoreTrAXEscapingPIs -> p
    org.jdom2.output.Format$TextMode[] mode -> q
    boolean[] escapeOutput -> r
    java.lang.String getLineSeparator() -> a
    boolean isIgnoreTrAXEscapingPIs() -> b
    void setIgnoreTrAXEscapingPIs(boolean) -> a
    void setEscapeOutput(boolean) -> b
org.jdom2.output.support.XMLOutputProcessor -> org.a.d.a.d:
    void process(java.io.Writer,org.jdom2.output.Format,org.jdom2.DocType) -> a
    void process(java.io.Writer,org.jdom2.output.Format,org.jdom2.Comment) -> a
    void process(java.io.Writer,org.jdom2.output.Format,org.jdom2.ProcessingInstruction) -> a
org.json.simple.JSONArray -> org.b.a.a:
    java.lang.String toJSONString(java.util.List) -> a
    java.lang.String toJSONString() -> a
    java.lang.String toString() -> toString
org.json.simple.JSONAware -> org.b.a.b:
    java.lang.String toJSONString() -> a
org.json.simple.JSONObject -> org.b.a.c:
    java.lang.String toJSONString(java.util.Map) -> a
    java.lang.String toJSONString() -> a
    java.lang.String toJSONString(java.lang.String,java.lang.Object,java.lang.StringBuffer) -> a
    java.lang.String toString() -> toString
org.json.simple.JSONValue -> org.b.a.d:
    java.lang.Object parse(java.io.Reader) -> a
    java.lang.Object parse(java.lang.String) -> a
    java.lang.String toJSONString(java.lang.Object) -> a
    java.lang.String escape(java.lang.String) -> b
    void escape(java.lang.String,java.lang.StringBuffer) -> a
org.json.simple.parser.ContainerFactory -> org.b.a.a.a:
    java.util.Map createObjectContainer() -> a
    java.util.List creatArrayContainer() -> b
org.json.simple.parser.JSONParser -> org.b.a.a.b:
    java.util.LinkedList handlerStatusStack -> a
    org.json.simple.parser.Yylex lexer -> b
    org.json.simple.parser.Yytoken token -> c
    int status -> d
    int peekStatus(java.util.LinkedList) -> a
    void reset() -> a
    void reset(java.io.Reader) -> a
    int getPosition() -> b
    java.lang.Object parse(java.io.Reader) -> b
    java.lang.Object parse(java.io.Reader,org.json.simple.parser.ContainerFactory) -> a
    void nextToken() -> c
    java.util.Map createObjectContainer(org.json.simple.parser.ContainerFactory) -> a
    java.util.List createArrayContainer(org.json.simple.parser.ContainerFactory) -> b
org.json.simple.parser.ParseException -> org.b.a.a.c:
    int errorType -> a
    java.lang.Object unexpectedObject -> b
    int position -> c
    java.lang.String toString() -> toString
org.json.simple.parser.Yylex -> org.b.a.a.d:
    int[] ZZ_LEXSTATE -> a
    char[] ZZ_CMAP -> b
    int[] ZZ_ACTION -> c
    int[] ZZ_ROWMAP -> d
    int[] ZZ_TRANS -> e
    java.lang.String[] ZZ_ERROR_MSG -> f
    int[] ZZ_ATTRIBUTE -> g
    java.io.Reader zzReader -> h
    int zzState -> i
    int zzLexicalState -> j
    char[] zzBuffer -> k
    int zzMarkedPos -> l
    int zzCurrentPos -> m
    int zzStartRead -> n
    int zzEndRead -> o
    int yyline -> p
    int yychar -> q
    int yycolumn -> r
    boolean zzAtBOL -> s
    boolean zzAtEOF -> t
    java.lang.StringBuffer sb -> u
    int[] zzUnpackAction() -> d
    int zzUnpackAction(java.lang.String,int,int[]) -> a
    int[] zzUnpackRowMap() -> e
    int zzUnpackRowMap(java.lang.String,int,int[]) -> b
    int[] zzUnpackAttribute() -> f
    int zzUnpackAttribute(java.lang.String,int,int[]) -> c
    int getPosition() -> a
    char[] zzUnpackCMap(java.lang.String) -> a
    boolean zzRefill() -> g
    void yyreset(java.io.Reader) -> a
    void yybegin(int) -> a
    java.lang.String yytext() -> b
    char yycharat(int) -> b
    void zzScanError(int) -> c
    org.json.simple.parser.Yytoken yylex() -> c
org.json.simple.parser.Yytoken -> org.b.a.a.e:
    int type -> a
    java.lang.Object value -> b
    java.lang.String toString() -> toString
org.mrpdaemon.android.encdroidmc.CallUrlThread -> org.mrpdaemon.android.encdroidmc.a:
    long maxSizeForSynchronousDownload -> f
    java.lang.String url -> g
    boolean finished -> a
    long size -> b
    java.io.InputStream is -> c
    java.lang.String name -> d
    java.lang.String error -> e
    void run() -> run
org.mrpdaemon.android.encdroidmc.ConfigSyncActivity -> org.mrpdaemon.android.encdroidmc.ConfigSyncActivity:
    java.lang.String[] rules -> a
    java.util.List syncRules -> b
    android.widget.Spinner spin1 -> c
    boolean userSelect -> d
    int maxID -> l
    android.widget.EditText volumeName -> e
    android.widget.EditText volumePath -> f
    android.widget.EditText password -> g
    android.widget.CheckBox onlyWifiCheckBox -> h
    android.widget.CheckBox removeAfterCheckBox -> i
    android.widget.EditText localFolder -> j
    android.widget.EditText syncID -> k
    void onCreate(android.os.Bundle) -> onCreate
    void refresh(java.lang.String) -> a
    void localFolderButtonClick(android.view.View) -> localFolderButtonClick
    void saveButtonClick(android.view.View) -> saveButtonClick
    void runButtonClick(android.view.View) -> runButtonClick
    void deleteButtonClick(android.view.View) -> deleteButtonClick
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
org.mrpdaemon.android.encdroidmc.ConfigSyncActivity$1 -> org.mrpdaemon.android.encdroidmc.ConfigSyncActivity$1:
    org.mrpdaemon.android.encdroidmc.ConfigSyncActivity this$0 -> a
    void run() -> run
org.mrpdaemon.android.encdroidmc.EDAccountsActivity -> org.mrpdaemon.android.encdroidmc.EDAccountsActivity:
    org.mrpdaemon.android.encdroidmc.EDApplication mApp -> a
    org.mrpdaemon.android.encdroidmc.EDActionBar mActionBar -> b
    java.lang.String mErrDialogText -> c
    void onCreate(android.os.Bundle) -> onCreate
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    android.app.Dialog onCreateDialog(int) -> onCreateDialog
    void fill() -> a
    void onStart() -> onStart
    void onResume() -> onResume
org.mrpdaemon.android.encdroidmc.EDAccountsActivity$1 -> org.mrpdaemon.android.encdroidmc.EDAccountsActivity$1:
    org.mrpdaemon.android.encdroidmc.EDAccountsActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.mrpdaemon.android.encdroidmc.EDActionBar -> org.mrpdaemon.android.encdroidmc.b:
    android.app.ActionBar mActionBar -> a
    void checkAvailable() -> a
    void setDisplayHomeAsUpEnabled(boolean) -> a
    void invalidateOptionsMenu(android.app.Activity) -> a
org.mrpdaemon.android.encdroidmc.EDApplication -> org.mrpdaemon.android.encdroidmc.EDApplication:
    java.util.List volumeList -> a
    org.mrpdaemon.android.encdroidmc.EDDBHelper dbHelper -> c
    boolean mActionBarAvailable -> d
    org.mrpdaemon.android.encdroidmc.EDNativePBKDF2Provider mNativePBKDF2Provider -> e
    boolean mNativePBKDF2ProviderAvailable -> f
    android.content.BroadcastReceiver screenOffReceiver -> b
    void onCreate() -> onCreate
    boolean isActionBarAvailable() -> a
    java.util.List getVolumeList() -> b
    org.mrpdaemon.android.encdroidmc.EDDBHelper getDbHelper() -> c
    org.mrpdaemon.android.encdroidmc.EDNativePBKDF2Provider getNativePBKDF2Provider() -> d
org.mrpdaemon.android.encdroidmc.EDApplication$1 -> org.mrpdaemon.android.encdroidmc.EDApplication$1:
    org.mrpdaemon.android.encdroidmc.EDApplication this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.mrpdaemon.android.encdroidmc.EDAsyncTask -> org.mrpdaemon.android.encdroidmc.c:
    org.mrpdaemon.android.encdroidmc.asyncTasks.NotificationHelper myDialog -> a
    android.app.Activity myActivity -> b
    void setProgressDialog(org.mrpdaemon.android.encdroidmc.asyncTasks.NotificationHelper) -> a
    void setProgressDialog(android.app.Dialog) -> a
    void setActivity(android.app.Activity) -> a
    android.app.Activity getActivity() -> a
    void incrementProgressBy(long) -> a
    void setMaxProgress(long) -> b
    void setProgressMessage(java.lang.String) -> a
    void setProgress(long) -> c
org.mrpdaemon.android.encdroidmc.EDDBHelper -> org.mrpdaemon.android.encdroidmc.d:
    java.lang.String TAG -> a
    java.lang.String[] NO_ARGS -> b
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void createSyncRulesTable(android.database.sqlite.SQLiteDatabase) -> a
    void createKeyValueTable() -> d
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
    void insertVolume(org.mrpdaemon.android.encdroidmc.EDVolume) -> a
    void deleteVolume(org.mrpdaemon.android.encdroidmc.EDVolume) -> b
    void renameVolume(org.mrpdaemon.android.encdroidmc.EDVolume,java.lang.String) -> a
    void cacheKey(org.mrpdaemon.android.encdroidmc.EDVolume,byte[]) -> a
    void clearKey(org.mrpdaemon.android.encdroidmc.EDVolume) -> c
    void clearAllKeys() -> a
    byte[] getCachedKey(org.mrpdaemon.android.encdroidmc.EDVolume) -> d
    java.util.List getSyncRules() -> b
    void insertKeyValue(java.lang.String,java.lang.String) -> a
    void insertKeyValue(org.mrpdaemon.android.encdroidmc.tools.KeyValueBean) -> a
    void removeKeyValue(java.lang.String) -> a
    void addRule(fr.starn.FileSynchronizerRule) -> a
    void removeRule(int) -> a
    java.util.List getVolumes() -> c
    java.lang.String getKeyValueValue(java.lang.String) -> b
    org.mrpdaemon.android.encdroidmc.tools.KeyValueBean getKeyValue(java.lang.String) -> c
org.mrpdaemon.android.encdroidmc.EDFileChooserActivity -> org.mrpdaemon.android.encdroidmc.EDFileChooserActivity:
    android.os.Handler threadErrorHandler -> a
    org.mrpdaemon.android.encdroidmc.EDFileChooserAdapter mAdapter -> b
    java.util.List mCurFileList -> c
    int mMode -> d
    java.lang.String mCurrentDir -> e
    org.mrpdaemon.android.encdroidmc.fileProvider.EncdroidFileProvider mFileProvider -> f
    org.mrpdaemon.android.encdroidmc.EDApplication mApp -> g
    org.mrpdaemon.android.encdroidmc.EDActionBar mActionBar -> h
    android.widget.TextView mListHeader -> i
    java.lang.String mExportFileName -> j
    android.content.SharedPreferences mPrefs -> k
    void onCreate(android.os.Bundle) -> onCreate
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    android.app.Dialog onCreateDialog(int) -> onCreateDialog
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void returnResult(java.lang.String) -> a
    boolean fill() -> a
    void launchFillTask() -> b
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> onListItemClick
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    android.content.SharedPreferences access$0(org.mrpdaemon.android.encdroidmc.EDFileChooserActivity) -> a
    java.lang.String access$1(org.mrpdaemon.android.encdroidmc.EDFileChooserActivity) -> b
    void access$2(org.mrpdaemon.android.encdroidmc.EDFileChooserActivity,java.lang.String) -> a
    int access$3(org.mrpdaemon.android.encdroidmc.EDFileChooserActivity) -> c
    java.lang.String access$4(org.mrpdaemon.android.encdroidmc.EDFileChooserActivity) -> d
    android.widget.TextView access$5(org.mrpdaemon.android.encdroidmc.EDFileChooserActivity) -> e
    org.mrpdaemon.android.encdroidmc.EDFileChooserAdapter access$6(org.mrpdaemon.android.encdroidmc.EDFileChooserActivity) -> f
org.mrpdaemon.android.encdroidmc.EDFileChooserActivity$1 -> org.mrpdaemon.android.encdroidmc.EDFileChooserActivity$1:
    org.mrpdaemon.android.encdroidmc.EDFileChooserActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.mrpdaemon.android.encdroidmc.EDFileChooserActivity$2 -> org.mrpdaemon.android.encdroidmc.EDFileChooserActivity$2:
    org.mrpdaemon.android.encdroidmc.EDFileChooserActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.mrpdaemon.android.encdroidmc.EDFileChooserActivity$3 -> org.mrpdaemon.android.encdroidmc.EDFileChooserActivity$3:
    org.mrpdaemon.android.encdroidmc.EDFileChooserActivity this$0 -> a
    void run() -> run
org.mrpdaemon.android.encdroidmc.EDFileChooserActivity$4 -> org.mrpdaemon.android.encdroidmc.EDFileChooserActivity$4:
    org.mrpdaemon.android.encdroidmc.EDFileChooserActivity this$0 -> a
    void run() -> run
org.mrpdaemon.android.encdroidmc.EDFileChooserActivity$5 -> org.mrpdaemon.android.encdroidmc.EDFileChooserActivity$5:
    org.mrpdaemon.android.encdroidmc.EDFileChooserActivity this$0 -> a
    void run() -> run
org.mrpdaemon.android.encdroidmc.EDFileChooserActivity$EDFileChooserFillTask -> org.mrpdaemon.android.encdroidmc.e:
    android.widget.ProgressBar mProgBar -> b
    android.widget.ListView mListView -> c
    android.widget.LinearLayout mLayout -> d
    org.mrpdaemon.android.encdroidmc.EDFileChooserActivity this$0 -> a
    void onPreExecute() -> onPreExecute
    java.lang.Boolean doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Boolean) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mrpdaemon.android.encdroidmc.EDFileChooserAdapter -> org.mrpdaemon.android.encdroidmc.f:
    android.content.Context context -> a
    int resourceId -> b
    java.util.List items -> c
    org.mrpdaemon.android.encdroidmc.EDFileChooserItem getItem(int) -> a
    java.lang.String humanReadableByteCount(long,boolean) -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.Object getItem(int) -> getItem
org.mrpdaemon.android.encdroidmc.EDFileChooserAdapter$CheckboxChangeListener -> org.mrpdaemon.android.encdroidmc.g:
    org.mrpdaemon.android.encdroidmc.EDFileChooserItem item -> a
    org.mrpdaemon.android.encdroidmc.EDFileChooserAdapter this$0 -> b
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
org.mrpdaemon.android.encdroidmc.EDFileChooserItem -> org.mrpdaemon.android.encdroidmc.h:
    java.lang.String name -> a
    boolean isDirectory -> b
    java.lang.String path -> c
    org.mrpdaemon.sec.encfs.EncFSFile file -> d
    long size -> e
    boolean checked -> f
    android.graphics.Bitmap icon -> g
    java.lang.String getPath() -> a
    java.lang.String getName() -> b
    boolean isDirectory() -> c
    long getSize() -> d
    int compareTo(org.mrpdaemon.android.encdroidmc.EDFileChooserItem) -> a
    org.mrpdaemon.sec.encfs.EncFSFile getFile() -> e
    boolean isChecked() -> f
    void setChecked(boolean) -> a
    android.graphics.Bitmap getIcon() -> g
    void setIcon(android.graphics.Bitmap) -> a
    int compareTo(java.lang.Object) -> compareTo
org.mrpdaemon.android.encdroidmc.EDLogger -> org.mrpdaemon.android.encdroidmc.i:
    void logException(java.lang.String,java.lang.Exception) -> a
org.mrpdaemon.android.encdroidmc.EDNativePBKDF2Provider -> org.mrpdaemon.android.encdroidmc.j:
    void checkAvailable() -> a
    byte[] doPBKDF2(java.lang.String,int,byte[],int,int) -> a
org.mrpdaemon.android.encdroidmc.EDPreferenceActivity -> org.mrpdaemon.android.encdroidmc.EDPreferenceActivity:
    org.mrpdaemon.android.encdroidmc.EDApplication mApp -> a
    org.mrpdaemon.android.encdroidmc.EDActionBar mActionBar -> b
    void onCreate(android.os.Bundle) -> onCreate
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onResume() -> onResume
    void onPause() -> onPause
    void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String) -> onSharedPreferenceChanged
org.mrpdaemon.android.encdroidmc.EDPreferenceActivity$1 -> org.mrpdaemon.android.encdroidmc.EDPreferenceActivity$1:
    org.mrpdaemon.android.encdroidmc.EDPreferenceActivity this$0 -> a
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
org.mrpdaemon.android.encdroidmc.EDPreferenceActivity$2 -> org.mrpdaemon.android.encdroidmc.EDPreferenceActivity$2:
    org.mrpdaemon.android.encdroidmc.EDPreferenceActivity this$0 -> a
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
org.mrpdaemon.android.encdroidmc.EDProgressListener -> org.mrpdaemon.android.encdroidmc.k:
    org.mrpdaemon.android.encdroidmc.EDAsyncTask myTask -> a
    void handleEvent(int) -> a
    org.mrpdaemon.android.encdroidmc.EDAsyncTask access$0(org.mrpdaemon.android.encdroidmc.EDProgressListener) -> a
org.mrpdaemon.android.encdroidmc.EDProgressListener$1 -> org.mrpdaemon.android.encdroidmc.k$1:
    org.mrpdaemon.android.encdroidmc.EDProgressListener this$0 -> a
    void run() -> run
org.mrpdaemon.android.encdroidmc.EDProgressListener$2 -> org.mrpdaemon.android.encdroidmc.k$2:
    org.mrpdaemon.android.encdroidmc.EDProgressListener this$0 -> a
    void run() -> run
org.mrpdaemon.android.encdroidmc.EDProgressListener$3 -> org.mrpdaemon.android.encdroidmc.k$3:
    org.mrpdaemon.android.encdroidmc.EDProgressListener this$0 -> a
    void run() -> run
org.mrpdaemon.android.encdroidmc.EDVolume -> org.mrpdaemon.android.encdroidmc.l:
    java.lang.String name -> a
    java.lang.String path -> b
    int fileProviderId -> c
    java.lang.String serializedFileProviderParams -> d
    boolean isLocked -> e
    org.mrpdaemon.sec.encfs.EncFSVolume volume -> f
    void unlock(org.mrpdaemon.sec.encfs.EncFSVolume) -> a
    void lock() -> a
    java.lang.String getName() -> b
    void setName(java.lang.String) -> a
    java.lang.String getPath() -> c
    int getFileProviderId() -> d
    java.lang.String getSerializedFileProviderParams() -> e
    boolean isLocked() -> f
    org.mrpdaemon.sec.encfs.EncFSVolume getVolume() -> g
org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity -> org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity:
    org.mrpdaemon.android.encdroidmc.asyncTasks.ThumbnailsTask thumbnailsTask -> a
    android.graphics.Bitmap defaultFileBitmap -> s
    android.graphics.Bitmap defaultFolderBitmap -> t
    org.mrpdaemon.android.encdroidmc.EDFileChooserAdapter mAdapter -> u
    java.util.List mCurFileList -> b
    org.mrpdaemon.android.encdroidmc.EDVolume mEDVolume -> v
    org.mrpdaemon.sec.encfs.EncFSVolume mVolume -> w
    java.util.Stack mDirStack -> c
    org.mrpdaemon.sec.encfs.EncFSFile mCurEncFSDir -> d
    org.mrpdaemon.android.encdroidmc.EDApplication mApp -> e
    java.lang.String mErrDialogText -> f
    org.mrpdaemon.android.encdroidmc.asyncTasks.NotificationHelper mProgDialog -> x
    org.mrpdaemon.android.encdroidmc.EDAsyncTask mAsyncTask -> y
    int mAsyncTaskId -> z
    android.os.AsyncTask mFillTask -> A
    org.mrpdaemon.android.encdroidmc.asyncTasks.EDFileObserver mFileObserver -> g
    org.mrpdaemon.sec.encfs.EncFSFile mOpenFile -> B
    java.lang.String mOpenFilePath -> h
    java.lang.String mOpenFileName -> i
    java.lang.String mImportFileName -> C
    org.mrpdaemon.android.encdroidmc.EDFileChooserItem mSelectedFile -> j
    org.mrpdaemon.sec.encfs.EncFSFile mPasteFile -> k
    int mPasteMode -> l
    boolean mExternalStorageAvailable -> m
    boolean mExternalStorageWriteable -> n
    org.mrpdaemon.android.encdroidmc.EDActionBar mActionBar -> o
    android.widget.TextView mListHeader -> D
    org.mrpdaemon.sec.encfs.EncFSFile[] childEncFSFiles -> p
    boolean isCtxImportFromExternalApp -> q
    android.view.MenuItem saveExternalFileMenuItem -> E
    java.lang.String mSavedCurDirPath -> r
    java.lang.String mSavedPasteFilePath -> F
    java.lang.String mSavedProgBarStrArg -> G
    void onCreate(android.os.Bundle) -> onCreate
    java.lang.Object onRetainNonConfigurationInstance() -> onRetainNonConfigurationInstance
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onDestroy() -> onDestroy
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onPrepareDialog(int,android.app.Dialog) -> onPrepareDialog
    android.app.Dialog onCreateDialog(int) -> onCreateDialog
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> onListItemClick
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void exitToVolumeList() -> a
    void updateExternalStorageState() -> e
    void fill() -> b
    void refreshListViewGUI() -> c
    void launchFillTask(boolean) -> a
    void launchAsyncTask(int,java.io.File,org.mrpdaemon.sec.encfs.EncFSFile) -> a
    void launchAsyncTask(int,java.lang.String) -> a
    void createProgressBarForTask(int,java.lang.String) -> b
    void onRestart() -> onRestart
    void onResume() -> onResume
    android.graphics.Bitmap getIconForFile(android.app.Activity,java.lang.String) -> a
    org.mrpdaemon.sec.encfs.EncFSVolume getmVolume() -> d
    void access$0(org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity,int,java.lang.String) -> a
    org.mrpdaemon.android.encdroidmc.EDVolume access$1(org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity) -> a
    org.mrpdaemon.sec.encfs.EncFSVolume access$2(org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity) -> b
    android.widget.TextView access$3(org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity) -> c
    org.mrpdaemon.android.encdroidmc.EDFileChooserAdapter access$4(org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity) -> d
org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity$1 -> org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity$1:
    org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity this$0 -> a
    android.app.Dialog val$dialog -> b
    boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent) -> onEditorAction
org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity$10 -> org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity$2:
    org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity$11 -> org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity$3:
    org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity this$0 -> a
    android.view.inputmethod.InputMethodManager val$imm -> b
    android.widget.EditText val$input -> c
    void onShow(android.content.DialogInterface) -> onShow
org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity$12 -> org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity$4:
    org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity$13 -> org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity$5:
    org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity$14 -> org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity$6:
    org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity$15 -> org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity$7:
    org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity this$0 -> a
    boolean val$emptyDir -> b
    void run() -> run
org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity$16 -> org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity$8:
    org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity this$0 -> a
    void run() -> run
org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity$17 -> org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity$9:
    org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity this$0 -> a
    void run() -> run
org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity$2 -> org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity$10:
    org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity this$0 -> a
    android.app.Dialog val$dialog -> b
    boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent) -> onEditorAction
org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity$3 -> org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity$11:
    org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity this$0 -> a
    android.widget.EditText val$input -> b
    void onClick(android.content.DialogInterface,int) -> onClick
org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity$4 -> org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity$12:
    org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity$5 -> org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity$13:
    org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity this$0 -> a
    android.view.inputmethod.InputMethodManager val$imm -> b
    android.widget.EditText val$input -> c
    void onShow(android.content.DialogInterface) -> onShow
org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity$6 -> org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity$14:
    org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity this$0 -> a
    android.widget.EditText val$input -> b
    void onClick(android.content.DialogInterface,int) -> onClick
org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity$7 -> org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity$15:
    org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity$8 -> org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity$16:
    org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity this$0 -> a
    android.view.inputmethod.InputMethodManager val$imm -> b
    android.widget.EditText val$input -> c
    void onShow(android.content.DialogInterface) -> onShow
org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity$9 -> org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity$17:
    org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity this$0 -> a
    android.widget.EditText val$input -> b
    void onClick(android.content.DialogInterface,int) -> onClick
org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity$ActivityRestoreContext -> org.mrpdaemon.android.encdroidmc.m:
    org.mrpdaemon.android.encdroidmc.EDVolume savedVolume -> a
    org.mrpdaemon.android.encdroidmc.asyncTasks.EDFileObserver savedObserver -> b
    org.mrpdaemon.android.encdroidmc.EDFileChooserItem savedSelectedFile -> c
    org.mrpdaemon.android.encdroidmc.EDAsyncTask savedTask -> d
    org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity this$0 -> e
org.mrpdaemon.android.encdroidmc.EDVolumeListActivity -> org.mrpdaemon.android.encdroidmc.EDVolumeListActivity:
    org.mrpdaemon.android.encdroidmc.EDVolumeListAdapter mAdapter -> d
    org.mrpdaemon.android.encdroidmc.EDApplication mApp -> e
    org.mrpdaemon.android.encdroidmc.EDVolume mSelectedVolume -> f
    int mSelectedVolIdx -> g
    org.mrpdaemon.android.encdroidmc.EDAsyncTask mAsyncTask -> h
    int mAsyncTaskId -> i
    android.app.ProgressDialog mProgDialog -> j
    java.lang.String mVolPickerResult -> k
    java.lang.String mErrDialogText -> l
    java.lang.String mCreateVolumeName -> m
    int mVolumeOp -> n
    org.mrpdaemon.android.encdroidmc.fileProvider.EncdroidFileProvider mSelectedFileProvider2 -> o
    android.content.SharedPreferences mPrefs -> p
    java.lang.String mSavedProgBarStrArg -> q
    java.io.InputStream fileISImportedFromExternalApp -> a
    java.lang.String fileNameImportedFromExternalApp -> b
    long fileSizeImportedFromExternalApp -> c
    void onCreate(android.os.Bundle) -> onCreate
    java.lang.String getFileName(android.net.Uri) -> a
    long getFileSize(android.net.Uri) -> b
    java.lang.Object onRetainNonConfigurationInstance() -> onRetainNonConfigurationInstance
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onResume() -> onResume
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    void onPrepareDialog(int,android.app.Dialog) -> onPrepareDialog
    android.app.Dialog onCreateDialog(int) -> onCreateDialog
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> onListItemClick
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void launchFileChooser(int,org.mrpdaemon.android.encdroidmc.fileProvider.EncdroidFileProvider) -> a
    void launchCreateNewProvider(int,int) -> a
    void launchLoadExistingFileProviderForUnlock(org.mrpdaemon.android.encdroidmc.EDVolume) -> a
    void launchLoadExistingFileProviderForUnlock(java.lang.String) -> a
    void startActivityForResult(android.content.Intent,int) -> startActivityForResult
    void launchVolumeBrowser(int) -> a
    void refreshList() -> a
    void importVolume(java.lang.String,java.lang.String,org.mrpdaemon.android.encdroidmc.fileProvider.EncdroidFileProvider) -> a
    void deleteVolume(org.mrpdaemon.android.encdroidmc.EDVolume) -> b
    void renameVolume(org.mrpdaemon.android.encdroidmc.EDVolume,java.lang.String) -> a
    void unlockSelectedVolume() -> b
    void createProgressBarForTask(int,java.lang.String) -> a
    org.mrpdaemon.android.encdroidmc.EDVolume access$0(org.mrpdaemon.android.encdroidmc.EDVolumeListActivity) -> a
    org.mrpdaemon.android.encdroidmc.EDApplication access$1(org.mrpdaemon.android.encdroidmc.EDVolumeListActivity) -> b
    void access$2(org.mrpdaemon.android.encdroidmc.EDVolumeListActivity,java.lang.String) -> a
    android.app.ProgressDialog access$3(org.mrpdaemon.android.encdroidmc.EDVolumeListActivity) -> c
    org.mrpdaemon.android.encdroidmc.EDVolumeListAdapter access$4(org.mrpdaemon.android.encdroidmc.EDVolumeListActivity) -> d
    android.content.SharedPreferences access$5(org.mrpdaemon.android.encdroidmc.EDVolumeListActivity) -> e
    int access$6(org.mrpdaemon.android.encdroidmc.EDVolumeListActivity) -> f
    void access$7(org.mrpdaemon.android.encdroidmc.EDVolumeListActivity,int) -> a
    void access$8(org.mrpdaemon.android.encdroidmc.EDVolumeListActivity,java.lang.String,java.lang.String,org.mrpdaemon.android.encdroidmc.fileProvider.EncdroidFileProvider) -> a
    void access$9(org.mrpdaemon.android.encdroidmc.EDVolumeListActivity,org.mrpdaemon.android.encdroidmc.EDVolume) -> a
    void access$10(org.mrpdaemon.android.encdroidmc.EDVolumeListActivity,int,java.lang.String) -> a
    org.mrpdaemon.android.encdroidmc.fileProvider.EncdroidFileProvider access$11(org.mrpdaemon.android.encdroidmc.EDVolumeListActivity) -> g
    void access$12(org.mrpdaemon.android.encdroidmc.EDVolumeListActivity,org.mrpdaemon.android.encdroidmc.EDAsyncTask) -> a
    void access$13(org.mrpdaemon.android.encdroidmc.EDVolumeListActivity,int) -> b
    org.mrpdaemon.android.encdroidmc.EDAsyncTask access$14(org.mrpdaemon.android.encdroidmc.EDVolumeListActivity) -> h
    java.lang.String access$15(org.mrpdaemon.android.encdroidmc.EDVolumeListActivity) -> i
    java.lang.String access$16(org.mrpdaemon.android.encdroidmc.EDVolumeListActivity) -> j
    void access$17(org.mrpdaemon.android.encdroidmc.EDVolumeListActivity,org.mrpdaemon.android.encdroidmc.EDVolume,java.lang.String) -> a
    void access$18(org.mrpdaemon.android.encdroidmc.EDVolumeListActivity,java.lang.String) -> b
    int access$19(org.mrpdaemon.android.encdroidmc.EDVolumeListActivity) -> k
    void access$20(org.mrpdaemon.android.encdroidmc.EDVolumeListActivity,int,int) -> a
org.mrpdaemon.android.encdroidmc.EDVolumeListActivity$1 -> org.mrpdaemon.android.encdroidmc.EDVolumeListActivity$1:
    org.mrpdaemon.android.encdroidmc.EDVolumeListActivity this$0 -> a
    android.app.Dialog val$dialog -> b
    boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent) -> onEditorAction
org.mrpdaemon.android.encdroidmc.EDVolumeListActivity$10 -> org.mrpdaemon.android.encdroidmc.EDVolumeListActivity$2:
    org.mrpdaemon.android.encdroidmc.EDVolumeListActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.mrpdaemon.android.encdroidmc.EDVolumeListActivity$11 -> org.mrpdaemon.android.encdroidmc.EDVolumeListActivity$3:
    org.mrpdaemon.android.encdroidmc.EDVolumeListActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.mrpdaemon.android.encdroidmc.EDVolumeListActivity$12 -> org.mrpdaemon.android.encdroidmc.EDVolumeListActivity$4:
    org.mrpdaemon.android.encdroidmc.EDVolumeListActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.mrpdaemon.android.encdroidmc.EDVolumeListActivity$2 -> org.mrpdaemon.android.encdroidmc.EDVolumeListActivity$5:
    org.mrpdaemon.android.encdroidmc.EDVolumeListActivity this$0 -> a
    android.view.inputmethod.InputMethodManager val$imm -> b
    android.widget.EditText val$input -> c
    int val$myId -> d
    void onClick(android.content.DialogInterface,int) -> onClick
org.mrpdaemon.android.encdroidmc.EDVolumeListActivity$3 -> org.mrpdaemon.android.encdroidmc.EDVolumeListActivity$6:
    org.mrpdaemon.android.encdroidmc.EDVolumeListActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.mrpdaemon.android.encdroidmc.EDVolumeListActivity$4 -> org.mrpdaemon.android.encdroidmc.EDVolumeListActivity$7:
    org.mrpdaemon.android.encdroidmc.EDVolumeListActivity this$0 -> a
    android.view.inputmethod.InputMethodManager val$imm -> b
    android.widget.EditText val$input -> c
    void onShow(android.content.DialogInterface) -> onShow
org.mrpdaemon.android.encdroidmc.EDVolumeListActivity$5 -> org.mrpdaemon.android.encdroidmc.EDVolumeListActivity$8:
    org.mrpdaemon.android.encdroidmc.EDVolumeListActivity this$0 -> a
    android.widget.EditText val$input -> b
    int val$myId -> c
    void onClick(android.content.DialogInterface,int) -> onClick
org.mrpdaemon.android.encdroidmc.EDVolumeListActivity$6 -> org.mrpdaemon.android.encdroidmc.EDVolumeListActivity$9:
    org.mrpdaemon.android.encdroidmc.EDVolumeListActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.mrpdaemon.android.encdroidmc.EDVolumeListActivity$7 -> org.mrpdaemon.android.encdroidmc.EDVolumeListActivity$10:
    org.mrpdaemon.android.encdroidmc.EDVolumeListActivity this$0 -> a
    android.view.inputmethod.InputMethodManager val$imm -> b
    android.widget.EditText val$input -> c
    void onShow(android.content.DialogInterface) -> onShow
org.mrpdaemon.android.encdroidmc.EDVolumeListActivity$8 -> org.mrpdaemon.android.encdroidmc.EDVolumeListActivity$11:
    org.mrpdaemon.android.encdroidmc.EDVolumeListActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.mrpdaemon.android.encdroidmc.EDVolumeListActivity$9 -> org.mrpdaemon.android.encdroidmc.EDVolumeListActivity$12:
    org.mrpdaemon.android.encdroidmc.EDVolumeListActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.mrpdaemon.android.encdroidmc.EDVolumeListActivity$ActivityRestoreContext -> org.mrpdaemon.android.encdroidmc.n:
    org.mrpdaemon.android.encdroidmc.EDVolume savedVolume -> a
    org.mrpdaemon.android.encdroidmc.EDAsyncTask savedTask -> b
    org.mrpdaemon.android.encdroidmc.EDVolumeListActivity this$0 -> c
org.mrpdaemon.android.encdroidmc.EDVolumeListActivity$CreateVolumeTask -> org.mrpdaemon.android.encdroidmc.o:
    java.lang.String volumeName -> c
    java.lang.String volumePath -> d
    org.mrpdaemon.android.encdroidmc.fileProvider.EncdroidFileProvider fileProvider -> e
    java.lang.String password -> f
    org.mrpdaemon.android.encdroidmc.EDVolumeListActivity this$0 -> b
    java.lang.Boolean doInBackground(java.lang.String[]) -> a
    void onPostExecute(java.lang.Boolean) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mrpdaemon.android.encdroidmc.EDVolumeListActivity$UnlockVolumeTask -> org.mrpdaemon.android.encdroidmc.p:
    org.mrpdaemon.android.encdroidmc.fileProvider.EncdroidFileProvider volumeProvider -> d
    byte[] cachedKey -> e
    boolean invalidCachedKey -> b
    org.mrpdaemon.android.encdroidmc.EDVolumeListActivity this$0 -> c
    org.mrpdaemon.sec.encfs.EncFSVolume doInBackground(java.lang.String[]) -> a
    void onPostExecute(org.mrpdaemon.sec.encfs.EncFSVolume) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mrpdaemon.android.encdroidmc.EDVolumeListActivity$UnlockVolumeTask$1 -> org.mrpdaemon.android.encdroidmc.p$1:
    org.mrpdaemon.android.encdroidmc.EDVolumeListActivity$UnlockVolumeTask this$1 -> a
    org.mrpdaemon.android.encdroidmc.EDVolumeListActivity val$mActivity -> b
    void run() -> run
org.mrpdaemon.android.encdroidmc.EDVolumeListAdapter -> org.mrpdaemon.android.encdroidmc.q:
    android.content.Context context -> a
    int resourceId -> c
    java.util.List items -> b
    android.content.SharedPreferences mPrefs -> d
    org.mrpdaemon.android.encdroidmc.EDVolume getItem(int) -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    boolean isEnabled(int) -> isEnabled
    java.lang.Object getItem(int) -> getItem
org.mrpdaemon.android.encdroidmc.Logger -> org.mrpdaemon.android.encdroidmc.r:
    boolean enabled -> a
    void log(java.lang.String) -> a
    void log(java.lang.Throwable) -> a
org.mrpdaemon.android.encdroidmc.MimeManagement -> org.mrpdaemon.android.encdroidmc.s:
    java.util.Map videosMimes -> a
    java.util.Map audioMimes -> b
    java.util.Map imageMimes -> c
    java.util.Map textMimes -> d
    java.lang.String getMimeType(java.lang.String) -> a
    boolean isVideo(java.lang.String) -> b
    boolean isAudio(java.lang.String) -> c
    boolean isImage(java.lang.String) -> d
    boolean isText(java.lang.String) -> e
    java.lang.String getExtension(java.lang.String) -> f
org.mrpdaemon.android.encdroidmc.MusicPlayer -> org.mrpdaemon.android.encdroidmc.MusicPlayer:
    android.media.MediaPlayer mediaPlayer -> d
    int playedIndex -> e
    java.util.List playableFiles -> f
    android.widget.SeekBar seekBar -> g
    android.view.View$OnClickListener previousListener -> a
    android.view.View$OnClickListener nextListener -> b
    android.view.View$OnClickListener playPauseListener -> c
    void onCreate(android.os.Bundle) -> onCreate
    void onStop() -> onStop
    void play(org.mrpdaemon.sec.encfs.EncFSFile) -> a
    void onCompletion(android.media.MediaPlayer) -> onCompletion
    void run() -> run
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
    int access$0(org.mrpdaemon.android.encdroidmc.MusicPlayer) -> a
    void access$1(org.mrpdaemon.android.encdroidmc.MusicPlayer,int) -> a
    java.util.List access$2(org.mrpdaemon.android.encdroidmc.MusicPlayer) -> b
    void access$3(org.mrpdaemon.android.encdroidmc.MusicPlayer,org.mrpdaemon.sec.encfs.EncFSFile) -> a
    android.media.MediaPlayer access$4(org.mrpdaemon.android.encdroidmc.MusicPlayer) -> c
    android.widget.SeekBar access$5(org.mrpdaemon.android.encdroidmc.MusicPlayer) -> d
org.mrpdaemon.android.encdroidmc.MusicPlayer$1 -> org.mrpdaemon.android.encdroidmc.MusicPlayer$1:
    org.mrpdaemon.android.encdroidmc.MusicPlayer this$0 -> a
    void onClick(android.view.View) -> onClick
org.mrpdaemon.android.encdroidmc.MusicPlayer$2 -> org.mrpdaemon.android.encdroidmc.MusicPlayer$2:
    org.mrpdaemon.android.encdroidmc.MusicPlayer this$0 -> a
    void onClick(android.view.View) -> onClick
org.mrpdaemon.android.encdroidmc.MusicPlayer$3 -> org.mrpdaemon.android.encdroidmc.MusicPlayer$3:
    org.mrpdaemon.android.encdroidmc.MusicPlayer this$0 -> a
    void onClick(android.view.View) -> onClick
org.mrpdaemon.android.encdroidmc.MusicPlayer$Play -> org.mrpdaemon.android.encdroidmc.t:
    org.mrpdaemon.sec.encfs.EncFSFile fileToPlay -> a
    org.mrpdaemon.android.encdroidmc.MusicPlayer this$0 -> b
    void run() -> run
org.mrpdaemon.android.encdroidmc.PinCodeActivity -> org.mrpdaemon.android.encdroidmc.PinCodeActivity:
    android.widget.EditText password -> a
    java.lang.String context -> c
    java.lang.String pin1 -> d
    java.lang.String pin2 -> e
    boolean screenHasBeenOff -> b
    void onCreate(android.os.Bundle) -> onCreate
    void setPadVisibility(boolean) -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void clic0(android.view.View) -> clic0
    void clic1(android.view.View) -> clic1
    void clic2(android.view.View) -> clic2
    void clic3(android.view.View) -> clic3
    void clic4(android.view.View) -> clic4
    void clic5(android.view.View) -> clic5
    void clic6(android.view.View) -> clic6
    void clic7(android.view.View) -> clic7
    void clic8(android.view.View) -> clic8
    void clic9(android.view.View) -> clic9
    void removePin(android.view.View) -> removePin
    void clicok(android.view.View) -> clicok
    void okAction() -> a
    void pinOK() -> b
    void pinKO() -> c
    void clicClear(android.view.View) -> clicClear
    boolean needPinCode(android.content.Context) -> a
    boolean hasPinCode(android.content.Context) -> b
    void run() -> run
    void access$0(org.mrpdaemon.android.encdroidmc.PinCodeActivity,boolean) -> a
org.mrpdaemon.android.encdroidmc.PinCodeActivity$1 -> org.mrpdaemon.android.encdroidmc.PinCodeActivity$1:
    org.mrpdaemon.android.encdroidmc.PinCodeActivity this$0 -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
org.mrpdaemon.android.encdroidmc.PinCodeActivity$2 -> org.mrpdaemon.android.encdroidmc.PinCodeActivity$2:
    org.mrpdaemon.android.encdroidmc.PinCodeActivity this$0 -> a
    void run() -> run
org.mrpdaemon.android.encdroidmc.PinCodeActivity$3 -> org.mrpdaemon.android.encdroidmc.PinCodeActivity$3:
    org.mrpdaemon.android.encdroidmc.PinCodeActivity this$0 -> a
    void run() -> run
org.mrpdaemon.android.encdroidmc.ThreadErrorHandler -> org.mrpdaemon.android.encdroidmc.u:
    android.content.Context ctx -> a
    void handleMessage(android.os.Message) -> handleMessage
org.mrpdaemon.android.encdroidmc.asyncTasks.ActivityRestoreTask -> org.mrpdaemon.android.encdroidmc.a.a:
    org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity volumeActivity -> b
    android.os.Bundle savedInstanceState -> c
    java.lang.Boolean doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Boolean) -> a
    java.util.Stack getFileStackForEncFSDir(org.mrpdaemon.sec.encfs.EncFSFile) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mrpdaemon.android.encdroidmc.asyncTasks.AsyncTasksUtil -> org.mrpdaemon.android.encdroidmc.a.b:
    boolean copyStreams(java.io.InputStream,java.io.OutputStream,org.mrpdaemon.android.encdroidmc.EDAsyncTask) -> a
    boolean exportFile(org.mrpdaemon.sec.encfs.EncFSFile,java.io.File,org.mrpdaemon.android.encdroidmc.EDAsyncTask,long) -> a
    boolean importFile(java.io.InputStream,long,org.mrpdaemon.sec.encfs.EncFSFile,org.mrpdaemon.android.encdroidmc.EDAsyncTask) -> a
org.mrpdaemon.android.encdroidmc.asyncTasks.EDFileObserver -> org.mrpdaemon.android.encdroidmc.a.c:
    java.io.File f -> a
    long lastModif -> b
    boolean wasModified() -> a
    java.lang.String getPath() -> b
org.mrpdaemon.android.encdroidmc.asyncTasks.ExportFileTask -> org.mrpdaemon.android.encdroidmc.a.d:
    org.mrpdaemon.sec.encfs.EncFSFile srcFile -> b
    java.io.File dstFile -> c
    org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity volumeBrowserActivity -> d
    java.lang.Boolean doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Boolean) -> a
    boolean recursiveExport(org.mrpdaemon.sec.encfs.EncFSFile,java.io.File,org.mrpdaemon.android.encdroidmc.EDAsyncTask) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mrpdaemon.android.encdroidmc.asyncTasks.FillTask -> org.mrpdaemon.android.encdroidmc.a.e:
    android.widget.ProgressBar mProgBar -> a
    android.widget.ListView mListView -> b
    android.widget.LinearLayout mLayout -> c
    boolean genThumbnails -> d
    org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity volumeBrowserActivity -> e
    void onPreExecute() -> onPreExecute
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Void) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mrpdaemon.android.encdroidmc.asyncTasks.ImportFileTask -> org.mrpdaemon.android.encdroidmc.a.f:
    org.mrpdaemon.sec.encfs.EncFSVolume volume -> c
    java.io.File srcFile -> d
    org.mrpdaemon.sec.encfs.EncFSFile dstFile -> e
    java.lang.String destFolder -> f
    android.content.Context ctx -> b
    int nbFilesImported -> g
    int nbFilesRemoved -> h
    boolean removeOriginalFile -> i
    org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity volumeActivity -> j
    void onPreExecute() -> onPreExecute
    java.lang.Boolean doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Boolean) -> a
    int countFiles(java.io.File) -> a
    boolean recursiveImport(java.io.File,org.mrpdaemon.sec.encfs.EncFSFile,org.mrpdaemon.android.encdroidmc.EDAsyncTask) -> a
    void showMessage(java.lang.String) -> b
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mrpdaemon.android.encdroidmc.asyncTasks.MetadataOpTask -> org.mrpdaemon.android.encdroidmc.a.g:
    org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity volumeActivity -> b
    int mode -> c
    java.lang.String strArg -> d
    java.lang.Boolean doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Boolean) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mrpdaemon.android.encdroidmc.asyncTasks.NotificationHelper -> org.mrpdaemon.android.encdroidmc.a.h:
    android.content.Context mContext -> b
    int NOTIFICATION_ID -> c
    int nbNotif -> d
    android.app.NotificationManager mNotificationManager -> e
    android.support.v4.app.NotificationCompat$Builder builder -> f
    long sum -> a
    long max -> g
    int percent -> h
    boolean isCanceled -> i
    void createNotification() -> a
    void show() -> b
    void progressUpdate() -> c
    void incrementProgressBy(long) -> a
    void setProgress(long) -> b
    void setMax(long) -> c
    void dismiss() -> d
    boolean isShowing() -> e
    void setTitle(java.lang.String) -> a
org.mrpdaemon.android.encdroidmc.asyncTasks.PasteFileTask -> org.mrpdaemon.android.encdroidmc.a.i:
    org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity volumeActivity -> b
    java.lang.Boolean doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Boolean) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mrpdaemon.android.encdroidmc.asyncTasks.SaveFileTask -> org.mrpdaemon.android.encdroidmc.a.j:
    org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity volumeActivity -> d
    java.io.InputStream is -> b
    long length -> c
    org.mrpdaemon.sec.encfs.EncFSFile dstFile -> e
    void onPreExecute() -> onPreExecute
    java.lang.Boolean doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Boolean) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mrpdaemon.android.encdroidmc.asyncTasks.SaveFromFSFileTask -> org.mrpdaemon.android.encdroidmc.a.k:
    java.io.File srcFile -> b
    org.mrpdaemon.sec.encfs.EncFSFile dstFile -> c
    org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity volumeActivity -> d
    java.lang.Boolean doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Boolean) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mrpdaemon.android.encdroidmc.asyncTasks.ThumbnailsTask -> org.mrpdaemon.android.encdroidmc.a.l:
    org.mrpdaemon.android.encdroidmc.EDFileChooserItem fileToRefresh -> c
    org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity volumeBrowserActivity -> d
    boolean displayExistingThumbnailOnly -> e
    org.mrpdaemon.android.encdroidmc.asyncTasks.NotificationHelper n -> a
    java.lang.String thumbnailAbsolutePath -> b
    boolean generateVideoThumbnails -> f
    void onPreExecute() -> onPreExecute
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    void save(org.mrpdaemon.sec.encfs.EncFSFile,java.lang.String,fr.starn.ThumbnailManager) -> a
    org.mrpdaemon.android.encdroidmc.EDFileChooserItem getGuiItemFromEncFSFile(org.mrpdaemon.sec.encfs.EncFSFile) -> a
    void updateallFileIcons(fr.starn.ThumbnailManager) -> a
    void updateFileIcon(fr.starn.ThumbnailManager,org.mrpdaemon.sec.encfs.EncFSFile) -> a
    void onPostExecute(java.lang.Void) -> a
    android.graphics.Bitmap createImageThumbnail(byte[]) -> a
    void cancel() -> a
    android.graphics.Bitmap createVideoThumbnail(java.lang.String,int) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mrpdaemon.android.encdroidmc.asyncTasks.ViewFileTask -> org.mrpdaemon.android.encdroidmc.a.m:
    org.mrpdaemon.sec.encfs.EncFSFile srcFile -> b
    java.io.File dstFile -> c
    boolean doNotLaunchPostExecute -> d
    org.mrpdaemon.sec.encfs.EncFSFile[] childEncFSFiles -> e
    org.mrpdaemon.android.encdroidmc.EDVolumeBrowserActivity volumeActivity -> f
    java.lang.Boolean doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Boolean) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mrpdaemon.android.encdroidmc.fileProvider.DownloadableWithOutputStream -> org.mrpdaemon.android.encdroidmc.fileProvider.a:
    void fsDownload(java.lang.String,java.io.OutputStream,long) -> fsDownload
org.mrpdaemon.android.encdroidmc.fileProvider.EncdroidFileProvider -> org.mrpdaemon.android.encdroidmc.fileProvider.b:
    java.util.List providerListCache -> providerListCache
    java.lang.String providerPackage -> providerPackage
    java.lang.String providerClassStartingName -> providerClassStartingName
    org.mrpdaemon.android.encdroidmc.fileProvider.EncdroidFileProvider lastCreatedProvider -> lastCreatedProvider
    java.util.Map paramValues -> paramValues
    boolean ready -> ready
    java.lang.String rootPath -> rootPath
    java.util.Map listFilesCache -> listFilesCache
    boolean working -> working
    java.util.List getParamsToAsk() -> getParamsToAsk
    void initialize(java.lang.String) -> initialize
    java.util.List fsList(java.lang.String) -> fsList
    void fsUpload(java.lang.String,java.io.PipedInputStream,long) -> fsUpload
    java.io.InputStream fsDownload(java.lang.String,long) -> fsDownload
    void changeRootPath(java.lang.String) -> changeRootPath
    void init(java.lang.String) -> init
    java.lang.String getAbsolutePath(java.lang.String) -> getAbsolutePath
    java.lang.String getRelativePathFromAbsolutePath(java.lang.String) -> getRelativePathFromAbsolutePath
    void clearSession() -> clearSession
    java.io.InputStream openInputStream(java.lang.String,long) -> openInputStream
    java.io.OutputStream openOutputStream(java.lang.String,long) -> openOutputStream
    org.mrpdaemon.android.encdroidmc.fileProvider.EncdroidFileProvider getProvider(int,java.lang.String,java.lang.String) -> getProvider
    java.util.List listFiles(java.lang.String) -> listFiles
    java.util.List listFiles(java.lang.String,boolean) -> listFiles
    org.mrpdaemon.android.encdroidmc.fileProvider.EncdroidFileProvider getProviderById(int) -> getProviderById
    org.mrpdaemon.android.encdroidmc.fileProvider.EncdroidFileProvider getProviderByIndex(int) -> getProviderByIndex
    org.mrpdaemon.android.encdroidmc.fileProvider.EncdroidFileProvider getLocalFileSystemProvider() -> getLocalFileSystemProvider
    org.mrpdaemon.android.encdroidmc.fileProvider.EncdroidFileProvider getExternalFileSystemProvider() -> getExternalFileSystemProvider
    java.util.List getAvailableProviders() -> getAvailableProviders
    java.util.Map getParamValues() -> getParamValues
    void setParamValues(java.util.Map) -> setParamValues
    boolean isReady() -> isReady
    void setReady(boolean) -> setReady
    java.lang.String serializeParams() -> serializeParams
    java.util.Map unserializeParams(java.lang.String) -> unserializeParams
    boolean allowRemoteCopy() -> allowRemoteCopy
    void waitConnexionAvailability() -> waitConnexionAvailability
    void sleep(long) -> sleep
    java.lang.String getUrlPrefix() -> getUrlPrefix
    void access$0(boolean) -> access$0
org.mrpdaemon.android.encdroidmc.fileProvider.EncdroidFileProvider$DownloadStreamThread -> org.mrpdaemon.android.encdroidmc.fileProvider.c:
    java.io.PipedOutputStream outputStream -> a
    java.lang.String path -> b
    long startIndex -> c
    org.mrpdaemon.android.encdroidmc.fileProvider.EncdroidFileProvider this$0 -> d
    void run() -> run
org.mrpdaemon.android.encdroidmc.fileProvider.EncdroidFileProvider$StreamThread -> org.mrpdaemon.android.encdroidmc.fileProvider.d:
    java.io.PipedInputStream stream -> a
    java.lang.String path -> b
    long length -> c
    org.mrpdaemon.android.encdroidmc.fileProvider.EncdroidFileProvider this$0 -> d
    void run() -> run
org.mrpdaemon.android.encdroidmc.fileProvider.EncdroidProviderParameter -> org.mrpdaemon.android.encdroidmc.fileProvider.e:
    java.lang.String key -> a
    java.lang.String label -> b
    java.lang.String title -> c
    boolean isPassword -> d
    java.lang.String getKey() -> a
    java.lang.String getLabel() -> b
    java.lang.String getTitle() -> c
    boolean isPassword() -> d
org.mrpdaemon.android.encdroidmc.fileProvider.FileProviderActivity -> org.mrpdaemon.android.encdroidmc.fileProvider.FileProviderActivity:
    org.mrpdaemon.android.encdroidmc.fileProvider.EncdroidFileProvider instance -> d
    int requestCode -> e
    java.lang.String providerParams -> f
    int CONTEXT_ACION_CREATE_NEW_PROVIDER_INSTANCE_FOR_VOLUME_IMPORT -> a
    int CONTEXT_ACION_CREATE_NEW_PROVIDER_INSTANCE_FOR_VOLUME_CREATION -> b
    int CONTEXT_ACION_LOAD_EXISTING_PROVIDER_INSTANCE_FOR_UNLOCK_VOLUME -> c
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void askParams() -> a
    void finishFileProviderInit() -> b
    void showDialog(java.util.List) -> a
    void access$0(org.mrpdaemon.android.encdroidmc.fileProvider.FileProviderActivity,java.util.List) -> a
org.mrpdaemon.android.encdroidmc.fileProvider.FileProviderActivity$1 -> org.mrpdaemon.android.encdroidmc.fileProvider.FileProviderActivity$1:
    org.mrpdaemon.android.encdroidmc.fileProvider.FileProviderActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.mrpdaemon.android.encdroidmc.fileProvider.FileProviderActivity$ClickListener -> org.mrpdaemon.android.encdroidmc.fileProvider.f:
    org.mrpdaemon.android.encdroidmc.fileProvider.EncdroidFileProvider instance -> a
    android.widget.EditText input -> b
    android.app.Activity ctx -> c
    java.util.List questions -> d
    org.mrpdaemon.android.encdroidmc.fileProvider.FileProviderActivity this$0 -> e
    void onClick(android.content.DialogInterface,int) -> onClick
org.mrpdaemon.android.encdroidmc.fileProvider.FileProviderActivity$linkFileProvider -> org.mrpdaemon.android.encdroidmc.fileProvider.g:
    org.mrpdaemon.android.encdroidmc.fileProvider.Linkable linkable -> b
    org.mrpdaemon.android.encdroidmc.fileProvider.FileProviderActivity this$0 -> a
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mrpdaemon.android.encdroidmc.fileProvider.IStatefullSession -> org.mrpdaemon.android.encdroidmc.fileProvider.h:
    void clearSession() -> clearSession
org.mrpdaemon.android.encdroidmc.fileProvider.Linkable -> org.mrpdaemon.android.encdroidmc.fileProvider.i:
    boolean isLinked(android.app.Activity) -> isLinked
    void link(android.app.Activity) -> link
    boolean onResume(android.app.Activity) -> onResume
org.mrpdaemon.android.encdroidmc.fileProvider.UploadableWithOutputStream -> org.mrpdaemon.android.encdroidmc.fileProvider.j:
    java.io.OutputStream fsUpload(java.lang.String,long) -> fsUpload
org.mrpdaemon.android.encdroidmc.forceCloseManagement.CrashActivity -> org.mrpdaemon.android.encdroidmc.forceCloseManagement.CrashActivity:
    void onCreate(android.os.Bundle) -> onCreate
org.mrpdaemon.android.encdroidmc.forceCloseManagement.ExceptionHandler -> org.mrpdaemon.android.encdroidmc.forceCloseManagement.a:
    android.content.Context myContext -> a
    void uncaughtException(java.lang.Thread,java.lang.Throwable) -> uncaughtException
org.mrpdaemon.android.encdroidmc.tools.KeyValueBean -> org.mrpdaemon.android.encdroidmc.b.a:
    java.lang.String key -> a
    java.lang.String value -> b
    java.lang.String getKey() -> a
    java.lang.String getValue() -> b
org.mrpdaemon.android.encdroidmc.tools.SecureDeleteThread -> org.mrpdaemon.android.encdroidmc.b.b:
    java.io.File file -> a
    void run() -> run
org.mrpdaemon.sec.encfs.BasicFilenameDecryptionStrategy -> org.mrpdaemon.a.a.a:
    byte[] decryptConcrete(org.mrpdaemon.sec.encfs.EncFSVolume,byte[],byte[]) -> a
    java.lang.String decryptImpl(java.lang.String) -> a
    java.lang.String decryptPost(byte[]) -> a
    void verifyDecryptionWorked(org.mrpdaemon.sec.encfs.EncFSVolume,byte[],byte[],byte[]) -> a
org.mrpdaemon.sec.encfs.BasicFilenameEncryptionStrategy -> org.mrpdaemon.a.a.b:
    byte[] encryptConcrete(org.mrpdaemon.sec.encfs.EncFSVolume,byte[],byte[]) -> a
    java.lang.String encryptImpl(java.lang.String) -> a
    byte[] getPaddedDecFilename(byte[]) -> a
    java.lang.String getBase256Filename(byte[],byte[]) -> a
    byte[] getMac16(org.mrpdaemon.sec.encfs.EncFSVolume,byte[],byte[]) -> b
org.mrpdaemon.sec.encfs.BlockCrypto -> org.mrpdaemon.a.a.c:
    javax.crypto.Cipher newBlockCipher() -> a
    byte[] blockOperation(org.mrpdaemon.sec.encfs.EncFSVolume,byte[],byte[],int) -> a
    byte[] blockDecrypt(org.mrpdaemon.sec.encfs.EncFSVolume,byte[],byte[]) -> a
    byte[] blockEncrypt(org.mrpdaemon.sec.encfs.EncFSVolume,byte[],byte[]) -> b
org.mrpdaemon.sec.encfs.BlockFilenameDecryptionStrategy -> org.mrpdaemon.a.a.d:
    byte[] decryptConcrete(org.mrpdaemon.sec.encfs.EncFSVolume,byte[],byte[]) -> a
    java.lang.String decryptPost(byte[]) -> a
org.mrpdaemon.sec.encfs.BlockFilenameEncryptionStrategy -> org.mrpdaemon.a.a.e:
    byte[] encryptConcrete(org.mrpdaemon.sec.encfs.EncFSVolume,byte[],byte[]) -> a
    byte[] getPaddedDecFilename(byte[]) -> a
org.mrpdaemon.sec.encfs.EncFSBase64 -> org.mrpdaemon.a.a.f:
    byte[] _STANDARD_ALPHABET -> b
    byte[] _STANDARD_DECODABET -> c
    byte[] _URL_SAFE_ALPHABET -> d
    byte[] _URL_SAFE_DECODABET -> e
    byte[] _ORDERED_ALPHABET -> f
    byte[] _ORDERED_DECODABET -> g
    byte[] _ENCFS_DECODABET -> h
    char[] B642AsciiTable -> i
    boolean $assertionsDisabled -> a
    byte[] getAlphabet(int) -> b
    byte[] getDecodabet(int) -> c
    byte[] encode3to4(byte[],byte[],int,int) -> c
    byte[] encode3to4(byte[],int,int,byte[],int,int) -> a
    java.lang.String encodeBytes(byte[]) -> a
    java.lang.String encodeBytes(byte[],int) -> a
    byte[] encodeBytesToBytes(byte[],int,int,int) -> a
    int decode4to3(byte[],byte[],int,int) -> d
    byte[] decode(byte[],int,int) -> a
    byte[] decode(java.lang.String) -> a
    byte[] decode(java.lang.String,int) -> a
    byte[] encodeEncfs(byte[]) -> b
    byte[] changeBase2(byte[],int,int) -> b
    void B64ToAscii(byte[]) -> d
    byte[] decodeEncfs(byte[]) -> c
    byte[] access$0(int) -> a
    int access$2(byte[],byte[],int,int) -> a
    byte[] access$3(byte[],byte[],int,int) -> b
org.mrpdaemon.sec.encfs.EncFSBase64$OutputStream -> org.mrpdaemon.a.a.g:
    boolean encode -> a
    int position -> b
    byte[] buffer -> c
    int bufferLength -> d
    int lineLength -> e
    boolean breakLines -> f
    byte[] b4 -> g
    boolean suspendEncoding -> h
    int options -> i
    byte[] decodabet -> j
    void write(int) -> write
    void write(byte[],int,int) -> write
    void flushBase64() -> a
    void close() -> close
org.mrpdaemon.sec.encfs.EncFSChecksumException -> org.mrpdaemon.a.a.h:
org.mrpdaemon.sec.encfs.EncFSConfig -> org.mrpdaemon.a.a.i:
    int volumeKeySizeInBits -> a
    int encryptedFileBlockSizeInBytes -> b
    boolean useUniqueIV -> c
    boolean chainedNameIV -> d
    boolean holesAllowedInFiles -> e
    int encodedKeyLengthInBytes -> f
    java.lang.String base64EncodedVolumeKey -> g
    int saltLengthBytes -> h
    java.lang.String base64Salt -> i
    int iterationForPasswordKeyDerivationCount -> j
    org.mrpdaemon.sec.encfs.EncFSFilenameEncryptionAlgorithm filenameAlgorithm -> k
    int numberOfMACBytesForEachFileBlock -> l
    int numberOfRandomBytesInEachMACHeader -> m
    boolean supportedExternalIVChaining -> n
    int getVolumeKeySizeInBits() -> a
    void setVolumeKeySizeInBits(int) -> a
    int getEncryptedFileBlockSizeInBytes() -> b
    void setEncryptedFileBlockSizeInBytes(int) -> b
    boolean isUseUniqueIV() -> c
    void setUseUniqueIV(boolean) -> a
    boolean isChainedNameIV() -> d
    void setChainedNameIV(boolean) -> b
    boolean isHolesAllowedInFiles() -> e
    void setHolesAllowedInFiles(boolean) -> c
    int getEncodedKeyLengthInBytes() -> f
    void setEncodedKeyLengthInBytes(int) -> c
    java.lang.String getBase64EncodedVolumeKey() -> g
    void setBase64EncodedVolumeKey(java.lang.String) -> a
    int getSaltLengthBytes() -> h
    void setSaltLengthBytes(int) -> d
    java.lang.String getBase64Salt() -> i
    void setBase64Salt(java.lang.String) -> b
    int getIterationForPasswordKeyDerivationCount() -> j
    void setIterationForPasswordKeyDerivationCount(int) -> e
    org.mrpdaemon.sec.encfs.EncFSFilenameEncryptionAlgorithm getFilenameAlgorithm() -> k
    void setFilenameAlgorithm(org.mrpdaemon.sec.encfs.EncFSFilenameEncryptionAlgorithm) -> a
    int getNumberOfMACBytesForEachFileBlock() -> l
    void setNumberOfMACBytesForEachFileBlock(int) -> f
    int getNumberOfRandomBytesInEachMACHeader() -> m
    void setNumberOfRandomBytesInEachMACHeader(int) -> g
    boolean isSupportedExternalIVChaining() -> n
    void setSupportedExternalIVChaining(boolean) -> d
    void validate() -> o
    java.lang.String toString() -> toString
org.mrpdaemon.sec.encfs.EncFSConfigFactory -> org.mrpdaemon.a.a.j:
    org.mrpdaemon.sec.encfs.EncFSConfig createDefault() -> a
org.mrpdaemon.sec.encfs.EncFSConfigParser -> org.mrpdaemon.a.a.k:
    java.lang.String getNodeValue(org.w3c.dom.Node) -> a
    org.mrpdaemon.sec.encfs.EncFSConfig parseConfig(org.mrpdaemon.sec.encfs.EncFSFileProvider,java.lang.String) -> a
    org.mrpdaemon.sec.encfs.EncFSConfig parseFile(java.io.InputStream) -> a
org.mrpdaemon.sec.encfs.EncFSConfigWriter -> org.mrpdaemon.a.a.l:
    java.lang.String getLibraryVersion() -> a
    java.lang.String createConfigFileContents(org.mrpdaemon.sec.encfs.EncFSConfig) -> a
    void writeConfig(org.mrpdaemon.sec.encfs.EncFSFileProvider,org.mrpdaemon.sec.encfs.EncFSConfig) -> a
org.mrpdaemon.sec.encfs.EncFSCorruptDataException -> org.mrpdaemon.a.a.m:
org.mrpdaemon.sec.encfs.EncFSCrypto -> org.mrpdaemon.a.a.n:
    int[] $SWITCH_TABLE$org$mrpdaemon$sec$encfs$EncFSFilenameEncryptionAlgorithm -> a
    javax.crypto.Mac newMac(java.security.Key) -> a
    java.security.Key newKey(byte[]) -> a
    javax.crypto.Cipher getCipher(java.lang.String) -> a
    javax.crypto.spec.IvParameterSpec newIvSpec(javax.crypto.Mac,byte[],byte[]) -> d
    void cipherInit(java.security.Key,javax.crypto.Mac,int,javax.crypto.Cipher,byte[],byte[]) -> a
    void cipherInit(org.mrpdaemon.sec.encfs.EncFSVolume,int,javax.crypto.Cipher,byte[]) -> a
    byte[] encryptKeyData(byte[],byte[],java.security.Key,javax.crypto.Mac,byte[]) -> a
    byte[] getBytesForBlockAlgorithm(java.lang.String) -> b
    java.lang.String decodeName(org.mrpdaemon.sec.encfs.EncFSVolume,java.lang.String,java.lang.String) -> a
    java.lang.String encodeName(org.mrpdaemon.sec.encfs.EncFSVolume,java.lang.String,java.lang.String) -> b
    java.lang.String encodePath(org.mrpdaemon.sec.encfs.EncFSVolume,java.lang.String,java.lang.String) -> c
    byte[] mac64(javax.crypto.Mac,byte[],int) -> a
    byte[] mac64(javax.crypto.Mac,byte[],int,int) -> a
    byte[] mac64(javax.crypto.Mac,byte[]) -> b
    byte[] mac32(javax.crypto.Mac,byte[]) -> c
    byte[] mac16(javax.crypto.Mac,byte[]) -> a
    byte[] mac64(javax.crypto.Mac,byte[],byte[]) -> a
    byte[] mac32(javax.crypto.Mac,byte[],byte[]) -> b
    byte[] mac16(javax.crypto.Mac,byte[],byte[]) -> c
    void unshuffleBytes(byte[]) -> b
    void shuffleBytes(byte[]) -> c
    byte[] flipBytes(byte[]) -> d
    byte[] incrementIvSeedByOne(byte[]) -> e
    byte[] computeFileIV(byte[],byte[]) -> a
    byte[] getMacBytes(byte[]) -> f
    byte[] computeChainedIV(org.mrpdaemon.sec.encfs.EncFSVolume,java.lang.String,org.mrpdaemon.sec.encfs.EncFSConfig) -> a
    int[] $SWITCH_TABLE$org$mrpdaemon$sec$encfs$EncFSFilenameEncryptionAlgorithm() -> a
org.mrpdaemon.sec.encfs.EncFSException -> org.mrpdaemon.a.a.o:
org.mrpdaemon.sec.encfs.EncFSFile -> org.mrpdaemon.a.a.p:
    org.mrpdaemon.sec.encfs.EncFSVolume volume -> a
    org.mrpdaemon.sec.encfs.EncFSFileInfo plainFileInfo -> b
    org.mrpdaemon.sec.encfs.EncFSFileInfo cipherFileInfo -> c
    java.lang.String getPath() -> a
    java.lang.String getEncryptedPath() -> b
    java.lang.String getParentPath() -> c
    java.lang.String getName() -> d
    long getLength() -> e
    org.mrpdaemon.sec.encfs.EncFSVolume getVolume() -> f
    boolean isDirectory() -> g
    org.mrpdaemon.sec.encfs.EncFSFile[] listFiles() -> h
    boolean delete() -> i
    org.mrpdaemon.sec.encfs.EncFSInputStream openInputStream(long) -> a
    org.mrpdaemon.sec.encfs.EncFSOutputStream openOutputStream(long) -> b
    boolean copy(org.mrpdaemon.sec.encfs.EncFSFile) -> a
    int compareTo(java.lang.Object) -> compareTo
org.mrpdaemon.sec.encfs.EncFSFileInfo -> org.mrpdaemon.a.a.q:
    java.lang.String name -> a
    java.lang.String parentPath -> b
    boolean directory -> c
    long lastModified -> d
    long size -> e
    boolean readable -> f
    boolean writable -> g
    boolean executable -> h
    java.lang.String getName() -> a
    java.lang.String getParentPath() -> b
    java.lang.String getPath() -> c
    long getLastModified() -> d
    long getSize() -> e
    boolean isDirectory() -> f
    boolean isReadable() -> g
    boolean isWritable() -> h
    boolean isExecutable() -> i
    org.mrpdaemon.sec.encfs.EncFSFileInfo getDecodedFileInfo(org.mrpdaemon.sec.encfs.EncFSVolume,java.lang.String,java.lang.String,org.mrpdaemon.sec.encfs.EncFSFileInfo) -> a
org.mrpdaemon.sec.encfs.EncFSFileInputStream -> org.mrpdaemon.a.a.r:
org.mrpdaemon.sec.encfs.EncFSFileOutputStream -> org.mrpdaemon.a.a.s:
org.mrpdaemon.sec.encfs.EncFSFileProvider -> org.mrpdaemon.a.a.t:
    int getID() -> getID
    java.lang.String getProviderName() -> getProviderName
    boolean isDirectory(java.lang.String) -> isDirectory
    boolean exists(java.lang.String) -> exists
    java.lang.String getFilesystemRootPath() -> getFilesystemRootPath
    org.mrpdaemon.sec.encfs.EncFSFileInfo getFileInfo(java.lang.String) -> getFileInfo
    java.util.List listFiles(java.lang.String) -> listFiles
    boolean move(java.lang.String,java.lang.String) -> move
    boolean delete(java.lang.String) -> delete
    boolean mkdir(java.lang.String) -> mkdir
    org.mrpdaemon.sec.encfs.EncFSFileInfo createFile(java.lang.String) -> createFile
    boolean copy(java.lang.String,java.lang.String) -> copy
    java.io.InputStream openInputStream(java.lang.String,long) -> openInputStream
    java.io.OutputStream openOutputStream(java.lang.String,long) -> openOutputStream
org.mrpdaemon.sec.encfs.EncFSFilenameEncryptionAlgorithm -> org.mrpdaemon.a.a.u:
    org.mrpdaemon.sec.encfs.EncFSFilenameEncryptionAlgorithm BLOCK -> a
    org.mrpdaemon.sec.encfs.EncFSFilenameEncryptionAlgorithm STREAM -> b
    org.mrpdaemon.sec.encfs.EncFSFilenameEncryptionAlgorithm NULL -> c
    java.lang.String identifier -> d
    int major -> e
    int minor -> f
    org.mrpdaemon.sec.encfs.EncFSFilenameEncryptionAlgorithm[] ENUM$VALUES -> g
    org.mrpdaemon.sec.encfs.EncFSFilenameEncryptionAlgorithm parse(java.lang.String) -> a
    int getMajor() -> a
    int getMinor() -> b
    java.lang.String getIdentifier() -> c
    org.mrpdaemon.sec.encfs.EncFSFilenameEncryptionAlgorithm[] values() -> values
    org.mrpdaemon.sec.encfs.EncFSFilenameEncryptionAlgorithm valueOf(java.lang.String) -> valueOf
org.mrpdaemon.sec.encfs.EncFSInputStream -> org.mrpdaemon.a.a.v:
    org.mrpdaemon.sec.encfs.EncFSVolume volume -> a
    org.mrpdaemon.sec.encfs.EncFSConfig config -> b
    int blockSize -> c
    int numMACBytes -> d
    int blockHeaderSize -> e
    int blockNum -> f
    byte[] blockBuf -> g
    int bufCursor -> h
    byte[] fileIv -> i
    int read() -> read
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    long skip(long) -> skip
    boolean markSupported() -> markSupported
    byte[] getBlockIV() -> a
    int readBlock() -> b
org.mrpdaemon.sec.encfs.EncFSInvalidConfigException -> org.mrpdaemon.a.a.w:
org.mrpdaemon.sec.encfs.EncFSInvalidPasswordException -> org.mrpdaemon.a.a.x:
org.mrpdaemon.sec.encfs.EncFSLocalFileProvider -> org.mrpdaemon.a.a.y:
    java.lang.String separator -> a
    java.io.File rootPath -> b
    boolean isDirectory(java.lang.String) -> isDirectory
    java.io.File getFile(java.lang.String) -> a
    java.lang.String getFilesystemRootPath() -> getFilesystemRootPath
    boolean exists(java.lang.String) -> exists
    org.mrpdaemon.sec.encfs.EncFSFileInfo getFileInfo(java.lang.String) -> getFileInfo
    java.util.List listFiles(java.lang.String) -> listFiles
    boolean move(java.lang.String,java.lang.String) -> move
    void recursiveDelete(java.io.File) -> a
    boolean delete(java.lang.String) -> delete
    boolean mkdir(java.lang.String) -> mkdir
    boolean mkdirs(java.lang.String) -> b
    org.mrpdaemon.sec.encfs.EncFSFileInfo createFile(java.lang.String) -> createFile
    boolean copy(java.lang.String,java.lang.String) -> copy
    java.io.InputStream openInputStream(java.lang.String,long) -> openInputStream
    java.io.OutputStream openOutputStream(java.lang.String,long) -> openOutputStream
    org.mrpdaemon.sec.encfs.EncFSFileInfo convertToFileInfo(java.io.File) -> b
    int getID() -> getID
    java.lang.String getProviderName() -> getProviderName
org.mrpdaemon.sec.encfs.EncFSOutputStream -> org.mrpdaemon.a.a.z:
    java.security.SecureRandom secureRandom -> a
    org.mrpdaemon.sec.encfs.EncFSVolume volume -> b
    org.mrpdaemon.sec.encfs.EncFSConfig config -> c
    byte[] fileIv -> d
    byte[] fileHeader -> e
    byte[] dataBuf -> f
    int dataBytes -> g
    int blockHeaderSize -> h
    int blockMACRandLen -> i
    int blockMACLen -> j
    int curBlockIndex -> k
    void writeBuffer(boolean) -> a
    byte[] getBlockIV() -> a
    void writeBuffer() -> b
    void write(int) -> write
    void write(byte[],int,int) -> write
    void close() -> close
org.mrpdaemon.sec.encfs.EncFSPBKDF2Provider -> org.mrpdaemon.a.a.A:
    byte[] doPBKDF2(java.lang.String,int,byte[],int,int) -> a
org.mrpdaemon.sec.encfs.EncFSProgressListener -> org.mrpdaemon.a.a.B:
    java.lang.String currentFile -> a
    int numFiles -> b
    void handleEvent(int) -> a
    java.lang.String getCurrentFile() -> a
    int getNumFiles() -> b
    void postEvent(int) -> b
    void setCurrentFile(java.lang.String) -> a
    void setNumFiles(int) -> c
org.mrpdaemon.sec.encfs.EncFSUnsupportedException -> org.mrpdaemon.a.a.C:
org.mrpdaemon.sec.encfs.EncFSUtil -> org.mrpdaemon.a.a.D:
    int convertBigEndianByteArrayToInt(byte[]) -> a
    byte[] convertIntToByteArrayBigEndian(int) -> a
    long convertByteArrayToLong(byte[]) -> b
    byte[] convertLongToByteArrayBigEndian(long) -> a
    void copyWholeStreamAndCloseInput(java.io.InputStream,java.io.OutputStream) -> a
    void copyWholeStreamAndClose(java.io.InputStream,java.io.OutputStream) -> b
    void readFromAndWriteTo(java.io.InputStream,java.io.OutputStream) -> c
org.mrpdaemon.sec.encfs.EncFSVolume -> org.mrpdaemon.a.a.E:
    java.lang.String[] OLD_CONFIG_FILE_NAMES -> a
    java.lang.String[] CONFIG_FILE_NAMES -> b
    org.mrpdaemon.sec.encfs.EncFSConfig volumeConfig -> c
    java.security.Key volumeKey -> d
    byte[] volumeIV -> e
    byte[] derivedKeyData -> f
    javax.crypto.Mac volumeMAC -> g
    javax.crypto.Cipher streamCipher -> h
    javax.crypto.Cipher blockCipher -> i
    org.mrpdaemon.sec.encfs.EncFSFile rootDir -> j
    org.mrpdaemon.sec.encfs.EncFSFileProvider fileProvider -> k
    java.lang.String volumeName -> l
    void readConfigAndInitVolume() -> a
    byte[] copyIVdata(byte[],int) -> a
    javax.crypto.Mac createVolumeMAC() -> l
    java.lang.String combinePath(org.mrpdaemon.sec.encfs.EncFSFile,java.lang.String) -> a
    java.lang.String combinePath(java.lang.String,java.lang.String) -> a
    java.lang.String combinePath(org.mrpdaemon.sec.encfs.EncFSFile,org.mrpdaemon.sec.encfs.EncFSFile) -> a
    java.lang.String combinePath(java.lang.String,org.mrpdaemon.sec.encfs.EncFSFile) -> a
    int countFiles(org.mrpdaemon.sec.encfs.EncFSFile) -> a
    org.mrpdaemon.sec.encfs.EncFSConfig getConfig() -> b
    java.security.Key getKey() -> c
    byte[] getIV() -> d
    byte[] getDerivedKeyData() -> e
    javax.crypto.Mac getMAC() -> f
    javax.crypto.Cipher getStreamCipher() -> g
    javax.crypto.Cipher getBlockCipher() -> h
    org.mrpdaemon.sec.encfs.EncFSFile getRootDir() -> i
    org.mrpdaemon.sec.encfs.EncFSFileProvider getFileProvider() -> j
    org.mrpdaemon.sec.encfs.EncFSFile getFile(java.lang.String) -> a
    long getDecryptedFileLength(long) -> a
    long getEncryptedFileLength(long) -> b
    boolean exists(java.lang.String) -> b
    boolean pathExists(java.lang.String) -> c
    boolean isDir(java.lang.String) -> d
    org.mrpdaemon.sec.encfs.EncFSFile createFile(java.lang.String,java.lang.String) -> b
    org.mrpdaemon.sec.encfs.EncFSFile createFile(java.lang.String) -> e
    org.mrpdaemon.sec.encfs.EncFSFileInfo getDecodedFileInfo(java.lang.String,org.mrpdaemon.sec.encfs.EncFSFileInfo) -> a
    boolean makeDir(java.lang.String) -> f
    boolean recursiveDelete(org.mrpdaemon.sec.encfs.EncFSFile,org.mrpdaemon.sec.encfs.EncFSProgressListener) -> a
    boolean deletePath(java.lang.String,boolean,org.mrpdaemon.sec.encfs.EncFSProgressListener) -> a
    boolean deletePath(java.lang.String,boolean) -> a
    boolean copyOrMovePath(java.lang.String,java.lang.String,org.mrpdaemon.sec.encfs.EncFSVolume$PathOperation,org.mrpdaemon.sec.encfs.EncFSProgressListener) -> a
    boolean copyOrMove(java.lang.String,java.lang.String,org.mrpdaemon.sec.encfs.EncFSProgressListener,org.mrpdaemon.sec.encfs.EncFSVolume$PathOperation) -> a
    boolean copyPath(java.lang.String,java.lang.String,org.mrpdaemon.sec.encfs.EncFSProgressListener) -> a
    boolean copyPath(java.lang.String,java.lang.String) -> c
    boolean movePath(java.lang.String,java.lang.String,org.mrpdaemon.sec.encfs.EncFSProgressListener) -> b
    org.mrpdaemon.sec.encfs.EncFSFile[] listFilesForPath(java.lang.String) -> g
    void validateAbsoluteFileName(java.lang.String,java.lang.String) -> d
    java.lang.String getVolumeName() -> k
    void setVolumeName(java.lang.String) -> h
    void setDerivedKeyData(byte[]) -> a
    void setFileProvider(org.mrpdaemon.sec.encfs.EncFSFileProvider) -> a
    void setVolumeConfig(org.mrpdaemon.sec.encfs.EncFSConfig) -> a
    boolean isConfigFile(java.lang.String) -> i
org.mrpdaemon.sec.encfs.EncFSVolume$PathOperation -> org.mrpdaemon.a.a.F:
    org.mrpdaemon.sec.encfs.EncFSVolume$PathOperation MOVE -> a
    org.mrpdaemon.sec.encfs.EncFSVolume$PathOperation COPY -> b
    org.mrpdaemon.sec.encfs.EncFSVolume$PathOperation[] ENUM$VALUES -> c
    org.mrpdaemon.sec.encfs.EncFSVolume$PathOperation[] values() -> values
    org.mrpdaemon.sec.encfs.EncFSVolume$PathOperation valueOf(java.lang.String) -> valueOf
org.mrpdaemon.sec.encfs.EncFSVolumeBuilder -> org.mrpdaemon.a.a.G:
    org.mrpdaemon.sec.encfs.EncFSVolumeBuilder$FileProviderBuilder withFileProvider(org.mrpdaemon.sec.encfs.EncFSFileProvider,java.lang.String) -> a
org.mrpdaemon.sec.encfs.EncFSVolumeBuilder$ConfigBuilder -> org.mrpdaemon.a.a.H:
    org.mrpdaemon.sec.encfs.EncFSVolume volume -> a
    org.mrpdaemon.sec.encfs.EncFSVolumeBuilder$Pbkdf2ProviderBuilder withPbkdf2Provider(org.mrpdaemon.sec.encfs.EncFSPBKDF2Provider) -> a
org.mrpdaemon.sec.encfs.EncFSVolumeBuilder$FileProviderBuilder -> org.mrpdaemon.a.a.I:
    org.mrpdaemon.sec.encfs.EncFSVolume volume -> a
    org.mrpdaemon.sec.encfs.EncFSVolumeBuilder$ConfigBuilder withConfig(org.mrpdaemon.sec.encfs.EncFSConfig) -> a
    org.mrpdaemon.sec.encfs.EncFSVolumeBuilder$Pbkdf2ProviderBuilder withPbkdf2Provider(org.mrpdaemon.sec.encfs.EncFSPBKDF2Provider) -> a
    org.mrpdaemon.sec.encfs.EncFSVolumeBuilder$PasswordBuilder withDerivedKeyData(byte[]) -> a
org.mrpdaemon.sec.encfs.EncFSVolumeBuilder$PasswordBuilder -> org.mrpdaemon.a.a.J:
    org.mrpdaemon.sec.encfs.EncFSVolume volume -> a
    org.mrpdaemon.sec.encfs.EncFSPBKDF2Provider provider -> b
    java.lang.String password -> c
    org.mrpdaemon.sec.encfs.EncFSVolume buildVolume() -> a
    void writeVolumeConfig() -> b
org.mrpdaemon.sec.encfs.EncFSVolumeBuilder$Pbkdf2ProviderBuilder -> org.mrpdaemon.a.a.K:
    org.mrpdaemon.sec.encfs.EncFSVolume volume -> a
    org.mrpdaemon.sec.encfs.EncFSPBKDF2Provider provider -> b
    org.mrpdaemon.sec.encfs.EncFSVolumeBuilder$PasswordBuilder withPassword(java.lang.String) -> a
    org.mrpdaemon.sec.encfs.EncFSVolumeBuilder$PasswordBuilder withDerivedKeyData(byte[]) -> a
org.mrpdaemon.sec.encfs.FilenameDecryptionStrategy -> org.mrpdaemon.a.a.L:
    org.mrpdaemon.sec.encfs.EncFSVolume volume -> a
    java.lang.String volumePath -> b
    org.mrpdaemon.sec.encfs.EncFSFilenameEncryptionAlgorithm algorithm -> c
    java.lang.String getVolumePath() -> a
    org.mrpdaemon.sec.encfs.EncFSVolume getVolume() -> b
    java.lang.String decryptImpl(java.lang.String) -> a
    java.lang.String decrypt(java.lang.String) -> b
org.mrpdaemon.sec.encfs.FilenameEncryptionStrategy -> org.mrpdaemon.a.a.M:
    org.mrpdaemon.sec.encfs.EncFSVolume volume -> a
    java.lang.String volumePath -> b
    org.mrpdaemon.sec.encfs.EncFSFilenameEncryptionAlgorithm algorithm -> c
    java.lang.String getVolumePath() -> a
    org.mrpdaemon.sec.encfs.EncFSVolume getVolume() -> b
    java.lang.String encryptImpl(java.lang.String) -> a
    java.lang.String encrypt(java.lang.String) -> b
org.mrpdaemon.sec.encfs.NullFilenameDecryptionStrategy -> org.mrpdaemon.a.a.N:
    java.lang.String decryptImpl(java.lang.String) -> a
    java.lang.String decrypt(java.lang.String) -> b
org.mrpdaemon.sec.encfs.NullFilenameEncryptionStrategy -> org.mrpdaemon.a.a.O:
    java.lang.String encryptImpl(java.lang.String) -> a
    java.lang.String encrypt(java.lang.String) -> b
org.mrpdaemon.sec.encfs.StreamCrypto -> org.mrpdaemon.a.a.P:
    javax.crypto.Cipher newStreamCipher() -> a
    byte[] streamDecrypt(javax.crypto.Cipher,javax.crypto.Mac,java.security.Key,byte[],byte[],byte[],int,int) -> a
    byte[] streamDecrypt(javax.crypto.Cipher,javax.crypto.Mac,java.security.Key,byte[],byte[],byte[]) -> a
    byte[] streamDecrypt(org.mrpdaemon.sec.encfs.EncFSVolume,byte[],byte[]) -> a
    byte[] streamDecrypt(org.mrpdaemon.sec.encfs.EncFSVolume,byte[],byte[],int,int) -> a
    byte[] streamEncrypt(javax.crypto.Cipher,javax.crypto.Mac,java.security.Key,byte[],byte[],byte[],int,int) -> b
    byte[] streamEncrypt(javax.crypto.Cipher,javax.crypto.Mac,java.security.Key,byte[],byte[],byte[]) -> b
    byte[] streamEncrypt(org.mrpdaemon.sec.encfs.EncFSVolume,byte[],byte[]) -> b
    byte[] streamEncrypt(org.mrpdaemon.sec.encfs.EncFSVolume,byte[],byte[],int,int) -> b
    byte[] computeChainIv(org.mrpdaemon.sec.encfs.EncFSVolume,java.lang.String) -> a
org.mrpdaemon.sec.encfs.StreamFilenameDecryptionStrategy -> org.mrpdaemon.a.a.Q:
    byte[] decryptConcrete(org.mrpdaemon.sec.encfs.EncFSVolume,byte[],byte[]) -> a
    java.lang.String decryptPost(byte[]) -> a
    java.lang.String decrypt(java.lang.String) -> b
org.mrpdaemon.sec.encfs.StreamFilenameEncryptionStrategy -> org.mrpdaemon.a.a.R:
    byte[] encryptConcrete(org.mrpdaemon.sec.encfs.EncFSVolume,byte[],byte[]) -> a
    byte[] getPaddedDecFilename(byte[]) -> a
    java.lang.String encrypt(java.lang.String) -> b
org.mrpdaemon.sec.encfs.VolumeKey -> org.mrpdaemon.a.a.S:
    byte[] encryptVolumeKey(org.mrpdaemon.sec.encfs.EncFSConfig,byte[],byte[]) -> a
    javax.crypto.Mac encryptVolumeKeyData(java.security.Key) -> a
    byte[] decryptVolumeKey(org.mrpdaemon.sec.encfs.EncFSConfig,byte[]) -> a
    byte[] decryptVolumeKeyData(byte[],byte[],java.security.Key,byte[],javax.crypto.Mac) -> a
    byte[] deriveKeyDataFromPassword(org.mrpdaemon.sec.encfs.EncFSConfig,java.lang.String,org.mrpdaemon.sec.encfs.EncFSPBKDF2Provider) -> a
    void encodeVolumeKey(org.mrpdaemon.sec.encfs.EncFSConfig,java.lang.String,byte[],org.mrpdaemon.sec.encfs.EncFSPBKDF2Provider) -> a
org.paulmach.textedit.ClearRecentFileListPreference -> org.paulmach.textedit.ClearRecentFileListPreference:
    void onClick() -> onClick
org.paulmach.textedit.ClearSearchSuggestions -> org.paulmach.textedit.ClearSearchSuggestions:
    void onClick() -> onClick
org.paulmach.textedit.ColorPreference -> org.paulmach.textedit.ColorPreference:
    int color -> a
    int defcolor -> b
    java.lang.String attribute -> c
    void onBindView(android.view.View) -> onBindView
    void onPrepareDialogBuilder(android.app.AlertDialog$Builder) -> onPrepareDialogBuilder
    void access$0(org.paulmach.textedit.ColorPreference) -> a
org.paulmach.textedit.ColorPreference$1 -> org.paulmach.textedit.ColorPreference$1:
    org.paulmach.textedit.ColorPreference this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.paulmach.textedit.ColorPreference$2 -> org.paulmach.textedit.ColorPreference$2:
    org.paulmach.textedit.ColorPreference this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.paulmach.textedit.ColorPreference$3 -> org.paulmach.textedit.ColorPreference$3:
    org.paulmach.textedit.ColorPreference this$0 -> a
    android.widget.ImageView val$colormap -> b
    android.view.View val$colorView -> c
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
org.paulmach.textedit.DefaultDirPreference -> org.paulmach.textedit.DefaultDirPreference:
org.paulmach.textedit.DefaultDirPreference$1 -> org.paulmach.textedit.DefaultDirPreference$1:
    org.paulmach.textedit.DefaultDirPreference this$0 -> a
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
org.paulmach.textedit.EditPreferences -> org.paulmach.textedit.EditPreferences:
    void onCreate(android.os.Bundle) -> onCreate
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
org.paulmach.textedit.FileAutoCompleteArrayAdapter -> org.paulmach.textedit.a:
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.paulmach.textedit.FileBrowser -> org.paulmach.textedit.FileBrowser:
    int DIALOG_FILE_OPTIONS -> h
    int DIALOG_RENAME -> i
    int DIALOG_MKDIR -> j
    int DIALOG_SHOULD_DELETE -> k
    int DIALOG_COULDNT_DELETE -> l
    int DIALOG_COULDNT_RENAME -> m
    int DIALOG_COULDNT_MKDIR -> n
    int DIALOG_COULDNT_DELETEDIR -> o
    java.io.File dialog_file -> p
    android.view.View textEntryView -> a
    android.view.View mkDIRView -> b
    org.paulmach.textedit.FileViewArrayAdapter fileAdapter -> c
    android.widget.ListView fileBrowserList -> d
    android.widget.TextView fileBrowserPath -> e
    android.widget.TextView fileBrowserNoFiles -> f
    java.lang.CharSequence filePath -> g
    void onCreate(android.os.Bundle) -> onCreate
    void onPrepareDialog(int,android.app.Dialog) -> onPrepareDialog
    android.app.Dialog onCreateDialog(int) -> onCreateDialog
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Bundle) -> onRestoreInstanceState
    void updateFileBrowserList(java.lang.String) -> a
    void updateFileBrowserList(java.lang.String,boolean) -> a
    void access$0(org.paulmach.textedit.FileBrowser,java.lang.String) -> a
    void access$1(org.paulmach.textedit.FileBrowser,java.io.File) -> a
    java.io.File access$2(org.paulmach.textedit.FileBrowser) -> a
    void access$3(org.paulmach.textedit.FileBrowser,java.lang.String,boolean) -> a
org.paulmach.textedit.FileBrowser$1 -> org.paulmach.textedit.FileBrowser$1:
    org.paulmach.textedit.FileBrowser this$0 -> a
    void onClick(android.view.View) -> onClick
org.paulmach.textedit.FileBrowser$10 -> org.paulmach.textedit.FileBrowser$2:
    org.paulmach.textedit.FileBrowser this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.paulmach.textedit.FileBrowser$11 -> org.paulmach.textedit.FileBrowser$3:
    org.paulmach.textedit.FileBrowser this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.paulmach.textedit.FileBrowser$12 -> org.paulmach.textedit.FileBrowser$4:
    org.paulmach.textedit.FileBrowser this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.paulmach.textedit.FileBrowser$13 -> org.paulmach.textedit.FileBrowser$5:
    org.paulmach.textedit.FileBrowser this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.paulmach.textedit.FileBrowser$14 -> org.paulmach.textedit.FileBrowser$6:
    org.paulmach.textedit.FileBrowser this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.paulmach.textedit.FileBrowser$15 -> org.paulmach.textedit.FileBrowser$7:
    org.paulmach.textedit.FileBrowser this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.paulmach.textedit.FileBrowser$2 -> org.paulmach.textedit.FileBrowser$8:
    org.paulmach.textedit.FileBrowser this$0 -> a
    void onClick(android.view.View) -> onClick
org.paulmach.textedit.FileBrowser$3 -> org.paulmach.textedit.FileBrowser$9:
    org.paulmach.textedit.FileBrowser this$0 -> a
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
org.paulmach.textedit.FileBrowser$4 -> org.paulmach.textedit.FileBrowser$10:
    org.paulmach.textedit.FileBrowser this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.paulmach.textedit.FileBrowser$5 -> org.paulmach.textedit.FileBrowser$11:
    org.paulmach.textedit.FileBrowser this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.paulmach.textedit.FileBrowser$6 -> org.paulmach.textedit.FileBrowser$12:
    org.paulmach.textedit.FileBrowser this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.paulmach.textedit.FileBrowser$7 -> org.paulmach.textedit.FileBrowser$13:
    org.paulmach.textedit.FileBrowser this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.paulmach.textedit.FileBrowser$8 -> org.paulmach.textedit.FileBrowser$14:
    org.paulmach.textedit.FileBrowser this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.paulmach.textedit.FileBrowser$9 -> org.paulmach.textedit.FileBrowser$15:
    org.paulmach.textedit.FileBrowser this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.paulmach.textedit.FileViewArrayAdapter -> org.paulmach.textedit.b:
    android.text.Spannable$Factory sf -> b
    android.view.LayoutInflater factory -> c
    int mode -> a
    void setMode(int) -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.String getFileExtension(java.lang.String) -> a
    java.lang.String formatFileSize(java.io.File) -> a
org.paulmach.textedit.FontSizePreference -> org.paulmach.textedit.FontSizePreference:
    java.util.List fonts -> a
    int selected -> b
    void onPrepareDialogBuilder(android.app.AlertDialog$Builder) -> onPrepareDialogBuilder
    int access$0(org.paulmach.textedit.FontSizePreference) -> a
    void access$1(org.paulmach.textedit.FontSizePreference) -> b
    void access$2(org.paulmach.textedit.FontSizePreference,int) -> a
org.paulmach.textedit.FontSizePreference$1 -> org.paulmach.textedit.FontSizePreference$1:
    org.paulmach.textedit.FontSizePreference this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.paulmach.textedit.FontSizePreference$2 -> org.paulmach.textedit.FontSizePreference$2:
    org.paulmach.textedit.FontSizePreference this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.paulmach.textedit.FontSizePreference$FontTypeArrayAdapter -> org.paulmach.textedit.c:
    org.paulmach.textedit.FontSizePreference this$0 -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.paulmach.textedit.FontTypePreference -> org.paulmach.textedit.FontTypePreference:
    java.util.List fonts -> a
    int selected -> b
    void onPrepareDialogBuilder(android.app.AlertDialog$Builder) -> onPrepareDialogBuilder
    int access$0(org.paulmach.textedit.FontTypePreference) -> a
    void access$1(org.paulmach.textedit.FontTypePreference) -> b
    void access$2(org.paulmach.textedit.FontTypePreference,int) -> a
org.paulmach.textedit.FontTypePreference$1 -> org.paulmach.textedit.FontTypePreference$1:
    org.paulmach.textedit.FontTypePreference this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.paulmach.textedit.FontTypePreference$2 -> org.paulmach.textedit.FontTypePreference$2:
    org.paulmach.textedit.FontTypePreference this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.paulmach.textedit.FontTypePreference$3 -> org.paulmach.textedit.FontTypePreference$3:
    org.paulmach.textedit.FontTypePreference this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.paulmach.textedit.FontTypePreference$FontTypeArrayAdapter -> org.paulmach.textedit.d:
    org.paulmach.textedit.FontTypePreference this$0 -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.paulmach.textedit.SearchSuggestions -> org.paulmach.textedit.SearchSuggestions:
org.paulmach.textedit.WarrantyPreference -> org.paulmach.textedit.WarrantyPreference:
    void onPrepareDialogBuilder(android.app.AlertDialog$Builder) -> onPrepareDialogBuilder
org.paulmach.textedit.WarrantyPreference$1 -> org.paulmach.textedit.WarrantyPreference$1:
    org.paulmach.textedit.WarrantyPreference this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.paulmach.textedit.pmTextEdit -> org.paulmach.textedit.pmTextEdit:
    android.widget.EditText text -> a
    android.widget.TextView title -> b
    java.lang.CharSequence filename -> c
    long lastModified -> d
    boolean untitled -> e
    java.util.List items -> j
    java.util.List recentItems -> k
    android.widget.EditText openDialog_fne -> f
    android.app.AlertDialog openRecentDialog -> g
    android.widget.ListView openRecentListView -> h
    org.paulmach.textedit.FileViewArrayAdapter recentFilesAdapter -> i
    boolean backFromFileBrowser -> l
    java.lang.CharSequence fileBrowserReturnFile -> m
    boolean autoComplete -> n
    boolean creatingFile -> o
    boolean savingFile -> p
    boolean openingFile -> q
    boolean openingError -> r
    boolean openingRecent -> s
    boolean sendingAttachment -> t
    java.lang.CharSequence temp_filename -> u
    boolean fromIntent -> v
    boolean openingIntent -> w
    android.content.Intent newIntent -> x
    boolean fromSearch -> y
    java.lang.String queryString -> z
    java.lang.CharSequence errorFname -> A
    boolean errorSaving -> B
    int fileformat -> C
    java.lang.String selectedFile -> D
    java.io.File prevFile -> E
    void onCreate(android.os.Bundle) -> onCreate
    void onNewIntent(android.content.Intent) -> onNewIntent
    void newIntent(android.content.Intent) -> a
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Bundle) -> onRestoreInstanceState
    void createNew() -> a
    void openFile(java.lang.String,java.io.InputStream) -> a
    void openFile(java.lang.String,java.lang.StringBuffer) -> a
    void saveNote(java.lang.CharSequence) -> a
    void updateOptions() -> b
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onPause() -> onPause
    void onResume() -> onResume
    void myResume() -> g
    void onPrepareDialog(int,android.app.Dialog) -> onPrepareDialog
    android.app.Dialog onCreateDialog(int) -> onCreateDialog
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void sendAttachment() -> c
    boolean isTextChanged() -> d
    int countQuotes(java.lang.String) -> a
    void getFileList(java.lang.CharSequence,android.widget.AutoCompleteTextView) -> a
    void readRecentFiles() -> e
    void addRecentFile(java.lang.CharSequence) -> b
    void removeRecentFile(java.lang.CharSequence) -> c
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void access$0(org.paulmach.textedit.pmTextEdit,boolean) -> a
    void access$1(org.paulmach.textedit.pmTextEdit,boolean) -> b
    void access$2(org.paulmach.textedit.pmTextEdit,boolean) -> c
    void access$3(org.paulmach.textedit.pmTextEdit,boolean) -> d
    void access$4(org.paulmach.textedit.pmTextEdit,boolean) -> e
    void access$5(org.paulmach.textedit.pmTextEdit,boolean) -> f
    boolean access$6(org.paulmach.textedit.pmTextEdit) -> a
    boolean access$7(org.paulmach.textedit.pmTextEdit) -> b
    java.lang.CharSequence access$8(org.paulmach.textedit.pmTextEdit) -> c
    boolean access$9(org.paulmach.textedit.pmTextEdit) -> d
    boolean access$10(org.paulmach.textedit.pmTextEdit) -> e
    boolean access$11(org.paulmach.textedit.pmTextEdit) -> f
    boolean access$12(org.paulmach.textedit.pmTextEdit) -> g
    android.content.Intent access$13(org.paulmach.textedit.pmTextEdit) -> h
    boolean access$14(org.paulmach.textedit.pmTextEdit) -> i
    java.lang.CharSequence access$15() -> f
    void access$16(java.lang.CharSequence) -> d
org.paulmach.textedit.pmTextEdit$1 -> org.paulmach.textedit.pmTextEdit$1:
    org.paulmach.textedit.pmTextEdit this$0 -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
org.paulmach.textedit.pmTextEdit$10 -> org.paulmach.textedit.pmTextEdit$2:
    org.paulmach.textedit.pmTextEdit this$0 -> a
    void onCancel(android.content.DialogInterface) -> onCancel
org.paulmach.textedit.pmTextEdit$11 -> org.paulmach.textedit.pmTextEdit$3:
    org.paulmach.textedit.pmTextEdit this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.paulmach.textedit.pmTextEdit$12 -> org.paulmach.textedit.pmTextEdit$4:
    org.paulmach.textedit.pmTextEdit this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.paulmach.textedit.pmTextEdit$13 -> org.paulmach.textedit.pmTextEdit$5:
    org.paulmach.textedit.pmTextEdit this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.paulmach.textedit.pmTextEdit$14 -> org.paulmach.textedit.pmTextEdit$6:
    org.paulmach.textedit.pmTextEdit this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.paulmach.textedit.pmTextEdit$15 -> org.paulmach.textedit.pmTextEdit$7:
    org.paulmach.textedit.pmTextEdit this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.paulmach.textedit.pmTextEdit$16 -> org.paulmach.textedit.pmTextEdit$8:
    org.paulmach.textedit.pmTextEdit this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.paulmach.textedit.pmTextEdit$17 -> org.paulmach.textedit.pmTextEdit$9:
    org.paulmach.textedit.pmTextEdit this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.paulmach.textedit.pmTextEdit$18 -> org.paulmach.textedit.pmTextEdit$10:
    org.paulmach.textedit.pmTextEdit this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.paulmach.textedit.pmTextEdit$19 -> org.paulmach.textedit.pmTextEdit$11:
    org.paulmach.textedit.pmTextEdit this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.paulmach.textedit.pmTextEdit$20 -> org.paulmach.textedit.pmTextEdit$12:
    org.paulmach.textedit.pmTextEdit this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.paulmach.textedit.pmTextEdit$21 -> org.paulmach.textedit.pmTextEdit$13:
    org.paulmach.textedit.pmTextEdit this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.paulmach.textedit.pmTextEdit$3 -> org.paulmach.textedit.pmTextEdit$14:
    org.paulmach.textedit.pmTextEdit this$0 -> a
    android.view.View val$textEntryView -> b
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
org.paulmach.textedit.pmTextEdit$4 -> org.paulmach.textedit.pmTextEdit$15:
    org.paulmach.textedit.pmTextEdit this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.paulmach.textedit.pmTextEdit$5 -> org.paulmach.textedit.pmTextEdit$16:
    org.paulmach.textedit.pmTextEdit this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.paulmach.textedit.pmTextEdit$6 -> org.paulmach.textedit.pmTextEdit$17:
    org.paulmach.textedit.pmTextEdit this$0 -> a
    android.view.View val$textEntryView -> b
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
org.paulmach.textedit.pmTextEdit$7 -> org.paulmach.textedit.pmTextEdit$18:
    org.paulmach.textedit.pmTextEdit this$0 -> a
    android.view.View val$textEntryView -> b
    void onClick(android.content.DialogInterface,int) -> onClick
org.paulmach.textedit.pmTextEdit$8 -> org.paulmach.textedit.pmTextEdit$19:
    org.paulmach.textedit.pmTextEdit this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.paulmach.textedit.pmTextEdit$9 -> org.paulmach.textedit.pmTextEdit$20:
    org.paulmach.textedit.pmTextEdit this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
uk.co.senab.photoview.Compat -> uk.co.senab.photoview.a:
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
uk.co.senab.photoview.HackyViewPager -> uk.co.senab.photoview.HackyViewPager:
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
uk.co.senab.photoview.PhotoView -> uk.co.senab.photoview.PhotoView:
    uk.co.senab.photoview.PhotoViewAttacher mAttacher -> g
    android.widget.ImageView$ScaleType mPendingScaleType -> h
    java.lang.String bitmapUrl -> a
    android.app.Activity parent -> b
    uk.co.senab.photoview.SamplePagerAdapter samplePagerAdapter -> c
    int position -> d
    int resource -> e
    boolean inThread -> f
    android.widget.ImageView$ScaleType getScaleType() -> getScaleType
    void setAllowParentInterceptOnEdge(boolean) -> setAllowParentInterceptOnEdge
    void setMinScale(float) -> setMinScale
    void setMidScale(float) -> setMidScale
    void setMaxScale(float) -> setMaxScale
    void setImageDrawable(android.graphics.drawable.Drawable) -> setImageDrawable
    void setImageUrl(java.lang.String) -> setImageUrl
    android.graphics.Bitmap loadBitmap(java.lang.String) -> a
    byte[] inputStreamToByteArray(java.io.InputStream) -> a
    void setImageResource(int) -> setImageResource
    void setImageBitmap(android.graphics.Bitmap) -> setImageBitmap
    void setImageURI(android.net.Uri) -> setImageURI
    void setOnMatrixChangeListener(uk.co.senab.photoview.PhotoViewAttacher$OnMatrixChangedListener) -> setOnMatrixChangeListener
    void setOnLongClickListener(android.view.View$OnLongClickListener) -> setOnLongClickListener
    void setOnPhotoTapListener(uk.co.senab.photoview.PhotoViewAttacher$OnPhotoTapListener) -> setOnPhotoTapListener
    void setOnViewTapListener(uk.co.senab.photoview.PhotoViewAttacher$OnViewTapListener) -> setOnViewTapListener
    void setScaleType(android.widget.ImageView$ScaleType) -> setScaleType
    void setZoomable(boolean) -> setZoomable
    void onDetachedFromWindow() -> onDetachedFromWindow
    void run() -> run
    uk.co.senab.photoview.PhotoViewAttacher access$0(uk.co.senab.photoview.PhotoView) -> a
uk.co.senab.photoview.PhotoView$1 -> uk.co.senab.photoview.PhotoView$1:
    uk.co.senab.photoview.PhotoView this$0 -> a
    void run() -> run
uk.co.senab.photoview.PhotoView$UiUpdate -> uk.co.senab.photoview.b:
    android.graphics.Bitmap bitmap -> a
    uk.co.senab.photoview.PhotoView this$0 -> b
    void run() -> run
uk.co.senab.photoview.PhotoViewAttacher -> uk.co.senab.photoview.c:
    boolean DEBUG -> a
    float mMinScale -> b
    float mMidScale -> c
    float mMaxScale -> d
    boolean mAllowParentInterceptOnEdge -> e
    java.lang.ref.WeakReference mImageView -> f
    android.view.ViewTreeObserver mViewTreeObserver -> g
    android.view.GestureDetector mGestureDetector -> h
    uk.co.senab.photoview.VersionedGestureDetector mScaleDragDetector -> i
    android.graphics.Matrix mBaseMatrix -> j
    android.graphics.Matrix mDrawMatrix -> k
    android.graphics.Matrix mSuppMatrix -> l
    android.graphics.RectF mDisplayRect -> m
    float[] mMatrixValues -> n
    uk.co.senab.photoview.PhotoViewAttacher$OnMatrixChangedListener mMatrixChangeListener -> o
    uk.co.senab.photoview.PhotoViewAttacher$OnPhotoTapListener mPhotoTapListener -> p
    uk.co.senab.photoview.PhotoViewAttacher$OnViewTapListener mViewTapListener -> q
    android.view.View$OnLongClickListener mLongClickListener -> r
    int mIvTop -> s
    int mIvRight -> t
    int mIvBottom -> u
    int mIvLeft -> v
    uk.co.senab.photoview.PhotoViewAttacher$FlingRunnable mCurrentFlingRunnable -> w
    int mScrollEdge -> x
    boolean mZoomEnabled -> y
    android.widget.ImageView$ScaleType mScaleType -> z
    int[] $SWITCH_TABLE$android$widget$ImageView$ScaleType -> A
    void checkZoomLevels(float,float,float) -> c
    boolean hasDrawable(android.widget.ImageView) -> a
    boolean isSupportedScaleType(android.widget.ImageView$ScaleType) -> b
    void setImageViewScaleTypeMatrix(android.widget.ImageView) -> b
    void cleanup() -> a
    android.graphics.RectF getDisplayRect() -> b
    android.widget.ImageView getImageView() -> c
    float getScale() -> d
    android.widget.ImageView$ScaleType getScaleType() -> e
    boolean onDoubleTap(android.view.MotionEvent) -> onDoubleTap
    boolean onDoubleTapEvent(android.view.MotionEvent) -> onDoubleTapEvent
    void onDrag(float,float) -> a
    void onFling(float,float,float,float) -> a
    void onGlobalLayout() -> onGlobalLayout
    void onScale(float,float,float) -> a
    boolean onSingleTapConfirmed(android.view.MotionEvent) -> onSingleTapConfirmed
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    void setAllowParentInterceptOnEdge(boolean) -> a
    void setMinScale(float) -> a
    void setMidScale(float) -> b
    void setMaxScale(float) -> c
    void setOnLongClickListener(android.view.View$OnLongClickListener) -> a
    void setOnMatrixChangeListener(uk.co.senab.photoview.PhotoViewAttacher$OnMatrixChangedListener) -> a
    void setOnPhotoTapListener(uk.co.senab.photoview.PhotoViewAttacher$OnPhotoTapListener) -> a
    void setOnViewTapListener(uk.co.senab.photoview.PhotoViewAttacher$OnViewTapListener) -> a
    void setScaleType(android.widget.ImageView$ScaleType) -> a
    void setZoomable(boolean) -> b
    void update() -> f
    void zoomTo(float,float,float) -> b
    android.graphics.Matrix getDisplayMatrix() -> g
    void cancelFling() -> i
    void checkAndDisplayMatrix() -> j
    void checkImageViewScaleType() -> k
    void checkMatrixBounds() -> l
    android.graphics.RectF getDisplayRect(android.graphics.Matrix) -> a
    float getValue(android.graphics.Matrix,int) -> a
    void resetMatrix() -> m
    void setImageViewMatrix(android.graphics.Matrix) -> b
    void updateBaseMatrix(android.graphics.drawable.Drawable) -> a
    android.graphics.Matrix access$0(uk.co.senab.photoview.PhotoViewAttacher) -> a
    void access$1(uk.co.senab.photoview.PhotoViewAttacher) -> b
    void access$2(uk.co.senab.photoview.PhotoViewAttacher,android.graphics.Matrix) -> a
    int[] $SWITCH_TABLE$android$widget$ImageView$ScaleType() -> h
    android.view.View$OnLongClickListener access$4(uk.co.senab.photoview.PhotoViewAttacher) -> c
    java.lang.ref.WeakReference access$5(uk.co.senab.photoview.PhotoViewAttacher) -> d
uk.co.senab.photoview.PhotoViewAttacher$1 -> uk.co.senab.photoview.c$1:
    uk.co.senab.photoview.PhotoViewAttacher this$0 -> a
    void onLongPress(android.view.MotionEvent) -> onLongPress
uk.co.senab.photoview.PhotoViewAttacher$AnimatedZoomRunnable -> uk.co.senab.photoview.d:
    float mFocalX -> b
    float mFocalY -> c
    float mTargetZoom -> d
    float mDeltaScale -> e
    uk.co.senab.photoview.PhotoViewAttacher this$0 -> a
    void run() -> run
uk.co.senab.photoview.PhotoViewAttacher$FlingRunnable -> uk.co.senab.photoview.e:
    uk.co.senab.photoview.ScrollerProxy mScroller -> b
    int mCurrentX -> c
    int mCurrentY -> d
    uk.co.senab.photoview.PhotoViewAttacher this$0 -> a
    void cancelFling() -> a
    void fling(int,int,int,int) -> a
    void run() -> run
uk.co.senab.photoview.PhotoViewAttacher$OnMatrixChangedListener -> uk.co.senab.photoview.f:
    void onMatrixChanged(android.graphics.RectF) -> a
uk.co.senab.photoview.PhotoViewAttacher$OnPhotoTapListener -> uk.co.senab.photoview.g:
    void onPhotoTap(android.view.View,float,float) -> a
uk.co.senab.photoview.PhotoViewAttacher$OnViewTapListener -> uk.co.senab.photoview.h:
    void onViewTap(android.view.View,float,float) -> a
uk.co.senab.photoview.SDK16 -> uk.co.senab.photoview.i:
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
uk.co.senab.photoview.SamplePagerAdapter -> uk.co.senab.photoview.j:
    uk.co.senab.photoview.ViewPagerActivity parent -> a
    java.util.Map photoViewList -> b
    int getCount() -> getCount
    android.view.View instantiateItem(android.view.ViewGroup,int) -> a
    void setImageBitmap(int,android.graphics.Bitmap) -> a
    void setImageResource(int,int) -> a
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> destroyItem
    boolean isViewFromObject(android.view.View,java.lang.Object) -> isViewFromObject
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> instantiateItem
uk.co.senab.photoview.ScrollerProxy -> uk.co.senab.photoview.k:
    uk.co.senab.photoview.ScrollerProxy getScroller(android.content.Context) -> a
    boolean computeScrollOffset() -> a
    void fling(int,int,int,int,int,int,int,int,int,int) -> a
    void forceFinished(boolean) -> a
    int getCurrX() -> b
    int getCurrY() -> c
uk.co.senab.photoview.ScrollerProxy$GingerScroller -> uk.co.senab.photoview.l:
    android.widget.OverScroller mScroller -> a
    boolean computeScrollOffset() -> a
    void fling(int,int,int,int,int,int,int,int,int,int) -> a
    void forceFinished(boolean) -> a
    int getCurrX() -> b
    int getCurrY() -> c
uk.co.senab.photoview.ScrollerProxy$PreGingerScroller -> uk.co.senab.photoview.m:
    android.widget.Scroller mScroller -> a
    boolean computeScrollOffset() -> a
    void fling(int,int,int,int,int,int,int,int,int,int) -> a
    void forceFinished(boolean) -> a
    int getCurrX() -> b
    int getCurrY() -> c
uk.co.senab.photoview.VersionedGestureDetector -> uk.co.senab.photoview.n:
    uk.co.senab.photoview.VersionedGestureDetector$OnGestureListener mListener -> a
    uk.co.senab.photoview.VersionedGestureDetector newInstance(android.content.Context,uk.co.senab.photoview.VersionedGestureDetector$OnGestureListener) -> a
    boolean onTouchEvent(android.view.MotionEvent) -> a
    boolean isScaling() -> a
uk.co.senab.photoview.VersionedGestureDetector$CupcakeDetector -> uk.co.senab.photoview.o:
    float mLastTouchX -> b
    float mLastTouchY -> c
    float mTouchSlop -> d
    float mMinimumVelocity -> e
    android.view.VelocityTracker mVelocityTracker -> f
    boolean mIsDragging -> g
    float getActiveX(android.view.MotionEvent) -> b
    float getActiveY(android.view.MotionEvent) -> c
    boolean isScaling() -> a
    boolean onTouchEvent(android.view.MotionEvent) -> a
uk.co.senab.photoview.VersionedGestureDetector$EclairDetector -> uk.co.senab.photoview.p:
    int mActivePointerId -> f
    int mActivePointerIndex -> g
    float getActiveX(android.view.MotionEvent) -> b
    float getActiveY(android.view.MotionEvent) -> c
    boolean onTouchEvent(android.view.MotionEvent) -> a
uk.co.senab.photoview.VersionedGestureDetector$FroyoDetector -> uk.co.senab.photoview.q:
    android.view.ScaleGestureDetector mDetector -> f
    android.view.ScaleGestureDetector$OnScaleGestureListener mScaleListener -> g
    boolean isScaling() -> a
    boolean onTouchEvent(android.view.MotionEvent) -> a
uk.co.senab.photoview.VersionedGestureDetector$FroyoDetector$1 -> uk.co.senab.photoview.q$1:
    uk.co.senab.photoview.VersionedGestureDetector$FroyoDetector this$1 -> a
    boolean onScale(android.view.ScaleGestureDetector) -> onScale
    boolean onScaleBegin(android.view.ScaleGestureDetector) -> onScaleBegin
    void onScaleEnd(android.view.ScaleGestureDetector) -> onScaleEnd
uk.co.senab.photoview.VersionedGestureDetector$OnGestureListener -> uk.co.senab.photoview.r:
    void onDrag(float,float) -> a
    void onFling(float,float,float,float) -> a
    void onScale(float,float,float) -> a
uk.co.senab.photoview.ViewPagerActivity -> uk.co.senab.photoview.ViewPagerActivity:
    android.support.v4.view.ViewPager mViewPager -> b
    java.util.List playableFiles -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
